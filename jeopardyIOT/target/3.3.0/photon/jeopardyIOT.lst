
c:/Users/antrut0405/Desktop/iot/jeopardyIOT/target/3.3.0/photon/jeopardyIOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002e44  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2e60  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080a2e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000049c  20000070  20000070  00030070  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a2ed4  080a2ed4  00022ed4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2efc  080a2efc  00022efc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d9722  00000000  00000000  00022f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00013481  00000000  00000000  000fc622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0001bb17  00000000  00000000  0010faa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002200  00000000  00000000  0012b5ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00005158  00000000  00000000  0012d7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002b83c  00000000  00000000  00132912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000352ed  00000000  00000000  0015e14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000ba828  00000000  00000000  0019343b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00005a98  00000000  00000000  0024dc64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fbe1 	bl	80a27f4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fbe9 	bl	80a2810 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2e64 	.word	0x080a2e64
 80a004c:	20000070 	.word	0x20000070
 80a0050:	20000070 	.word	0x20000070
 80a0054:	20000509 	.word	0x20000509
 80a0058:	20000509 	.word	0x20000509

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 ff9b 	bl	80a0f98 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42ac      	cmp	r4, r5
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a2e28 	.word	0x080a2e28
 80a0080:	080a2e54 	.word	0x080a2e54

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b862 	b.w	80a014c <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f89f 	bl	80a01cc <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f000 bf39 	b.w	80a0f08 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 bc67 	b.w	80a0968 <malloc>

080a009a <_Znaj>:
 80a009a:	f000 bc65 	b.w	80a0968 <malloc>

080a009e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a009e:	f000 bc6b 	b.w	80a0978 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z10StartTimer6String>:
float remTime = 0; // The remaining time left to "buzz in" with the button.

// Called through Javascript when a question is shown. Starts the timer. args is ignored.
int StartTimer(String args)
{
  remTime = 5;
 80a00b4:	4b02      	ldr	r3, [pc, #8]	; (80a00c0 <_Z10StartTimer6String+0xc>)
 80a00b6:	4a03      	ldr	r2, [pc, #12]	; (80a00c4 <_Z10StartTimer6String+0x10>)
  return 1;
}
 80a00b8:	2001      	movs	r0, #1
  remTime = 5;
 80a00ba:	601a      	str	r2, [r3, #0]
}
 80a00bc:	4770      	bx	lr
 80a00be:	bf00      	nop
 80a00c0:	20000080 	.word	0x20000080
 80a00c4:	40a00000 	.word	0x40a00000

080a00c8 <_Z8SetScore6String>:

// Called through Javascript when the player's score is updated.
int SetScore(String newScore)
{
 80a00c8:	b508      	push	{r3, lr}
  score = newScore.toInt();
 80a00ca:	f000 fd26 	bl	80a0b1a <_ZNK6String5toIntEv>
 80a00ce:	4b02      	ldr	r3, [pc, #8]	; (80a00d8 <_Z8SetScore6String+0x10>)
 80a00d0:	6018      	str	r0, [r3, #0]
  return 1;
}
 80a00d2:	2001      	movs	r0, #1
 80a00d4:	bd08      	pop	{r3, pc}
 80a00d6:	bf00      	nop
 80a00d8:	20000084 	.word	0x20000084

080a00dc <_Z13OnPressButtonv>:

// Called when the button is pressed
void OnPressButton()
{
 80a00dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Print some stuff for debugging
  Serial.println("You pressed the button! :) ");
 80a00de:	f001 fb1f 	bl	80a1720 <_Z16_fetch_usbserialv>
 80a00e2:	4917      	ldr	r1, [pc, #92]	; (80a0140 <_Z13OnPressButtonv+0x64>)
 80a00e4:	f000 fd57 	bl	80a0b96 <_ZN5Print7printlnEPKc>
  Serial.print((double)Time.now());
 80a00e8:	f001 fb1a 	bl	80a1720 <_Z16_fetch_usbserialv>
 80a00ec:	4604      	mov	r4, r0
 80a00ee:	f000 fe97 	bl	80a0e20 <_ZN9TimeClass3nowEv>
 80a00f2:	f001 ff4d 	bl	80a1f90 <__aeabi_i2d>
 80a00f6:	460b      	mov	r3, r1
 80a00f8:	2102      	movs	r1, #2
 80a00fa:	4602      	mov	r2, r0
 80a00fc:	9100      	str	r1, [sp, #0]
 80a00fe:	4620      	mov	r0, r4
 80a0100:	f000 fe41 	bl	80a0d86 <_ZN5Print5printEdi>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0104:	4b0f      	ldr	r3, [pc, #60]	; (80a0144 <_Z13OnPressButtonv+0x68>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0106:	2200      	movs	r2, #0
 80a0108:	781b      	ldrb	r3, [r3, #0]
 80a010a:	490f      	ldr	r1, [pc, #60]	; (80a0148 <_Z13OnPressButtonv+0x6c>)
 80a010c:	f88d 3000 	strb.w	r3, [sp]
 80a0110:	a802      	add	r0, sp, #8
 80a0112:	233c      	movs	r3, #60	; 0x3c
 80a0114:	f001 f8c4 	bl	80a12a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0118:	9c03      	ldr	r4, [sp, #12]
 80a011a:	b17c      	cbz	r4, 80a013c <_Z13OnPressButtonv+0x60>
      if (--_M_use_count == 0)
 80a011c:	6863      	ldr	r3, [r4, #4]
 80a011e:	3b01      	subs	r3, #1
 80a0120:	6063      	str	r3, [r4, #4]
 80a0122:	b95b      	cbnz	r3, 80a013c <_Z13OnPressButtonv+0x60>
          _M_dispose();
 80a0124:	6823      	ldr	r3, [r4, #0]
 80a0126:	4620      	mov	r0, r4
 80a0128:	689b      	ldr	r3, [r3, #8]
 80a012a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a012c:	68a3      	ldr	r3, [r4, #8]
 80a012e:	3b01      	subs	r3, #1
 80a0130:	60a3      	str	r3, [r4, #8]
 80a0132:	b91b      	cbnz	r3, 80a013c <_Z13OnPressButtonv+0x60>
            _M_destroy();
 80a0134:	6823      	ldr	r3, [r4, #0]
 80a0136:	4620      	mov	r0, r4
 80a0138:	68db      	ldr	r3, [r3, #12]
 80a013a:	4798      	blx	r3

  // Publish the event
  Particle.publish("ButtonPressed");
}
 80a013c:	b004      	add	sp, #16
 80a013e:	bd10      	pop	{r4, pc}
 80a0140:	080a2ab4 	.word	0x080a2ab4
 80a0144:	20000070 	.word	0x20000070
 80a0148:	080a2ad0 	.word	0x080a2ad0

080a014c <setup>:

// setup() runs once, when the device is first turned on.
void setup()
{
 80a014c:	b538      	push	{r3, r4, r5, lr}
  // Initialize the button pin. INPUT_PULLDOWN means it only gets called when the button is pushed down, not when it is released.
  pinMode(buttonPin, INPUT_PULLDOWN);
 80a014e:	4b18      	ldr	r3, [pc, #96]	; (80a01b0 <setup+0x64>)
 80a0150:	2103      	movs	r1, #3
 80a0152:	8818      	ldrh	r0, [r3, #0]
 80a0154:	f001 fd16 	bl	80a1b84 <pinMode>
  pinMode(D7, OUTPUT);
 80a0158:	2101      	movs	r1, #1
 80a015a:	2007      	movs	r0, #7
 80a015c:	f001 fd12 	bl	80a1b84 <pinMode>

  Serial.begin(9600);
 80a0160:	f001 fade 	bl	80a1720 <_Z16_fetch_usbserialv>
 80a0164:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0168:	f001 fac0 	bl	80a16ec <_ZN9USBSerial5beginEl>

  // Initialize the LCD screen and clear it.
  lcd = new LiquidCrystal_I2C(0x3F, 20, 4);
 80a016c:	2010      	movs	r0, #16
 80a016e:	f7ff ff92 	bl	80a0096 <_Znwj>
 80a0172:	4604      	mov	r4, r0
 80a0174:	b120      	cbz	r0, 80a0180 <setup+0x34>
 80a0176:	2304      	movs	r3, #4
 80a0178:	2214      	movs	r2, #20
 80a017a:	213f      	movs	r1, #63	; 0x3f
 80a017c:	f000 f8b4 	bl	80a02e8 <_ZN17LiquidCrystal_I2CC1Ehhh>
 80a0180:	4d0c      	ldr	r5, [pc, #48]	; (80a01b4 <setup+0x68>)
  lcd->init();
 80a0182:	4620      	mov	r0, r4
  lcd = new LiquidCrystal_I2C(0x3F, 20, 4);
 80a0184:	602c      	str	r4, [r5, #0]
  lcd->init();
 80a0186:	f000 f9c1 	bl	80a050c <_ZN17LiquidCrystal_I2C4initEv>
  lcd->backlight();
 80a018a:	6828      	ldr	r0, [r5, #0]
 80a018c:	f000 f8d6 	bl	80a033c <_ZN17LiquidCrystal_I2C9backlightEv>
  lcd->clear();
 80a0190:	6828      	ldr	r0, [r5, #0]
 80a0192:	f000 f911 	bl	80a03b8 <_ZN17LiquidCrystal_I2C5clearEv>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a0196:	4a08      	ldr	r2, [pc, #32]	; (80a01b8 <setup+0x6c>)
 80a0198:	4908      	ldr	r1, [pc, #32]	; (80a01bc <setup+0x70>)
 80a019a:	4809      	ldr	r0, [pc, #36]	; (80a01c0 <setup+0x74>)
 80a019c:	f000 ff89 	bl	80a10b2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

  // Register the particle functions to be later triggered through Javascript
  Particle.function("aerStartTimer", StartTimer);
  Particle.function("aerSetScore", SetScore);
}
 80a01a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a01a4:	4a07      	ldr	r2, [pc, #28]	; (80a01c4 <setup+0x78>)
 80a01a6:	4908      	ldr	r1, [pc, #32]	; (80a01c8 <setup+0x7c>)
 80a01a8:	4805      	ldr	r0, [pc, #20]	; (80a01c0 <setup+0x74>)
 80a01aa:	f000 bf82 	b.w	80a10b2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a01ae:	bf00      	nop
 80a01b0:	20000000 	.word	0x20000000
 80a01b4:	20000078 	.word	0x20000078
 80a01b8:	080a2ade 	.word	0x080a2ade
 80a01bc:	080a00b5 	.word	0x080a00b5
 80a01c0:	080a1087 	.word	0x080a1087
 80a01c4:	080a2aec 	.word	0x080a2aec
 80a01c8:	080a00c9 	.word	0x080a00c9

080a01cc <loop>:
unsigned long lastTime = 0;
unsigned long lcdUpdateTimer = 0;

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
 80a01cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a01d0:	f000 f9dc 	bl	80a058c <HAL_Timer_Get_Milli_Seconds>
  // Store the time in milliseconds to get a delta time for a timer.
  unsigned long nowTime = millis();
  unsigned long deltaTime = nowTime - lastTime;
 80a01d4:	4a33      	ldr	r2, [pc, #204]	; (80a02a4 <loop+0xd8>)

  lcdUpdateTimer+=deltaTime;
 80a01d6:	4d34      	ldr	r5, [pc, #208]	; (80a02a8 <loop+0xdc>)
  unsigned long deltaTime = nowTime - lastTime;
 80a01d8:	6814      	ldr	r4, [r2, #0]
  lcdUpdateTimer+=deltaTime;
 80a01da:	682b      	ldr	r3, [r5, #0]
  unsigned long deltaTime = nowTime - lastTime;
 80a01dc:	1b04      	subs	r4, r0, r4
  lcdUpdateTimer+=deltaTime;
 80a01de:	4423      	add	r3, r4
 80a01e0:	602b      	str	r3, [r5, #0]

  lastTime = nowTime;

  bool buttonStateNow = digitalRead(buttonPin);
 80a01e2:	4b32      	ldr	r3, [pc, #200]	; (80a02ac <loop+0xe0>)
  lastTime = nowTime;
 80a01e4:	6010      	str	r0, [r2, #0]
  bool buttonStateNow = digitalRead(buttonPin);
 80a01e6:	8818      	ldrh	r0, [r3, #0]
 80a01e8:	f001 fcdd 	bl	80a1ba6 <digitalRead>
 80a01ec:	2800      	cmp	r0, #0
 80a01ee:	bf14      	ite	ne
 80a01f0:	2701      	movne	r7, #1
 80a01f2:	2700      	moveq	r7, #0

  // If the button was just pressed, send the button press.
  if (buttonStateNow == HIGH && buttonStateLast == LOW)
 80a01f4:	4e2e      	ldr	r6, [pc, #184]	; (80a02b0 <loop+0xe4>)
 80a01f6:	d003      	beq.n	80a0200 <loop+0x34>
 80a01f8:	7833      	ldrb	r3, [r6, #0]
 80a01fa:	b90b      	cbnz	r3, 80a0200 <loop+0x34>
  {
    OnPressButton();
 80a01fc:	f7ff ff6e 	bl	80a00dc <_Z13OnPressButtonv>
  }

  buttonStateLast = buttonStateNow;
 80a0200:	7037      	strb	r7, [r6, #0]

  // Tick the remaining time, clamping it at a minimum of 0.
  if (remTime > 0)
 80a0202:	4e2c      	ldr	r6, [pc, #176]	; (80a02b4 <loop+0xe8>)
 80a0204:	2100      	movs	r1, #0
 80a0206:	6837      	ldr	r7, [r6, #0]
 80a0208:	4638      	mov	r0, r7
 80a020a:	f002 fadf 	bl	80a27cc <__aeabi_fcmpgt>
 80a020e:	2800      	cmp	r0, #0
 80a0210:	d042      	beq.n	80a0298 <loop+0xcc>
  {
    remTime -= deltaTime/1000.0;
 80a0212:	4638      	mov	r0, r7
 80a0214:	f001 fece 	bl	80a1fb4 <__aeabi_f2d>
 80a0218:	4680      	mov	r8, r0
 80a021a:	4620      	mov	r0, r4
 80a021c:	4689      	mov	r9, r1
 80a021e:	f001 fea7 	bl	80a1f70 <__aeabi_ui2d>
 80a0222:	2200      	movs	r2, #0
 80a0224:	4b24      	ldr	r3, [pc, #144]	; (80a02b8 <loop+0xec>)
 80a0226:	f002 f847 	bl	80a22b8 <__aeabi_ddiv>
 80a022a:	4602      	mov	r2, r0
 80a022c:	460b      	mov	r3, r1
 80a022e:	4640      	mov	r0, r8
 80a0230:	4649      	mov	r1, r9
 80a0232:	f001 fd5f 	bl	80a1cf4 <__aeabi_dsub>
 80a0236:	f002 fa0d 	bl	80a2654 <__aeabi_d2f>
  else
  {
    remTime = 0;
  }

  if (lcdUpdateTimer > 100) // Every 100ms...
 80a023a:	682b      	ldr	r3, [r5, #0]
 80a023c:	6030      	str	r0, [r6, #0]
 80a023e:	2b64      	cmp	r3, #100	; 0x64
 80a0240:	d92e      	bls.n	80a02a0 <loop+0xd4>
  {
    lcd->clear();
 80a0242:	4c1e      	ldr	r4, [pc, #120]	; (80a02bc <loop+0xf0>)
 80a0244:	6820      	ldr	r0, [r4, #0]
 80a0246:	f000 f8b7 	bl	80a03b8 <_ZN17LiquidCrystal_I2C5clearEv>
    // Print the score on line 1
    lcd->setCursor(0, 1);
 80a024a:	2201      	movs	r2, #1
 80a024c:	2100      	movs	r1, #0
 80a024e:	6820      	ldr	r0, [r4, #0]
 80a0250:	f000 f8c6 	bl	80a03e0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    lcd->print("Score: ");
 80a0254:	491a      	ldr	r1, [pc, #104]	; (80a02c0 <loop+0xf4>)
 80a0256:	6820      	ldr	r0, [r4, #0]
 80a0258:	f000 fc8a 	bl	80a0b70 <_ZN5Print5printEPKc>
    lcd->print(score);
 80a025c:	4b19      	ldr	r3, [pc, #100]	; (80a02c4 <loop+0xf8>)
 80a025e:	6827      	ldr	r7, [r4, #0]
 80a0260:	681d      	ldr	r5, [r3, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80a0262:	2d00      	cmp	r5, #0
 80a0264:	da1a      	bge.n	80a029c <loop+0xd0>
            t = print('-');
 80a0266:	212d      	movs	r1, #45	; 0x2d
 80a0268:	4638      	mov	r0, r7
 80a026a:	f000 fc85 	bl	80a0b78 <_ZN5Print5printEc>
            val = -n;
 80a026e:	4269      	negs	r1, r5
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0270:	220a      	movs	r2, #10
 80a0272:	4638      	mov	r0, r7
 80a0274:	f000 fc99 	bl	80a0baa <_ZN5Print11printNumberEmh>
    // Print the timer on line 2
    lcd->setCursor(0, 2);
 80a0278:	2202      	movs	r2, #2
 80a027a:	6820      	ldr	r0, [r4, #0]
 80a027c:	2100      	movs	r1, #0
 80a027e:	f000 f8af 	bl	80a03e0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    lcd->print("Time: ");
 80a0282:	4911      	ldr	r1, [pc, #68]	; (80a02c8 <loop+0xfc>)
 80a0284:	6820      	ldr	r0, [r4, #0]
 80a0286:	f000 fc73 	bl	80a0b70 <_ZN5Print5printEPKc>
    lcd->print(remTime);
 80a028a:	6831      	ldr	r1, [r6, #0]
 80a028c:	6820      	ldr	r0, [r4, #0]
 80a028e:	2202      	movs	r2, #2
  }
 80a0290:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lcd->print(remTime);
 80a0294:	f000 bd68 	b.w	80a0d68 <_ZN5Print5printEfi>
    remTime = 0;
 80a0298:	2000      	movs	r0, #0
 80a029a:	e7ce      	b.n	80a023a <loop+0x6e>
            val = n;
 80a029c:	4629      	mov	r1, r5
 80a029e:	e7e7      	b.n	80a0270 <loop+0xa4>
 80a02a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a02a4:	20000074 	.word	0x20000074
 80a02a8:	2000007c 	.word	0x2000007c
 80a02ac:	20000000 	.word	0x20000000
 80a02b0:	20000071 	.word	0x20000071
 80a02b4:	20000080 	.word	0x20000080
 80a02b8:	408f4000 	.word	0x408f4000
 80a02bc:	20000078 	.word	0x20000078
 80a02c0:	080a2af8 	.word	0x080a2af8
 80a02c4:	20000084 	.word	0x20000084
 80a02c8:	080a2b00 	.word	0x080a2b00

080a02cc <_GLOBAL__sub_I_lcd>:
        val_(val) {
 80a02cc:	2200      	movs	r2, #0
 80a02ce:	4b01      	ldr	r3, [pc, #4]	; (80a02d4 <_GLOBAL__sub_I_lcd+0x8>)
 80a02d0:	701a      	strb	r2, [r3, #0]
 80a02d2:	4770      	bx	lr
 80a02d4:	20000070 	.word	0x20000070

080a02d8 <_ZN17LiquidCrystal_I2CD1Ev>:

//#define En B00000100  // Enable bit
//#define Rw B00000010  // Read/Write bit
//#define Rs B00000001  // Register select bit

class LiquidCrystal_I2C : public Print {
 80a02d8:	4770      	bx	lr

080a02da <_ZN17LiquidCrystal_I2CD0Ev>:
 80a02da:	b510      	push	{r4, lr}
 80a02dc:	4604      	mov	r4, r0
 80a02de:	2110      	movs	r1, #16
 80a02e0:	f7ff fedd 	bl	80a009e <_ZdlPvj>
 80a02e4:	4620      	mov	r0, r4
 80a02e6:	bd10      	pop	{r4, pc}

080a02e8 <_ZN17LiquidCrystal_I2CC1Ehhh>:
#include "application.h"

#include "LiquidCrystal_I2C_Spark.h"


LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr,uint8_t lcd_cols,uint8_t lcd_rows)
 80a02e8:	b570      	push	{r4, r5, r6, lr}
    Print() : write_error(0) {}
 80a02ea:	2500      	movs	r5, #0
 80a02ec:	4e03      	ldr	r6, [pc, #12]	; (80a02fc <_ZN17LiquidCrystal_I2CC1Ehhh+0x14>)
 80a02ee:	6045      	str	r5, [r0, #4]
 80a02f0:	6006      	str	r6, [r0, #0]
{
  _Addr = lcd_Addr;
 80a02f2:	7201      	strb	r1, [r0, #8]
  _cols = lcd_cols;
 80a02f4:	7342      	strb	r2, [r0, #13]
  _rows = lcd_rows;
 80a02f6:	7383      	strb	r3, [r0, #14]
  _backlightval = LCD_NOBACKLIGHT;
 80a02f8:	73c5      	strb	r5, [r0, #15]
}
 80a02fa:	bd70      	pop	{r4, r5, r6, pc}
 80a02fc:	080a2b10 	.word	0x080a2b10

080a0300 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
void LiquidCrystal_I2C::write4bits(uint8_t value) {
        expanderWrite(value);
        pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){
 80a0300:	b538      	push	{r3, r4, r5, lr}
 80a0302:	4604      	mov	r4, r0
 80a0304:	460d      	mov	r5, r1
        Wire.beginTransmission(_Addr);
 80a0306:	f001 fcc7 	bl	80a1c98 <_Z19__fetch_global_Wirev>
 80a030a:	7a21      	ldrb	r1, [r4, #8]
 80a030c:	f001 fb16 	bl	80a193c <_ZN7TwoWire17beginTransmissionEh>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0310:	2002      	movs	r0, #2
 80a0312:	f000 f933 	bl	80a057c <HAL_Delay_Microseconds>
        delayMicroseconds(2);
        Wire.write((int)(_data) | _backlightval);
 80a0316:	f001 fcbf 	bl	80a1c98 <_Z19__fetch_global_Wirev>
 80a031a:	7be1      	ldrb	r1, [r4, #15]
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a031c:	6803      	ldr	r3, [r0, #0]
 80a031e:	4329      	orrs	r1, r5
 80a0320:	689b      	ldr	r3, [r3, #8]
 80a0322:	4798      	blx	r3
 80a0324:	2002      	movs	r0, #2
 80a0326:	f000 f929 	bl	80a057c <HAL_Delay_Microseconds>
        delayMicroseconds(2);
        Wire.endTransmission();
 80a032a:	f001 fcb5 	bl	80a1c98 <_Z19__fetch_global_Wirev>
 80a032e:	f001 fb0d 	bl	80a194c <_ZN7TwoWire15endTransmissionEv>
        delayMicroseconds(2);
        }
 80a0332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0336:	2002      	movs	r0, #2
 80a0338:	f000 b920 	b.w	80a057c <HAL_Delay_Microseconds>

080a033c <_ZN17LiquidCrystal_I2C9backlightEv>:
        _backlightval=LCD_BACKLIGHT;
 80a033c:	2308      	movs	r3, #8
        expanderWrite(0);
 80a033e:	2100      	movs	r1, #0
        _backlightval=LCD_BACKLIGHT;
 80a0340:	73c3      	strb	r3, [r0, #15]
        expanderWrite(0);
 80a0342:	f7ff bfdd 	b.w	80a0300 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

080a0346 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
 80a0346:	b538      	push	{r3, r4, r5, lr}
 80a0348:	4605      	mov	r5, r0
 80a034a:	460c      	mov	r4, r1
        expanderWrite(_data | (1<<2));  // En high
 80a034c:	f041 0104 	orr.w	r1, r1, #4
 80a0350:	f7ff ffd6 	bl	80a0300 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
 80a0354:	2001      	movs	r0, #1
 80a0356:	f000 f911 	bl	80a057c <HAL_Delay_Microseconds>
        delayMicroseconds(1);           // enable pulse must be >450ns

        expanderWrite(_data & ~(1<<2)); // En low
 80a035a:	4628      	mov	r0, r5
 80a035c:	f004 01fb 	and.w	r1, r4, #251	; 0xfb
 80a0360:	f7ff ffce 	bl	80a0300 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        delayMicroseconds(50);          // commands need > 37us to settle
}
 80a0364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0368:	2032      	movs	r0, #50	; 0x32
 80a036a:	f000 b907 	b.w	80a057c <HAL_Delay_Microseconds>

080a036e <_ZN17LiquidCrystal_I2C10write4bitsEh>:
void LiquidCrystal_I2C::write4bits(uint8_t value) {
 80a036e:	b538      	push	{r3, r4, r5, lr}
 80a0370:	4604      	mov	r4, r0
 80a0372:	460d      	mov	r5, r1
        expanderWrite(value);
 80a0374:	f7ff ffc4 	bl	80a0300 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        pulseEnable(value);
 80a0378:	4629      	mov	r1, r5
 80a037a:	4620      	mov	r0, r4
}
 80a037c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pulseEnable(value);
 80a0380:	f7ff bfe1 	b.w	80a0346 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

080a0384 <_ZN17LiquidCrystal_I2C4sendEhh>:
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
 80a0384:	b570      	push	{r4, r5, r6, lr}
 80a0386:	460d      	mov	r5, r1
 80a0388:	4614      	mov	r4, r2
 80a038a:	4606      	mov	r6, r0
        uint8_t highnib=value&0xf0;
 80a038c:	f021 010f 	bic.w	r1, r1, #15
       write4bits((highnib)|mode);
 80a0390:	4311      	orrs	r1, r2
 80a0392:	f7ff ffec 	bl	80a036e <_ZN17LiquidCrystal_I2C10write4bitsEh>
        write4bits((lownib)|mode);
 80a0396:	ea44 1105 	orr.w	r1, r4, r5, lsl #4
 80a039a:	4630      	mov	r0, r6
}
 80a039c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        write4bits((lownib)|mode);
 80a03a0:	b2c9      	uxtb	r1, r1
 80a03a2:	f7ff bfe4 	b.w	80a036e <_ZN17LiquidCrystal_I2C10write4bitsEh>

080a03a6 <_ZN17LiquidCrystal_I2C5writeEh>:
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
 80a03a6:	b508      	push	{r3, lr}
        send(value, 1);
 80a03a8:	2201      	movs	r2, #1
 80a03aa:	f7ff ffeb 	bl	80a0384 <_ZN17LiquidCrystal_I2C4sendEhh>
}
 80a03ae:	2000      	movs	r0, #0
 80a03b0:	bd08      	pop	{r3, pc}

080a03b2 <_ZN17LiquidCrystal_I2C7commandEh>:
        send(value, 0);
 80a03b2:	2200      	movs	r2, #0
 80a03b4:	f7ff bfe6 	b.w	80a0384 <_ZN17LiquidCrystal_I2C4sendEhh>

080a03b8 <_ZN17LiquidCrystal_I2C5clearEv>:
void LiquidCrystal_I2C::clear(){
 80a03b8:	b508      	push	{r3, lr}
        command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 80a03ba:	2101      	movs	r1, #1
 80a03bc:	f7ff fff9 	bl	80a03b2 <_ZN17LiquidCrystal_I2C7commandEh>
}
 80a03c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a03c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a03c8:	f000 b8d8 	b.w	80a057c <HAL_Delay_Microseconds>

080a03cc <_ZN17LiquidCrystal_I2C4homeEv>:
void LiquidCrystal_I2C::home(){
 80a03cc:	b508      	push	{r3, lr}
        command(LCD_RETURNHOME);  // set cursor position to zero
 80a03ce:	2102      	movs	r1, #2
 80a03d0:	f7ff ffef 	bl	80a03b2 <_ZN17LiquidCrystal_I2C7commandEh>
}
 80a03d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a03d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a03dc:	f000 b8ce 	b.w	80a057c <HAL_Delay_Microseconds>

080a03e0 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
 80a03e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a03e2:	4606      	mov	r6, r0
 80a03e4:	4615      	mov	r5, r2
 80a03e6:	460c      	mov	r4, r1
        int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80a03e8:	4b0c      	ldr	r3, [pc, #48]	; (80a041c <_ZN17LiquidCrystal_I2C9setCursorEhh+0x3c>)
 80a03ea:	f10d 0c10 	add.w	ip, sp, #16
 80a03ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80a03f0:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
        if ( row > _numlines ) {
 80a03f4:	7b32      	ldrb	r2, [r6, #12]
        command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80a03f6:	ab04      	add	r3, sp, #16
        if ( row > _numlines ) {
 80a03f8:	42aa      	cmp	r2, r5
                row = _numlines-1;    // we count rows starting w/0
 80a03fa:	bf3c      	itt	cc
 80a03fc:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80a0400:	b2d5      	uxtbcc	r5, r2
        command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80a0402:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80a0406:	f855 1c10 	ldr.w	r1, [r5, #-16]
 80a040a:	4630      	mov	r0, r6
 80a040c:	4421      	add	r1, r4
 80a040e:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80a0412:	b2c9      	uxtb	r1, r1
 80a0414:	f7ff ffcd 	bl	80a03b2 <_ZN17LiquidCrystal_I2C7commandEh>
}
 80a0418:	b004      	add	sp, #16
 80a041a:	bd70      	pop	{r4, r5, r6, pc}
 80a041c:	080a2b20 	.word	0x080a2b20

080a0420 <_ZN17LiquidCrystal_I2C7displayEv>:
void LiquidCrystal_I2C::display() {
 80a0420:	b508      	push	{r3, lr}
        _displaycontrol |= LCD_DISPLAYON;
 80a0422:	7a81      	ldrb	r1, [r0, #10]
 80a0424:	f041 0204 	orr.w	r2, r1, #4
 80a0428:	7282      	strb	r2, [r0, #10]
        command(LCD_DISPLAYCONTROL | _displaycontrol);
 80a042a:	f041 010c 	orr.w	r1, r1, #12
 80a042e:	f7ff ffc0 	bl	80a03b2 <_ZN17LiquidCrystal_I2C7commandEh>
}
 80a0432:	bd08      	pop	{r3, pc}

080a0434 <_ZN17LiquidCrystal_I2C5beginEhhh>:
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 80a0434:	b510      	push	{r4, lr}
        if (lines > 1) {
 80a0436:	2a01      	cmp	r2, #1
                _displayfunction |= LCD_2LINE;
 80a0438:	bf88      	it	hi
 80a043a:	7a41      	ldrbhi	r1, [r0, #9]
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 80a043c:	4604      	mov	r4, r0
                _displayfunction |= LCD_2LINE;
 80a043e:	bf84      	itt	hi
 80a0440:	f041 0108 	orrhi.w	r1, r1, #8
 80a0444:	7241      	strbhi	r1, [r0, #9]
        _numlines = lines;
 80a0446:	7302      	strb	r2, [r0, #12]
        if ((dotsize != 0) && (lines == 1)) {
 80a0448:	b12b      	cbz	r3, 80a0456 <_ZN17LiquidCrystal_I2C5beginEhhh+0x22>
 80a044a:	2a01      	cmp	r2, #1
                _displayfunction |= LCD_5x10DOTS;
 80a044c:	bf02      	ittt	eq
 80a044e:	7a43      	ldrbeq	r3, [r0, #9]
 80a0450:	f043 0304 	orreq.w	r3, r3, #4
 80a0454:	7243      	strbeq	r3, [r0, #9]
        delay(50);
 80a0456:	2032      	movs	r0, #50	; 0x32
 80a0458:	f000 fcfc 	bl	80a0e54 <delay>
        expanderWrite(_backlightval);   // reset expanderand turn backlight off (Bit 8 =1)
 80a045c:	7be1      	ldrb	r1, [r4, #15]
 80a045e:	4620      	mov	r0, r4
 80a0460:	f7ff ff4e 	bl	80a0300 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        delay(1000);
 80a0464:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0468:	f000 fcf4 	bl	80a0e54 <delay>
   write4bits(0x03 << 4);
 80a046c:	2130      	movs	r1, #48	; 0x30
 80a046e:	4620      	mov	r0, r4
 80a0470:	f7ff ff7d 	bl	80a036e <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a0474:	f241 1094 	movw	r0, #4500	; 0x1194
 80a0478:	f000 f880 	bl	80a057c <HAL_Delay_Microseconds>
   write4bits(0x03 << 4);
 80a047c:	2130      	movs	r1, #48	; 0x30
 80a047e:	4620      	mov	r0, r4
 80a0480:	f7ff ff75 	bl	80a036e <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a0484:	f241 1094 	movw	r0, #4500	; 0x1194
 80a0488:	f000 f878 	bl	80a057c <HAL_Delay_Microseconds>
   write4bits(0x03 << 4);
 80a048c:	2130      	movs	r1, #48	; 0x30
 80a048e:	4620      	mov	r0, r4
 80a0490:	f7ff ff6d 	bl	80a036e <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a0494:	2096      	movs	r0, #150	; 0x96
 80a0496:	f000 f871 	bl	80a057c <HAL_Delay_Microseconds>
   write4bits(0x02 << 4);
 80a049a:	4620      	mov	r0, r4
 80a049c:	2120      	movs	r1, #32
 80a049e:	f7ff ff66 	bl	80a036e <_ZN17LiquidCrystal_I2C10write4bitsEh>
        command(LCD_FUNCTIONSET | _displayfunction);
 80a04a2:	7a61      	ldrb	r1, [r4, #9]
 80a04a4:	4620      	mov	r0, r4
 80a04a6:	f041 0120 	orr.w	r1, r1, #32
 80a04aa:	f7ff ff82 	bl	80a03b2 <_ZN17LiquidCrystal_I2C7commandEh>
        _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a04ae:	2304      	movs	r3, #4
        display();
 80a04b0:	4620      	mov	r0, r4
        _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a04b2:	72a3      	strb	r3, [r4, #10]
        display();
 80a04b4:	f7ff ffb4 	bl	80a0420 <_ZN17LiquidCrystal_I2C7displayEv>
        clear();
 80a04b8:	4620      	mov	r0, r4
 80a04ba:	f7ff ff7d 	bl	80a03b8 <_ZN17LiquidCrystal_I2C5clearEv>
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a04be:	2302      	movs	r3, #2
        command(LCD_ENTRYMODESET | _displaymode);
 80a04c0:	4620      	mov	r0, r4
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a04c2:	72e3      	strb	r3, [r4, #11]
        command(LCD_ENTRYMODESET | _displaymode);
 80a04c4:	2106      	movs	r1, #6
 80a04c6:	f7ff ff74 	bl	80a03b2 <_ZN17LiquidCrystal_I2C7commandEh>
        home();
 80a04ca:	4620      	mov	r0, r4
}
 80a04cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        home();
 80a04d0:	f7ff bf7c 	b.w	80a03cc <_ZN17LiquidCrystal_I2C4homeEv>

080a04d4 <_ZN17LiquidCrystal_I2C9init_privEv>:
{
 80a04d4:	b510      	push	{r4, lr}
 80a04d6:	4604      	mov	r4, r0
        Wire.setSpeed(CLOCK_SPEED_100KHZ);
 80a04d8:	f001 fbde 	bl	80a1c98 <_Z19__fetch_global_Wirev>
 80a04dc:	490a      	ldr	r1, [pc, #40]	; (80a0508 <_ZN17LiquidCrystal_I2C9init_privEv+0x34>)
 80a04de:	f001 fa1f 	bl	80a1920 <_ZN7TwoWire8setSpeedEm>
        Wire.stretchClock(true);
 80a04e2:	f001 fbd9 	bl	80a1c98 <_Z19__fetch_global_Wirev>
 80a04e6:	2101      	movs	r1, #1
 80a04e8:	f001 fa1e 	bl	80a1928 <_ZN7TwoWire12stretchClockEb>
        Wire.begin();
 80a04ec:	f001 fbd4 	bl	80a1c98 <_Z19__fetch_global_Wirev>
 80a04f0:	f001 fa1e 	bl	80a1930 <_ZN7TwoWire5beginEv>
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80a04f4:	2300      	movs	r3, #0
        begin(_cols, _rows);
 80a04f6:	4620      	mov	r0, r4
 80a04f8:	7ba2      	ldrb	r2, [r4, #14]
 80a04fa:	7b61      	ldrb	r1, [r4, #13]
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80a04fc:	7263      	strb	r3, [r4, #9]
}
 80a04fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        begin(_cols, _rows);
 80a0502:	f7ff bf97 	b.w	80a0434 <_ZN17LiquidCrystal_I2C5beginEhhh>
 80a0506:	bf00      	nop
 80a0508:	000186a0 	.word	0x000186a0

080a050c <_ZN17LiquidCrystal_I2C4initEv>:
        init_priv();
 80a050c:	f7ff bfe2 	b.w	80a04d4 <_ZN17LiquidCrystal_I2C9init_privEv>

080a0510 <_GLOBAL__sub_I__ZN11ArduinoJson9JsonArray8_invalidE>:
  // Creates an empty List<T> attached to a JsonBuffer.
  // The JsonBuffer allows to allocate new nodes.
  // When buffer is NULL, the List is not able to grow and success() returns
  // false. This is used to identify bad memory allocations and parsing
  // failures.
  explicit List(JsonBuffer *buffer) : _buffer(buffer), _firstNode(NULL) {}
 80a0510:	2200      	movs	r2, #0
 80a0512:	4b02      	ldr	r3, [pc, #8]	; (80a051c <_GLOBAL__sub_I__ZN11ArduinoJson9JsonArray8_invalidE+0xc>)
 80a0514:	e9c3 2200 	strd	r2, r2, [r3]

    writer.writeComma();
  }

  writer.endArray();
}
 80a0518:	4770      	bx	lr
 80a051a:	bf00      	nop
 80a051c:	20000088 	.word	0x20000088

080a0520 <_GLOBAL__sub_I__ZN11ArduinoJson10JsonObject8_invalidE>:
 80a0520:	2200      	movs	r2, #0
 80a0522:	4b02      	ldr	r3, [pc, #8]	; (80a052c <_GLOBAL__sub_I__ZN11ArduinoJson10JsonObject8_invalidE+0xc>)
 80a0524:	e9c3 2200 	strd	r2, r2, [r3]

    writer.writeComma();
  }

  writer.endObject();
}
 80a0528:	4770      	bx	lr
 80a052a:	bf00      	nop
 80a052c:	20000090 	.word	0x20000090

080a0530 <_GLOBAL__sub_I__ZN11ArduinoJson11JsonVariant8_invalidE>:
  // Return JsonVariant::invalid() if the variant is not an object.
  JsonVariant &operator[](const char *key);

 private:
  // Special constructor used only to create _invalid.
  explicit JsonVariant(Internals::JsonVariantType type) : _type(type) {}
 80a0530:	2200      	movs	r2, #0
 80a0532:	4b01      	ldr	r3, [pc, #4]	; (80a0538 <_GLOBAL__sub_I__ZN11ArduinoJson11JsonVariant8_invalidE+0x8>)
 80a0534:	701a      	strb	r2, [r3, #0]
    writer.writeBoolean(as<bool>());
  else if (is<double>()) {
    uint8_t decimals = static_cast<uint8_t>(_type - JSON_DOUBLE_0_DECIMALS);
    writer.writeDouble(as<double>(), decimals);
  }
}
 80a0536:	4770      	bx	lr
 80a0538:	20000098 	.word	0x20000098

080a053c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a053c:	b508      	push	{r3, lr}
 80a053e:	4b02      	ldr	r3, [pc, #8]	; (80a0548 <HAL_Pin_Mode+0xc>)
 80a0540:	681b      	ldr	r3, [r3, #0]
 80a0542:	689b      	ldr	r3, [r3, #8]
 80a0544:	9301      	str	r3, [sp, #4]
 80a0546:	bd08      	pop	{r3, pc}
 80a0548:	080601b0 	.word	0x080601b0

080a054c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a054c:	b508      	push	{r3, lr}
 80a054e:	4b02      	ldr	r3, [pc, #8]	; (80a0558 <HAL_Get_Pin_Mode+0xc>)
 80a0550:	681b      	ldr	r3, [r3, #0]
 80a0552:	68db      	ldr	r3, [r3, #12]
 80a0554:	9301      	str	r3, [sp, #4]
 80a0556:	bd08      	pop	{r3, pc}
 80a0558:	080601b0 	.word	0x080601b0

080a055c <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a055c:	b508      	push	{r3, lr}
 80a055e:	4b02      	ldr	r3, [pc, #8]	; (80a0568 <HAL_GPIO_Read+0xc>)
 80a0560:	681b      	ldr	r3, [r3, #0]
 80a0562:	695b      	ldr	r3, [r3, #20]
 80a0564:	9301      	str	r3, [sp, #4]
 80a0566:	bd08      	pop	{r3, pc}
 80a0568:	080601b0 	.word	0x080601b0

080a056c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a056c:	b508      	push	{r3, lr}
 80a056e:	4b02      	ldr	r3, [pc, #8]	; (80a0578 <HAL_RNG_GetRandomNumber+0xc>)
 80a0570:	681b      	ldr	r3, [r3, #0]
 80a0572:	685b      	ldr	r3, [r3, #4]
 80a0574:	9301      	str	r3, [sp, #4]
 80a0576:	bd08      	pop	{r3, pc}
 80a0578:	0806019c 	.word	0x0806019c

080a057c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a057c:	b508      	push	{r3, lr}
 80a057e:	4b02      	ldr	r3, [pc, #8]	; (80a0588 <HAL_Delay_Microseconds+0xc>)
 80a0580:	681b      	ldr	r3, [r3, #0]
 80a0582:	68db      	ldr	r3, [r3, #12]
 80a0584:	9301      	str	r3, [sp, #4]
 80a0586:	bd08      	pop	{r3, pc}
 80a0588:	0806019c 	.word	0x0806019c

080a058c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a058c:	b508      	push	{r3, lr}
 80a058e:	4b02      	ldr	r3, [pc, #8]	; (80a0598 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0590:	681b      	ldr	r3, [r3, #0]
 80a0592:	695b      	ldr	r3, [r3, #20]
 80a0594:	9301      	str	r3, [sp, #4]
 80a0596:	bd08      	pop	{r3, pc}
 80a0598:	0806019c 	.word	0x0806019c

080a059c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a059c:	b508      	push	{r3, lr}
 80a059e:	4b02      	ldr	r3, [pc, #8]	; (80a05a8 <hal_rtc_time_is_valid+0xc>)
 80a05a0:	681b      	ldr	r3, [r3, #0]
 80a05a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a05a4:	9301      	str	r3, [sp, #4]
 80a05a6:	bd08      	pop	{r3, pc}
 80a05a8:	0806019c 	.word	0x0806019c

080a05ac <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a05ac:	b508      	push	{r3, lr}
 80a05ae:	4b02      	ldr	r3, [pc, #8]	; (80a05b8 <hal_rtc_get_time+0xc>)
 80a05b0:	681b      	ldr	r3, [r3, #0]
 80a05b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a05b4:	9301      	str	r3, [sp, #4]
 80a05b6:	bd08      	pop	{r3, pc}
 80a05b8:	0806019c 	.word	0x0806019c

080a05bc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a05bc:	b508      	push	{r3, lr}
 80a05be:	4b02      	ldr	r3, [pc, #8]	; (80a05c8 <os_mutex_recursive_create+0xc>)
 80a05c0:	681b      	ldr	r3, [r3, #0]
 80a05c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a05c4:	9301      	str	r3, [sp, #4]
 80a05c6:	bd08      	pop	{r3, pc}
 80a05c8:	080601d0 	.word	0x080601d0

080a05cc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a05cc:	b508      	push	{r3, lr}
 80a05ce:	4b02      	ldr	r3, [pc, #8]	; (80a05d8 <os_mutex_recursive_destroy+0xc>)
 80a05d0:	681b      	ldr	r3, [r3, #0]
 80a05d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a05d4:	9301      	str	r3, [sp, #4]
 80a05d6:	bd08      	pop	{r3, pc}
 80a05d8:	080601d0 	.word	0x080601d0

080a05dc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a05dc:	b508      	push	{r3, lr}
 80a05de:	4b02      	ldr	r3, [pc, #8]	; (80a05e8 <hal_usart_write+0xc>)
 80a05e0:	681b      	ldr	r3, [r3, #0]
 80a05e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a05e4:	9301      	str	r3, [sp, #4]
 80a05e6:	bd08      	pop	{r3, pc}
 80a05e8:	080601c4 	.word	0x080601c4

080a05ec <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a05ec:	b508      	push	{r3, lr}
 80a05ee:	4b02      	ldr	r3, [pc, #8]	; (80a05f8 <hal_usart_available+0xc>)
 80a05f0:	681b      	ldr	r3, [r3, #0]
 80a05f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a05f4:	9301      	str	r3, [sp, #4]
 80a05f6:	bd08      	pop	{r3, pc}
 80a05f8:	080601c4 	.word	0x080601c4

080a05fc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a05fc:	b508      	push	{r3, lr}
 80a05fe:	4b02      	ldr	r3, [pc, #8]	; (80a0608 <hal_usart_read+0xc>)
 80a0600:	681b      	ldr	r3, [r3, #0]
 80a0602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0604:	9301      	str	r3, [sp, #4]
 80a0606:	bd08      	pop	{r3, pc}
 80a0608:	080601c4 	.word	0x080601c4

080a060c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a060c:	b508      	push	{r3, lr}
 80a060e:	4b02      	ldr	r3, [pc, #8]	; (80a0618 <hal_usart_peek+0xc>)
 80a0610:	681b      	ldr	r3, [r3, #0]
 80a0612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0614:	9301      	str	r3, [sp, #4]
 80a0616:	bd08      	pop	{r3, pc}
 80a0618:	080601c4 	.word	0x080601c4

080a061c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a061c:	b508      	push	{r3, lr}
 80a061e:	4b02      	ldr	r3, [pc, #8]	; (80a0628 <hal_usart_flush+0xc>)
 80a0620:	681b      	ldr	r3, [r3, #0]
 80a0622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0624:	9301      	str	r3, [sp, #4]
 80a0626:	bd08      	pop	{r3, pc}
 80a0628:	080601c4 	.word	0x080601c4

080a062c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a062c:	b508      	push	{r3, lr}
 80a062e:	4b02      	ldr	r3, [pc, #8]	; (80a0638 <hal_usart_is_enabled+0xc>)
 80a0630:	681b      	ldr	r3, [r3, #0]
 80a0632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0634:	9301      	str	r3, [sp, #4]
 80a0636:	bd08      	pop	{r3, pc}
 80a0638:	080601c4 	.word	0x080601c4

080a063c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a063c:	b508      	push	{r3, lr}
 80a063e:	4b02      	ldr	r3, [pc, #8]	; (80a0648 <hal_usart_available_data_for_write+0xc>)
 80a0640:	681b      	ldr	r3, [r3, #0]
 80a0642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0644:	9301      	str	r3, [sp, #4]
 80a0646:	bd08      	pop	{r3, pc}
 80a0648:	080601c4 	.word	0x080601c4

080a064c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a064c:	b508      	push	{r3, lr}
 80a064e:	4b02      	ldr	r3, [pc, #8]	; (80a0658 <hal_usart_init_ex+0xc>)
 80a0650:	681b      	ldr	r3, [r3, #0]
 80a0652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0654:	9301      	str	r3, [sp, #4]
 80a0656:	bd08      	pop	{r3, pc}
 80a0658:	080601c4 	.word	0x080601c4

080a065c <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 80a065c:	b508      	push	{r3, lr}
 80a065e:	4b02      	ldr	r3, [pc, #8]	; (80a0668 <hal_i2c_set_speed+0xc>)
 80a0660:	681b      	ldr	r3, [r3, #0]
 80a0662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0664:	9301      	str	r3, [sp, #4]
 80a0666:	bd08      	pop	{r3, pc}
 80a0668:	080601ac 	.word	0x080601ac

080a066c <hal_i2c_stretch_clock>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
 80a066c:	b508      	push	{r3, lr}
 80a066e:	4b02      	ldr	r3, [pc, #8]	; (80a0678 <hal_i2c_stretch_clock+0xc>)
 80a0670:	681b      	ldr	r3, [r3, #0]
 80a0672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0674:	9301      	str	r3, [sp, #4]
 80a0676:	bd08      	pop	{r3, pc}
 80a0678:	080601ac 	.word	0x080601ac

080a067c <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a067c:	b508      	push	{r3, lr}
 80a067e:	4b02      	ldr	r3, [pc, #8]	; (80a0688 <hal_i2c_begin+0xc>)
 80a0680:	681b      	ldr	r3, [r3, #0]
 80a0682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0684:	9301      	str	r3, [sp, #4]
 80a0686:	bd08      	pop	{r3, pc}
 80a0688:	080601ac 	.word	0x080601ac

080a068c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a068c:	b508      	push	{r3, lr}
 80a068e:	4b02      	ldr	r3, [pc, #8]	; (80a0698 <hal_i2c_begin_transmission+0xc>)
 80a0690:	681b      	ldr	r3, [r3, #0]
 80a0692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0694:	9301      	str	r3, [sp, #4]
 80a0696:	bd08      	pop	{r3, pc}
 80a0698:	080601ac 	.word	0x080601ac

080a069c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a069c:	b508      	push	{r3, lr}
 80a069e:	4b02      	ldr	r3, [pc, #8]	; (80a06a8 <hal_i2c_end_transmission+0xc>)
 80a06a0:	681b      	ldr	r3, [r3, #0]
 80a06a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a06a4:	9301      	str	r3, [sp, #4]
 80a06a6:	bd08      	pop	{r3, pc}
 80a06a8:	080601ac 	.word	0x080601ac

080a06ac <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a06ac:	b508      	push	{r3, lr}
 80a06ae:	4b02      	ldr	r3, [pc, #8]	; (80a06b8 <hal_i2c_write+0xc>)
 80a06b0:	681b      	ldr	r3, [r3, #0]
 80a06b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a06b4:	9301      	str	r3, [sp, #4]
 80a06b6:	bd08      	pop	{r3, pc}
 80a06b8:	080601ac 	.word	0x080601ac

080a06bc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a06bc:	b508      	push	{r3, lr}
 80a06be:	4b02      	ldr	r3, [pc, #8]	; (80a06c8 <hal_i2c_available+0xc>)
 80a06c0:	681b      	ldr	r3, [r3, #0]
 80a06c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a06c4:	9301      	str	r3, [sp, #4]
 80a06c6:	bd08      	pop	{r3, pc}
 80a06c8:	080601ac 	.word	0x080601ac

080a06cc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a06cc:	b508      	push	{r3, lr}
 80a06ce:	4b02      	ldr	r3, [pc, #8]	; (80a06d8 <hal_i2c_read+0xc>)
 80a06d0:	681b      	ldr	r3, [r3, #0]
 80a06d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a06d4:	9301      	str	r3, [sp, #4]
 80a06d6:	bd08      	pop	{r3, pc}
 80a06d8:	080601ac 	.word	0x080601ac

080a06dc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a06dc:	b508      	push	{r3, lr}
 80a06de:	4b02      	ldr	r3, [pc, #8]	; (80a06e8 <hal_i2c_peek+0xc>)
 80a06e0:	681b      	ldr	r3, [r3, #0]
 80a06e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a06e4:	9301      	str	r3, [sp, #4]
 80a06e6:	bd08      	pop	{r3, pc}
 80a06e8:	080601ac 	.word	0x080601ac

080a06ec <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a06ec:	b508      	push	{r3, lr}
 80a06ee:	4b02      	ldr	r3, [pc, #8]	; (80a06f8 <hal_i2c_flush+0xc>)
 80a06f0:	681b      	ldr	r3, [r3, #0]
 80a06f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a06f4:	9301      	str	r3, [sp, #4]
 80a06f6:	bd08      	pop	{r3, pc}
 80a06f8:	080601ac 	.word	0x080601ac

080a06fc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a06fc:	b508      	push	{r3, lr}
 80a06fe:	4b02      	ldr	r3, [pc, #8]	; (80a0708 <hal_i2c_is_enabled+0xc>)
 80a0700:	681b      	ldr	r3, [r3, #0]
 80a0702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0704:	9301      	str	r3, [sp, #4]
 80a0706:	bd08      	pop	{r3, pc}
 80a0708:	080601ac 	.word	0x080601ac

080a070c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a070c:	b508      	push	{r3, lr}
 80a070e:	4b03      	ldr	r3, [pc, #12]	; (80a071c <hal_i2c_init+0x10>)
 80a0710:	681b      	ldr	r3, [r3, #0]
 80a0712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0716:	9301      	str	r3, [sp, #4]
 80a0718:	bd08      	pop	{r3, pc}
 80a071a:	0000      	.short	0x0000
 80a071c:	080601ac 	.word	0x080601ac

080a0720 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0720:	b508      	push	{r3, lr}
 80a0722:	4b02      	ldr	r3, [pc, #8]	; (80a072c <hal_spi_init+0xc>)
 80a0724:	681b      	ldr	r3, [r3, #0]
 80a0726:	69db      	ldr	r3, [r3, #28]
 80a0728:	9301      	str	r3, [sp, #4]
 80a072a:	bd08      	pop	{r3, pc}
 80a072c:	080601b4 	.word	0x080601b4

080a0730 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0730:	b508      	push	{r3, lr}
 80a0732:	4b02      	ldr	r3, [pc, #8]	; (80a073c <hal_spi_is_enabled+0xc>)
 80a0734:	681b      	ldr	r3, [r3, #0]
 80a0736:	6a1b      	ldr	r3, [r3, #32]
 80a0738:	9301      	str	r3, [sp, #4]
 80a073a:	bd08      	pop	{r3, pc}
 80a073c:	080601b4 	.word	0x080601b4

080a0740 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0740:	b508      	push	{r3, lr}
 80a0742:	4b02      	ldr	r3, [pc, #8]	; (80a074c <HAL_USB_USART_Init+0xc>)
 80a0744:	681b      	ldr	r3, [r3, #0]
 80a0746:	681b      	ldr	r3, [r3, #0]
 80a0748:	9301      	str	r3, [sp, #4]
 80a074a:	bd08      	pop	{r3, pc}
 80a074c:	080601d8 	.word	0x080601d8

080a0750 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0750:	b508      	push	{r3, lr}
 80a0752:	4b02      	ldr	r3, [pc, #8]	; (80a075c <HAL_USB_USART_Begin+0xc>)
 80a0754:	681b      	ldr	r3, [r3, #0]
 80a0756:	685b      	ldr	r3, [r3, #4]
 80a0758:	9301      	str	r3, [sp, #4]
 80a075a:	bd08      	pop	{r3, pc}
 80a075c:	080601d8 	.word	0x080601d8

080a0760 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0760:	b508      	push	{r3, lr}
 80a0762:	4b02      	ldr	r3, [pc, #8]	; (80a076c <HAL_USB_USART_Available_Data+0xc>)
 80a0764:	681b      	ldr	r3, [r3, #0]
 80a0766:	691b      	ldr	r3, [r3, #16]
 80a0768:	9301      	str	r3, [sp, #4]
 80a076a:	bd08      	pop	{r3, pc}
 80a076c:	080601d8 	.word	0x080601d8

080a0770 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0770:	b508      	push	{r3, lr}
 80a0772:	4b02      	ldr	r3, [pc, #8]	; (80a077c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0774:	681b      	ldr	r3, [r3, #0]
 80a0776:	695b      	ldr	r3, [r3, #20]
 80a0778:	9301      	str	r3, [sp, #4]
 80a077a:	bd08      	pop	{r3, pc}
 80a077c:	080601d8 	.word	0x080601d8

080a0780 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0780:	b508      	push	{r3, lr}
 80a0782:	4b02      	ldr	r3, [pc, #8]	; (80a078c <HAL_USB_USART_Receive_Data+0xc>)
 80a0784:	681b      	ldr	r3, [r3, #0]
 80a0786:	699b      	ldr	r3, [r3, #24]
 80a0788:	9301      	str	r3, [sp, #4]
 80a078a:	bd08      	pop	{r3, pc}
 80a078c:	080601d8 	.word	0x080601d8

080a0790 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0790:	b508      	push	{r3, lr}
 80a0792:	4b02      	ldr	r3, [pc, #8]	; (80a079c <HAL_USB_USART_Send_Data+0xc>)
 80a0794:	681b      	ldr	r3, [r3, #0]
 80a0796:	69db      	ldr	r3, [r3, #28]
 80a0798:	9301      	str	r3, [sp, #4]
 80a079a:	bd08      	pop	{r3, pc}
 80a079c:	080601d8 	.word	0x080601d8

080a07a0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a07a0:	b508      	push	{r3, lr}
 80a07a2:	4b02      	ldr	r3, [pc, #8]	; (80a07ac <HAL_USB_USART_Flush_Data+0xc>)
 80a07a4:	681b      	ldr	r3, [r3, #0]
 80a07a6:	6a1b      	ldr	r3, [r3, #32]
 80a07a8:	9301      	str	r3, [sp, #4]
 80a07aa:	bd08      	pop	{r3, pc}
 80a07ac:	080601d8 	.word	0x080601d8

080a07b0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a07b0:	b508      	push	{r3, lr}
 80a07b2:	4b02      	ldr	r3, [pc, #8]	; (80a07bc <inet_gethostbyname+0xc>)
 80a07b4:	681b      	ldr	r3, [r3, #0]
 80a07b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a07b8:	9301      	str	r3, [sp, #4]
 80a07ba:	bd08      	pop	{r3, pc}
 80a07bc:	080601c0 	.word	0x080601c0

080a07c0 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a07c0:	b508      	push	{r3, lr}
 80a07c2:	4b02      	ldr	r3, [pc, #8]	; (80a07cc <system_mode+0xc>)
 80a07c4:	681b      	ldr	r3, [r3, #0]
 80a07c6:	681b      	ldr	r3, [r3, #0]
 80a07c8:	9301      	str	r3, [sp, #4]
 80a07ca:	bd08      	pop	{r3, pc}
 80a07cc:	080601a4 	.word	0x080601a4

080a07d0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a07d0:	b508      	push	{r3, lr}
 80a07d2:	4b02      	ldr	r3, [pc, #8]	; (80a07dc <set_system_mode+0xc>)
 80a07d4:	681b      	ldr	r3, [r3, #0]
 80a07d6:	685b      	ldr	r3, [r3, #4]
 80a07d8:	9301      	str	r3, [sp, #4]
 80a07da:	bd08      	pop	{r3, pc}
 80a07dc:	080601a4 	.word	0x080601a4

080a07e0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a07e0:	b508      	push	{r3, lr}
 80a07e2:	4b02      	ldr	r3, [pc, #8]	; (80a07ec <system_delay_ms+0xc>)
 80a07e4:	681b      	ldr	r3, [r3, #0]
 80a07e6:	695b      	ldr	r3, [r3, #20]
 80a07e8:	9301      	str	r3, [sp, #4]
 80a07ea:	bd08      	pop	{r3, pc}
 80a07ec:	080601a4 	.word	0x080601a4

080a07f0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a07f0:	b508      	push	{r3, lr}
 80a07f2:	4b02      	ldr	r3, [pc, #8]	; (80a07fc <application_thread_current+0xc>)
 80a07f4:	681b      	ldr	r3, [r3, #0]
 80a07f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a07f8:	9301      	str	r3, [sp, #4]
 80a07fa:	bd08      	pop	{r3, pc}
 80a07fc:	080601a4 	.word	0x080601a4

080a0800 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0800:	b508      	push	{r3, lr}
 80a0802:	4b02      	ldr	r3, [pc, #8]	; (80a080c <application_thread_invoke+0xc>)
 80a0804:	681b      	ldr	r3, [r3, #0]
 80a0806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0808:	9301      	str	r3, [sp, #4]
 80a080a:	bd08      	pop	{r3, pc}
 80a080c:	080601a4 	.word	0x080601a4

080a0810 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a0810:	b508      	push	{r3, lr}
 80a0812:	4b02      	ldr	r3, [pc, #8]	; (80a081c <system_thread_get_state+0xc>)
 80a0814:	681b      	ldr	r3, [r3, #0]
 80a0816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0818:	9301      	str	r3, [sp, #4]
 80a081a:	bd08      	pop	{r3, pc}
 80a081c:	080601a4 	.word	0x080601a4

080a0820 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0820:	b508      	push	{r3, lr}
 80a0822:	4b03      	ldr	r3, [pc, #12]	; (80a0830 <system_ctrl_set_app_request_handler+0x10>)
 80a0824:	681b      	ldr	r3, [r3, #0]
 80a0826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a082a:	9301      	str	r3, [sp, #4]
 80a082c:	bd08      	pop	{r3, pc}
 80a082e:	0000      	.short	0x0000
 80a0830:	080601a4 	.word	0x080601a4

080a0834 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0834:	b508      	push	{r3, lr}
 80a0836:	4b03      	ldr	r3, [pc, #12]	; (80a0844 <system_ctrl_set_result+0x10>)
 80a0838:	681b      	ldr	r3, [r3, #0]
 80a083a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a083e:	9301      	str	r3, [sp, #4]
 80a0840:	bd08      	pop	{r3, pc}
 80a0842:	0000      	.short	0x0000
 80a0844:	080601a4 	.word	0x080601a4

080a0848 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0848:	b508      	push	{r3, lr}
 80a084a:	4b02      	ldr	r3, [pc, #8]	; (80a0854 <network_connect+0xc>)
 80a084c:	681b      	ldr	r3, [r3, #0]
 80a084e:	685b      	ldr	r3, [r3, #4]
 80a0850:	9301      	str	r3, [sp, #4]
 80a0852:	bd08      	pop	{r3, pc}
 80a0854:	080601c8 	.word	0x080601c8

080a0858 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0858:	b508      	push	{r3, lr}
 80a085a:	4b02      	ldr	r3, [pc, #8]	; (80a0864 <network_connecting+0xc>)
 80a085c:	681b      	ldr	r3, [r3, #0]
 80a085e:	689b      	ldr	r3, [r3, #8]
 80a0860:	9301      	str	r3, [sp, #4]
 80a0862:	bd08      	pop	{r3, pc}
 80a0864:	080601c8 	.word	0x080601c8

080a0868 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0868:	b508      	push	{r3, lr}
 80a086a:	4b02      	ldr	r3, [pc, #8]	; (80a0874 <network_disconnect+0xc>)
 80a086c:	681b      	ldr	r3, [r3, #0]
 80a086e:	68db      	ldr	r3, [r3, #12]
 80a0870:	9301      	str	r3, [sp, #4]
 80a0872:	bd08      	pop	{r3, pc}
 80a0874:	080601c8 	.word	0x080601c8

080a0878 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0878:	b508      	push	{r3, lr}
 80a087a:	4b02      	ldr	r3, [pc, #8]	; (80a0884 <network_ready+0xc>)
 80a087c:	681b      	ldr	r3, [r3, #0]
 80a087e:	691b      	ldr	r3, [r3, #16]
 80a0880:	9301      	str	r3, [sp, #4]
 80a0882:	bd08      	pop	{r3, pc}
 80a0884:	080601c8 	.word	0x080601c8

080a0888 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0888:	b508      	push	{r3, lr}
 80a088a:	4b02      	ldr	r3, [pc, #8]	; (80a0894 <network_on+0xc>)
 80a088c:	681b      	ldr	r3, [r3, #0]
 80a088e:	695b      	ldr	r3, [r3, #20]
 80a0890:	9301      	str	r3, [sp, #4]
 80a0892:	bd08      	pop	{r3, pc}
 80a0894:	080601c8 	.word	0x080601c8

080a0898 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0898:	b508      	push	{r3, lr}
 80a089a:	4b02      	ldr	r3, [pc, #8]	; (80a08a4 <network_off+0xc>)
 80a089c:	681b      	ldr	r3, [r3, #0]
 80a089e:	699b      	ldr	r3, [r3, #24]
 80a08a0:	9301      	str	r3, [sp, #4]
 80a08a2:	bd08      	pop	{r3, pc}
 80a08a4:	080601c8 	.word	0x080601c8

080a08a8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a08a8:	b508      	push	{r3, lr}
 80a08aa:	4b02      	ldr	r3, [pc, #8]	; (80a08b4 <network_listen+0xc>)
 80a08ac:	681b      	ldr	r3, [r3, #0]
 80a08ae:	69db      	ldr	r3, [r3, #28]
 80a08b0:	9301      	str	r3, [sp, #4]
 80a08b2:	bd08      	pop	{r3, pc}
 80a08b4:	080601c8 	.word	0x080601c8

080a08b8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a08b8:	b508      	push	{r3, lr}
 80a08ba:	4b02      	ldr	r3, [pc, #8]	; (80a08c4 <network_listening+0xc>)
 80a08bc:	681b      	ldr	r3, [r3, #0]
 80a08be:	6a1b      	ldr	r3, [r3, #32]
 80a08c0:	9301      	str	r3, [sp, #4]
 80a08c2:	bd08      	pop	{r3, pc}
 80a08c4:	080601c8 	.word	0x080601c8

080a08c8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a08c8:	b508      	push	{r3, lr}
 80a08ca:	4b02      	ldr	r3, [pc, #8]	; (80a08d4 <network_set_listen_timeout+0xc>)
 80a08cc:	681b      	ldr	r3, [r3, #0]
 80a08ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a08d0:	9301      	str	r3, [sp, #4]
 80a08d2:	bd08      	pop	{r3, pc}
 80a08d4:	080601c8 	.word	0x080601c8

080a08d8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a08d8:	b508      	push	{r3, lr}
 80a08da:	4b02      	ldr	r3, [pc, #8]	; (80a08e4 <network_get_listen_timeout+0xc>)
 80a08dc:	681b      	ldr	r3, [r3, #0]
 80a08de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a08e0:	9301      	str	r3, [sp, #4]
 80a08e2:	bd08      	pop	{r3, pc}
 80a08e4:	080601c8 	.word	0x080601c8

080a08e8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a08e8:	b508      	push	{r3, lr}
 80a08ea:	4b02      	ldr	r3, [pc, #8]	; (80a08f4 <network_is_on+0xc>)
 80a08ec:	681b      	ldr	r3, [r3, #0]
 80a08ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a08f0:	9301      	str	r3, [sp, #4]
 80a08f2:	bd08      	pop	{r3, pc}
 80a08f4:	080601c8 	.word	0x080601c8

080a08f8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a08f8:	b508      	push	{r3, lr}
 80a08fa:	4b02      	ldr	r3, [pc, #8]	; (80a0904 <network_is_off+0xc>)
 80a08fc:	681b      	ldr	r3, [r3, #0]
 80a08fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0900:	9301      	str	r3, [sp, #4]
 80a0902:	bd08      	pop	{r3, pc}
 80a0904:	080601c8 	.word	0x080601c8

080a0908 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a0908:	b508      	push	{r3, lr}
 80a090a:	4b02      	ldr	r3, [pc, #8]	; (80a0914 <spark_function+0xc>)
 80a090c:	681b      	ldr	r3, [r3, #0]
 80a090e:	685b      	ldr	r3, [r3, #4]
 80a0910:	9301      	str	r3, [sp, #4]
 80a0912:	bd08      	pop	{r3, pc}
 80a0914:	080601cc 	.word	0x080601cc

080a0918 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a0918:	b508      	push	{r3, lr}
 80a091a:	4b02      	ldr	r3, [pc, #8]	; (80a0924 <spark_process+0xc>)
 80a091c:	681b      	ldr	r3, [r3, #0]
 80a091e:	689b      	ldr	r3, [r3, #8]
 80a0920:	9301      	str	r3, [sp, #4]
 80a0922:	bd08      	pop	{r3, pc}
 80a0924:	080601cc 	.word	0x080601cc

080a0928 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0928:	b508      	push	{r3, lr}
 80a092a:	4b02      	ldr	r3, [pc, #8]	; (80a0934 <spark_cloud_flag_connected+0xc>)
 80a092c:	681b      	ldr	r3, [r3, #0]
 80a092e:	695b      	ldr	r3, [r3, #20]
 80a0930:	9301      	str	r3, [sp, #4]
 80a0932:	bd08      	pop	{r3, pc}
 80a0934:	080601cc 	.word	0x080601cc

080a0938 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0938:	b508      	push	{r3, lr}
 80a093a:	4b02      	ldr	r3, [pc, #8]	; (80a0944 <spark_send_event+0xc>)
 80a093c:	681b      	ldr	r3, [r3, #0]
 80a093e:	6a1b      	ldr	r3, [r3, #32]
 80a0940:	9301      	str	r3, [sp, #4]
 80a0942:	bd08      	pop	{r3, pc}
 80a0944:	080601cc 	.word	0x080601cc

080a0948 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a0948:	b508      	push	{r3, lr}
 80a094a:	4b02      	ldr	r3, [pc, #8]	; (80a0954 <spark_sync_time_pending+0xc>)
 80a094c:	681b      	ldr	r3, [r3, #0]
 80a094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0950:	9301      	str	r3, [sp, #4]
 80a0952:	bd08      	pop	{r3, pc}
 80a0954:	080601cc 	.word	0x080601cc

080a0958 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0958:	b508      	push	{r3, lr}
 80a095a:	4b02      	ldr	r3, [pc, #8]	; (80a0964 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a095c:	681b      	ldr	r3, [r3, #0]
 80a095e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0960:	9301      	str	r3, [sp, #4]
 80a0962:	bd08      	pop	{r3, pc}
 80a0964:	080601cc 	.word	0x080601cc

080a0968 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0968:	b508      	push	{r3, lr}
 80a096a:	4b02      	ldr	r3, [pc, #8]	; (80a0974 <malloc+0xc>)
 80a096c:	681b      	ldr	r3, [r3, #0]
 80a096e:	681b      	ldr	r3, [r3, #0]
 80a0970:	9301      	str	r3, [sp, #4]
 80a0972:	bd08      	pop	{r3, pc}
 80a0974:	080601a0 	.word	0x080601a0

080a0978 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0978:	b508      	push	{r3, lr}
 80a097a:	4b02      	ldr	r3, [pc, #8]	; (80a0984 <free+0xc>)
 80a097c:	681b      	ldr	r3, [r3, #0]
 80a097e:	685b      	ldr	r3, [r3, #4]
 80a0980:	9301      	str	r3, [sp, #4]
 80a0982:	bd08      	pop	{r3, pc}
 80a0984:	080601a0 	.word	0x080601a0

080a0988 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0988:	b508      	push	{r3, lr}
 80a098a:	4b02      	ldr	r3, [pc, #8]	; (80a0994 <realloc+0xc>)
 80a098c:	681b      	ldr	r3, [r3, #0]
 80a098e:	689b      	ldr	r3, [r3, #8]
 80a0990:	9301      	str	r3, [sp, #4]
 80a0992:	bd08      	pop	{r3, pc}
 80a0994:	080601a0 	.word	0x080601a0

080a0998 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0998:	b508      	push	{r3, lr}
 80a099a:	4b02      	ldr	r3, [pc, #8]	; (80a09a4 <abort+0xc>)
 80a099c:	681b      	ldr	r3, [r3, #0]
 80a099e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a09a0:	9301      	str	r3, [sp, #4]
 80a09a2:	bd08      	pop	{r3, pc}
 80a09a4:	080601a0 	.word	0x080601a0

080a09a8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a09a8:	b508      	push	{r3, lr}
 80a09aa:	4b02      	ldr	r3, [pc, #8]	; (80a09b4 <_malloc_r+0xc>)
 80a09ac:	681b      	ldr	r3, [r3, #0]
 80a09ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a09b0:	9301      	str	r3, [sp, #4]
 80a09b2:	bd08      	pop	{r3, pc}
 80a09b4:	080601a0 	.word	0x080601a0

080a09b8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a09b8:	b508      	push	{r3, lr}
 80a09ba:	4b02      	ldr	r3, [pc, #8]	; (80a09c4 <__errno+0xc>)
 80a09bc:	681b      	ldr	r3, [r3, #0]
 80a09be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a09c0:	9301      	str	r3, [sp, #4]
 80a09c2:	bd08      	pop	{r3, pc}
 80a09c4:	080601a0 	.word	0x080601a0

080a09c8 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a09c8:	b508      	push	{r3, lr}
 80a09ca:	4b02      	ldr	r3, [pc, #8]	; (80a09d4 <__assert_func+0xc>)
 80a09cc:	681b      	ldr	r3, [r3, #0]
 80a09ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a09d0:	9301      	str	r3, [sp, #4]
 80a09d2:	bd08      	pop	{r3, pc}
 80a09d4:	080601a0 	.word	0x080601a0

080a09d8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a09d8:	b508      	push	{r3, lr}
 80a09da:	4b02      	ldr	r3, [pc, #8]	; (80a09e4 <newlib_impure_ptr_callback+0xc>)
 80a09dc:	681b      	ldr	r3, [r3, #0]
 80a09de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a09e0:	9301      	str	r3, [sp, #4]
 80a09e2:	bd08      	pop	{r3, pc}
 80a09e4:	080601a0 	.word	0x080601a0

080a09e8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a09e8:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a09ea:	2600      	movs	r6, #0
 80a09ec:	4604      	mov	r4, r0
 80a09ee:	460d      	mov	r5, r1
 80a09f0:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a09f4:	f7ff fde2 	bl	80a05bc <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a09f8:	4628      	mov	r0, r5
    _spi = spi;
 80a09fa:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a09fc:	f7ff fe90 	bl	80a0720 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0a00:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0a02:	6066      	str	r6, [r4, #4]
}
 80a0a04:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0a08 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0a08:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0a0a:	2000      	movs	r0, #0
 80a0a0c:	4b04      	ldr	r3, [pc, #16]	; (80a0a20 <_GLOBAL__sub_I_System+0x18>)
 80a0a0e:	601a      	str	r2, [r3, #0]
 80a0a10:	4b04      	ldr	r3, [pc, #16]	; (80a0a24 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a0a12:	4a05      	ldr	r2, [pc, #20]	; (80a0a28 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a0a14:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a0a18:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0a1a:	f7ff bed9 	b.w	80a07d0 <set_system_mode>
 80a0a1e:	bf00      	nop
 80a0a20:	200000b4 	.word	0x200000b4
 80a0a24:	200000a8 	.word	0x200000a8
 80a0a28:	ffff0000 	.word	0xffff0000

080a0a2c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0a2c:	b510      	push	{r4, lr}
 80a0a2e:	4604      	mov	r4, r0
{
	free(buffer);
 80a0a30:	6800      	ldr	r0, [r0, #0]
 80a0a32:	f7ff ffa1 	bl	80a0978 <free>
}
 80a0a36:	4620      	mov	r0, r4
 80a0a38:	bd10      	pop	{r4, pc}

080a0a3a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0a3a:	b510      	push	{r4, lr}
 80a0a3c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0a3e:	6800      	ldr	r0, [r0, #0]
 80a0a40:	b108      	cbz	r0, 80a0a46 <_ZN6String10invalidateEv+0xc>
 80a0a42:	f7ff ff99 	bl	80a0978 <free>
	buffer = NULL;
 80a0a46:	2300      	movs	r3, #0
	capacity = len = 0;
 80a0a48:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a0a4c:	6023      	str	r3, [r4, #0]
}
 80a0a4e:	bd10      	pop	{r4, pc}

080a0a50 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0a50:	b538      	push	{r3, r4, r5, lr}
 80a0a52:	4604      	mov	r4, r0
 80a0a54:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0a56:	6800      	ldr	r0, [r0, #0]
 80a0a58:	3101      	adds	r1, #1
 80a0a5a:	f7ff ff95 	bl	80a0988 <realloc>
	if (newbuffer) {
 80a0a5e:	b110      	cbz	r0, 80a0a66 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0a60:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a0a64:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0a66:	bd38      	pop	{r3, r4, r5, pc}

080a0a68 <_ZN6String7reserveEj>:
{
 80a0a68:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0a6a:	6803      	ldr	r3, [r0, #0]
{
 80a0a6c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0a6e:	b123      	cbz	r3, 80a0a7a <_ZN6String7reserveEj+0x12>
 80a0a70:	6843      	ldr	r3, [r0, #4]
 80a0a72:	428b      	cmp	r3, r1
 80a0a74:	d301      	bcc.n	80a0a7a <_ZN6String7reserveEj+0x12>
 80a0a76:	2001      	movs	r0, #1
}
 80a0a78:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a0a7a:	4620      	mov	r0, r4
 80a0a7c:	f7ff ffe8 	bl	80a0a50 <_ZN6String12changeBufferEj>
 80a0a80:	2800      	cmp	r0, #0
 80a0a82:	d0f9      	beq.n	80a0a78 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a0a84:	68a3      	ldr	r3, [r4, #8]
 80a0a86:	2b00      	cmp	r3, #0
 80a0a88:	d1f5      	bne.n	80a0a76 <_ZN6String7reserveEj+0xe>
 80a0a8a:	6822      	ldr	r2, [r4, #0]
 80a0a8c:	7013      	strb	r3, [r2, #0]
 80a0a8e:	e7f2      	b.n	80a0a76 <_ZN6String7reserveEj+0xe>

080a0a90 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0a90:	b570      	push	{r4, r5, r6, lr}
 80a0a92:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0a94:	4611      	mov	r1, r2
{
 80a0a96:	4604      	mov	r4, r0
 80a0a98:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0a9a:	f7ff ffe5 	bl	80a0a68 <_ZN6String7reserveEj>
 80a0a9e:	b920      	cbnz	r0, 80a0aaa <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a0aa0:	4620      	mov	r0, r4
 80a0aa2:	f7ff ffca 	bl	80a0a3a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a0aa6:	4620      	mov	r0, r4
 80a0aa8:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a0aaa:	462a      	mov	r2, r5
 80a0aac:	4631      	mov	r1, r6
 80a0aae:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a0ab0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0ab2:	f001 fe9f 	bl	80a27f4 <memcpy>
	buffer[len] = 0;
 80a0ab6:	2100      	movs	r1, #0
 80a0ab8:	6822      	ldr	r2, [r4, #0]
 80a0aba:	68a3      	ldr	r3, [r4, #8]
 80a0abc:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a0abe:	e7f2      	b.n	80a0aa6 <_ZN6String4copyEPKcj+0x16>

080a0ac0 <_ZN6StringC1EPK19__FlashStringHelper>:
String::String(const __FlashStringHelper *pstr)
 80a0ac0:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a0ac2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 80a0ac4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0ac6:	460d      	mov	r5, r1
	capacity = 0;
 80a0ac8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a0acc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0ace:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a0ad0:	b139      	cbz	r1, 80a0ae2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 80a0ad2:	4608      	mov	r0, r1
 80a0ad4:	f001 feed 	bl	80a28b2 <strlen>
 80a0ad8:	4629      	mov	r1, r5
 80a0ada:	4602      	mov	r2, r0
 80a0adc:	4620      	mov	r0, r4
 80a0ade:	f7ff ffd7 	bl	80a0a90 <_ZN6String4copyEPKcj>
}
 80a0ae2:	4620      	mov	r0, r4
 80a0ae4:	bd38      	pop	{r3, r4, r5, pc}

080a0ae6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a0ae6:	4288      	cmp	r0, r1
{
 80a0ae8:	b510      	push	{r4, lr}
 80a0aea:	460b      	mov	r3, r1
 80a0aec:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a0aee:	d004      	beq.n	80a0afa <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a0af0:	6809      	ldr	r1, [r1, #0]
 80a0af2:	b121      	cbz	r1, 80a0afe <_ZN6StringaSERKS_+0x18>
 80a0af4:	689a      	ldr	r2, [r3, #8]
 80a0af6:	f7ff ffcb 	bl	80a0a90 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a0afa:	4620      	mov	r0, r4
 80a0afc:	bd10      	pop	{r4, pc}
	else invalidate();
 80a0afe:	f7ff ff9c 	bl	80a0a3a <_ZN6String10invalidateEv>
 80a0b02:	e7fa      	b.n	80a0afa <_ZN6StringaSERKS_+0x14>

080a0b04 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a0b04:	2300      	movs	r3, #0
String::String(const String &value)
 80a0b06:	b510      	push	{r4, lr}
 80a0b08:	4604      	mov	r4, r0
	capacity = 0;
 80a0b0a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a0b0e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0b10:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a0b12:	f7ff ffe8 	bl	80a0ae6 <_ZN6StringaSERKS_>
}
 80a0b16:	4620      	mov	r0, r4
 80a0b18:	bd10      	pop	{r4, pc}

080a0b1a <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a0b1a:	6800      	ldr	r0, [r0, #0]
 80a0b1c:	b108      	cbz	r0, 80a0b22 <_ZNK6String5toIntEv+0x8>
 80a0b1e:	f001 be65 	b.w	80a27ec <atol>
	return 0;
}
 80a0b22:	4770      	bx	lr

080a0b24 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b26:	4606      	mov	r6, r0
 80a0b28:	460d      	mov	r5, r1
  size_t n = 0;
 80a0b2a:	2400      	movs	r4, #0
 80a0b2c:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0b2e:	42bd      	cmp	r5, r7
 80a0b30:	d00c      	beq.n	80a0b4c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0b32:	6833      	ldr	r3, [r6, #0]
 80a0b34:	4630      	mov	r0, r6
 80a0b36:	689b      	ldr	r3, [r3, #8]
 80a0b38:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0b3c:	4798      	blx	r3
     if (chunk>=0)
 80a0b3e:	1e03      	subs	r3, r0, #0
 80a0b40:	db01      	blt.n	80a0b46 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0b42:	441c      	add	r4, r3
  while (size--) {
 80a0b44:	e7f3      	b.n	80a0b2e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0b46:	2c00      	cmp	r4, #0
 80a0b48:	bf08      	it	eq
 80a0b4a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0b4c:	4620      	mov	r0, r4
 80a0b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0b50 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0b50:	b570      	push	{r4, r5, r6, lr}
 80a0b52:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0b54:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0b56:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0b58:	b149      	cbz	r1, 80a0b6e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0b5a:	f001 feaa 	bl	80a28b2 <strlen>
 80a0b5e:	682b      	ldr	r3, [r5, #0]
 80a0b60:	4602      	mov	r2, r0
 80a0b62:	4621      	mov	r1, r4
 80a0b64:	4628      	mov	r0, r5
    }
 80a0b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0b6a:	68db      	ldr	r3, [r3, #12]
 80a0b6c:	4718      	bx	r3
    }
 80a0b6e:	bd70      	pop	{r4, r5, r6, pc}

080a0b70 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a0b70:	b508      	push	{r3, lr}
  return write(str);
 80a0b72:	f7ff ffed 	bl	80a0b50 <_ZN5Print5writeEPKc>
}
 80a0b76:	bd08      	pop	{r3, pc}

080a0b78 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a0b78:	6803      	ldr	r3, [r0, #0]
 80a0b7a:	689b      	ldr	r3, [r3, #8]
 80a0b7c:	4718      	bx	r3

080a0b7e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0b7e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0b80:	210d      	movs	r1, #13
{
 80a0b82:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0b84:	f7ff fff8 	bl	80a0b78 <_ZN5Print5printEc>
  n += print('\n');
 80a0b88:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a0b8a:	4604      	mov	r4, r0
  n += print('\n');
 80a0b8c:	4628      	mov	r0, r5
 80a0b8e:	f7ff fff3 	bl	80a0b78 <_ZN5Print5printEc>
  return n;
}
 80a0b92:	4420      	add	r0, r4
 80a0b94:	bd38      	pop	{r3, r4, r5, pc}

080a0b96 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0b96:	b538      	push	{r3, r4, r5, lr}
 80a0b98:	4605      	mov	r5, r0
  return write(str);
 80a0b9a:	f7ff ffd9 	bl	80a0b50 <_ZN5Print5writeEPKc>
 80a0b9e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a0ba0:	4628      	mov	r0, r5
 80a0ba2:	f7ff ffec 	bl	80a0b7e <_ZN5Print7printlnEv>
  return n;
}
 80a0ba6:	4420      	add	r0, r4
 80a0ba8:	bd38      	pop	{r3, r4, r5, pc}

080a0baa <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0baa:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0bac:	2a01      	cmp	r2, #1
 80a0bae:	bf98      	it	ls
 80a0bb0:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0bb2:	b530      	push	{r4, r5, lr}
 80a0bb4:	b08b      	sub	sp, #44	; 0x2c
 80a0bb6:	460c      	mov	r4, r1
  *str = '\0';
 80a0bb8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0bbc:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0bbe:	4625      	mov	r5, r4
 80a0bc0:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0bc4:	fb04 5312 	mls	r3, r4, r2, r5
 80a0bc8:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0bca:	2b09      	cmp	r3, #9
 80a0bcc:	bf94      	ite	ls
 80a0bce:	3330      	addls	r3, #48	; 0x30
 80a0bd0:	3337      	addhi	r3, #55	; 0x37
 80a0bd2:	b2db      	uxtb	r3, r3
  } while(n);
 80a0bd4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0bd6:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0bda:	d9f0      	bls.n	80a0bbe <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0bdc:	f7ff ffb8 	bl	80a0b50 <_ZN5Print5writeEPKc>
}
 80a0be0:	b00b      	add	sp, #44	; 0x2c
 80a0be2:	bd30      	pop	{r4, r5, pc}

080a0be4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0be4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0be8:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0bea:	4619      	mov	r1, r3
 80a0bec:	4610      	mov	r0, r2
{
 80a0bee:	4692      	mov	sl, r2
 80a0bf0:	461f      	mov	r7, r3
 80a0bf2:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a0bf6:	f001 fccf 	bl	80a2598 <__aeabi_dcmpun>
 80a0bfa:	b140      	cbz	r0, 80a0c0e <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a0bfc:	4951      	ldr	r1, [pc, #324]	; (80a0d44 <_ZN5Print10printFloatEdh+0x160>)
 80a0bfe:	4628      	mov	r0, r5
 80a0c00:	f7ff ffa6 	bl	80a0b50 <_ZN5Print5writeEPKc>
 80a0c04:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a0c06:	4620      	mov	r0, r4
 80a0c08:	b003      	add	sp, #12
 80a0c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a0c0e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a0c12:	f04f 32ff 	mov.w	r2, #4294967295
 80a0c16:	4650      	mov	r0, sl
 80a0c18:	4621      	mov	r1, r4
 80a0c1a:	4b4b      	ldr	r3, [pc, #300]	; (80a0d48 <_ZN5Print10printFloatEdh+0x164>)
 80a0c1c:	f001 fcbc 	bl	80a2598 <__aeabi_dcmpun>
 80a0c20:	b948      	cbnz	r0, 80a0c36 <_ZN5Print10printFloatEdh+0x52>
 80a0c22:	f04f 32ff 	mov.w	r2, #4294967295
 80a0c26:	4650      	mov	r0, sl
 80a0c28:	4621      	mov	r1, r4
 80a0c2a:	4b47      	ldr	r3, [pc, #284]	; (80a0d48 <_ZN5Print10printFloatEdh+0x164>)
 80a0c2c:	f001 fc96 	bl	80a255c <__aeabi_dcmple>
 80a0c30:	b908      	cbnz	r0, 80a0c36 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a0c32:	4946      	ldr	r1, [pc, #280]	; (80a0d4c <_ZN5Print10printFloatEdh+0x168>)
 80a0c34:	e7e3      	b.n	80a0bfe <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a0c36:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0c3a:	4650      	mov	r0, sl
 80a0c3c:	4639      	mov	r1, r7
 80a0c3e:	4b44      	ldr	r3, [pc, #272]	; (80a0d50 <_ZN5Print10printFloatEdh+0x16c>)
 80a0c40:	f001 fca0 	bl	80a2584 <__aeabi_dcmpgt>
 80a0c44:	b108      	cbz	r0, 80a0c4a <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a0c46:	4943      	ldr	r1, [pc, #268]	; (80a0d54 <_ZN5Print10printFloatEdh+0x170>)
 80a0c48:	e7d9      	b.n	80a0bfe <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a0c4a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0c4e:	4650      	mov	r0, sl
 80a0c50:	4639      	mov	r1, r7
 80a0c52:	4b41      	ldr	r3, [pc, #260]	; (80a0d58 <_ZN5Print10printFloatEdh+0x174>)
 80a0c54:	f001 fc78 	bl	80a2548 <__aeabi_dcmplt>
 80a0c58:	2800      	cmp	r0, #0
 80a0c5a:	d1f4      	bne.n	80a0c46 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a0c5c:	2200      	movs	r2, #0
 80a0c5e:	2300      	movs	r3, #0
 80a0c60:	4650      	mov	r0, sl
 80a0c62:	4639      	mov	r1, r7
 80a0c64:	f001 fc70 	bl	80a2548 <__aeabi_dcmplt>
 80a0c68:	4604      	mov	r4, r0
 80a0c6a:	b130      	cbz	r0, 80a0c7a <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a0c6c:	212d      	movs	r1, #45	; 0x2d
 80a0c6e:	4628      	mov	r0, r5
 80a0c70:	f7ff ff82 	bl	80a0b78 <_ZN5Print5printEc>
 80a0c74:	4604      	mov	r4, r0
     number = -number;
 80a0c76:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a0c7a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a0c7e:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a0c80:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a0c84:	4935      	ldr	r1, [pc, #212]	; (80a0d5c <_ZN5Print10printFloatEdh+0x178>)
    rounding /= 10.0;
 80a0c86:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a0d60 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a0c8a:	fa5f f38b 	uxtb.w	r3, fp
 80a0c8e:	429e      	cmp	r6, r3
 80a0c90:	d906      	bls.n	80a0ca0 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a0c92:	4642      	mov	r2, r8
 80a0c94:	464b      	mov	r3, r9
 80a0c96:	f001 fb0f 	bl	80a22b8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a0c9a:	f10b 0b01 	add.w	fp, fp, #1
 80a0c9e:	e7f4      	b.n	80a0c8a <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a0ca0:	463b      	mov	r3, r7
 80a0ca2:	4652      	mov	r2, sl
 80a0ca4:	f001 f828 	bl	80a1cf8 <__adddf3>
 80a0ca8:	4689      	mov	r9, r1
 80a0caa:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a0cac:	f001 fcb2 	bl	80a2614 <__aeabi_d2uiz>
 80a0cb0:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a0cb2:	f001 f95d 	bl	80a1f70 <__aeabi_ui2d>
 80a0cb6:	4602      	mov	r2, r0
 80a0cb8:	460b      	mov	r3, r1
 80a0cba:	4640      	mov	r0, r8
 80a0cbc:	4649      	mov	r1, r9
 80a0cbe:	f001 f819 	bl	80a1cf4 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0cc2:	220a      	movs	r2, #10
 80a0cc4:	4680      	mov	r8, r0
 80a0cc6:	4689      	mov	r9, r1
 80a0cc8:	4628      	mov	r0, r5
 80a0cca:	4639      	mov	r1, r7
 80a0ccc:	f7ff ff6d 	bl	80a0baa <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a0cd0:	4404      	add	r4, r0
  if (digits > 0) {
 80a0cd2:	2e00      	cmp	r6, #0
 80a0cd4:	d097      	beq.n	80a0c06 <_ZN5Print10printFloatEdh+0x22>
  return write(str);
 80a0cd6:	4628      	mov	r0, r5
 80a0cd8:	4922      	ldr	r1, [pc, #136]	; (80a0d64 <_ZN5Print10printFloatEdh+0x180>)
 80a0cda:	f7ff ff39 	bl	80a0b50 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 80a0cde:	f04f 0a00 	mov.w	sl, #0
 80a0ce2:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a0d60 <_ZN5Print10printFloatEdh+0x17c>
    n += print(".");
 80a0ce6:	4404      	add	r4, r0
  while (digits-- > 0)
 80a0ce8:	2e00      	cmp	r6, #0
 80a0cea:	d08c      	beq.n	80a0c06 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a0cec:	4652      	mov	r2, sl
 80a0cee:	465b      	mov	r3, fp
 80a0cf0:	4640      	mov	r0, r8
 80a0cf2:	4649      	mov	r1, r9
 80a0cf4:	f001 f9b6 	bl	80a2064 <__aeabi_dmul>
 80a0cf8:	4680      	mov	r8, r0
 80a0cfa:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a0cfc:	f001 fc62 	bl	80a25c4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a0d00:	1e07      	subs	r7, r0, #0
 80a0d02:	da1b      	bge.n	80a0d3c <_ZN5Print10printFloatEdh+0x158>
            t = print('-');
 80a0d04:	212d      	movs	r1, #45	; 0x2d
 80a0d06:	4628      	mov	r0, r5
 80a0d08:	f7ff ff36 	bl	80a0b78 <_ZN5Print5printEc>
 80a0d0c:	4603      	mov	r3, r0
            val = -n;
 80a0d0e:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a0d10:	220a      	movs	r2, #10
 80a0d12:	4628      	mov	r0, r5
 80a0d14:	9301      	str	r3, [sp, #4]
 80a0d16:	f7ff ff48 	bl	80a0baa <_ZN5Print11printNumberEmh>
 80a0d1a:	9b01      	ldr	r3, [sp, #4]
 80a0d1c:	3e01      	subs	r6, #1
 80a0d1e:	4403      	add	r3, r0
    remainder -= toPrint;
 80a0d20:	4638      	mov	r0, r7
    n += print(toPrint);
 80a0d22:	441c      	add	r4, r3
    remainder -= toPrint;
 80a0d24:	f001 f934 	bl	80a1f90 <__aeabi_i2d>
 80a0d28:	4602      	mov	r2, r0
 80a0d2a:	460b      	mov	r3, r1
 80a0d2c:	4640      	mov	r0, r8
 80a0d2e:	4649      	mov	r1, r9
 80a0d30:	f000 ffe0 	bl	80a1cf4 <__aeabi_dsub>
 80a0d34:	b2f6      	uxtb	r6, r6
 80a0d36:	4680      	mov	r8, r0
 80a0d38:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a0d3a:	e7d5      	b.n	80a0ce8 <_ZN5Print10printFloatEdh+0x104>
            val = n;
 80a0d3c:	4639      	mov	r1, r7
        size_t t = 0;
 80a0d3e:	2300      	movs	r3, #0
 80a0d40:	e7e6      	b.n	80a0d10 <_ZN5Print10printFloatEdh+0x12c>
 80a0d42:	bf00      	nop
 80a0d44:	080a2b30 	.word	0x080a2b30
 80a0d48:	7fefffff 	.word	0x7fefffff
 80a0d4c:	080a2b34 	.word	0x080a2b34
 80a0d50:	41efffff 	.word	0x41efffff
 80a0d54:	080a2b38 	.word	0x080a2b38
 80a0d58:	c1efffff 	.word	0xc1efffff
 80a0d5c:	3fe00000 	.word	0x3fe00000
 80a0d60:	40240000 	.word	0x40240000
 80a0d64:	080a2b3c 	.word	0x080a2b3c

080a0d68 <_ZN5Print5printEfi>:
{
 80a0d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0d6a:	4605      	mov	r5, r0
 80a0d6c:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a0d6e:	4608      	mov	r0, r1
 80a0d70:	f001 f920 	bl	80a1fb4 <__aeabi_f2d>
 80a0d74:	b2e4      	uxtb	r4, r4
 80a0d76:	4602      	mov	r2, r0
 80a0d78:	460b      	mov	r3, r1
 80a0d7a:	4628      	mov	r0, r5
 80a0d7c:	9400      	str	r4, [sp, #0]
 80a0d7e:	f7ff ff31 	bl	80a0be4 <_ZN5Print10printFloatEdh>
}
 80a0d82:	b003      	add	sp, #12
 80a0d84:	bd30      	pop	{r4, r5, pc}

080a0d86 <_ZN5Print5printEdi>:
  return printFloat(n, digits);
 80a0d86:	f89d 1000 	ldrb.w	r1, [sp]
 80a0d8a:	9100      	str	r1, [sp, #0]
 80a0d8c:	f7ff bf2a 	b.w	80a0be4 <_ZN5Print10printFloatEdh>

080a0d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a0d90:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a0d92:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a0d94:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a0d96:	b17c      	cbz	r4, 80a0db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a0d98:	6863      	ldr	r3, [r4, #4]
 80a0d9a:	3b01      	subs	r3, #1
 80a0d9c:	6063      	str	r3, [r4, #4]
 80a0d9e:	b95b      	cbnz	r3, 80a0db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a0da0:	6823      	ldr	r3, [r4, #0]
 80a0da2:	4620      	mov	r0, r4
 80a0da4:	689b      	ldr	r3, [r3, #8]
 80a0da6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0da8:	68a3      	ldr	r3, [r4, #8]
 80a0daa:	3b01      	subs	r3, #1
 80a0dac:	60a3      	str	r3, [r4, #8]
 80a0dae:	b91b      	cbnz	r3, 80a0db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0db0:	6823      	ldr	r3, [r4, #0]
 80a0db2:	4620      	mov	r0, r4
 80a0db4:	68db      	ldr	r3, [r3, #12]
 80a0db6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a0db8:	4628      	mov	r0, r5
 80a0dba:	bd38      	pop	{r3, r4, r5, pc}

080a0dbc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0dbc:	4b01      	ldr	r3, [pc, #4]	; (80a0dc4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0dbe:	4a02      	ldr	r2, [pc, #8]	; (80a0dc8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0dc0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0dc2:	4770      	bx	lr
 80a0dc4:	200000b8 	.word	0x200000b8
 80a0dc8:	080a2b3e 	.word	0x080a2b3e

080a0dcc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a0dcc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a0dce:	2000      	movs	r0, #0
 80a0dd0:	f7ff fdba 	bl	80a0948 <spark_sync_time_pending>
 80a0dd4:	b128      	cbz	r0, 80a0de2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0dd6:	f7ff fda7 	bl	80a0928 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a0dda:	f080 0001 	eor.w	r0, r0, #1
 80a0dde:	b2c0      	uxtb	r0, r0
    }
 80a0de0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a0de2:	2001      	movs	r0, #1
 80a0de4:	e7fc      	b.n	80a0de0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

080a0de6 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a0de6:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a0de8:	2000      	movs	r0, #0
 80a0dea:	f7ff fbd7 	bl	80a059c <hal_rtc_time_is_valid>
    if (rtcstate)
 80a0dee:	4604      	mov	r4, r0
 80a0df0:	b9a0      	cbnz	r0, 80a0e1c <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a0df2:	f7ff fce5 	bl	80a07c0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a0df6:	2801      	cmp	r0, #1
 80a0df8:	d110      	bne.n	80a0e1c <_ZN9TimeClass7isValidEv+0x36>
 80a0dfa:	4620      	mov	r0, r4
 80a0dfc:	f7ff fd08 	bl	80a0810 <system_thread_get_state>
 80a0e00:	b960      	cbnz	r0, 80a0e1c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a0e02:	f7ff ffe3 	bl	80a0dcc <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a0e06:	b910      	cbnz	r0, 80a0e0e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a0e08:	f7ff fd86 	bl	80a0918 <spark_process>
        while (_while() && !_condition()) {
 80a0e0c:	e7f9      	b.n	80a0e02 <_ZN9TimeClass7isValidEv+0x1c>
 80a0e0e:	f7ff ffdd 	bl	80a0dcc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a0e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a0e16:	2000      	movs	r0, #0
 80a0e18:	f7ff bbc0 	b.w	80a059c <hal_rtc_time_is_valid>
}
 80a0e1c:	4620      	mov	r0, r4
 80a0e1e:	bd10      	pop	{r4, pc}

080a0e20 <_ZN9TimeClass3nowEv>:
{
 80a0e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a0e22:	f7ff ffe0 	bl	80a0de6 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a0e26:	2210      	movs	r2, #16
 80a0e28:	2100      	movs	r1, #0
 80a0e2a:	4668      	mov	r0, sp
 80a0e2c:	f001 fcf0 	bl	80a2810 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a0e30:	2100      	movs	r1, #0
 80a0e32:	4668      	mov	r0, sp
 80a0e34:	f7ff fbba 	bl	80a05ac <hal_rtc_get_time>
}
 80a0e38:	9800      	ldr	r0, [sp, #0]
 80a0e3a:	b005      	add	sp, #20
 80a0e3c:	f85d fb04 	ldr.w	pc, [sp], #4

080a0e40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0e40:	4b02      	ldr	r3, [pc, #8]	; (80a0e4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0e42:	681a      	ldr	r2, [r3, #0]
 80a0e44:	4b02      	ldr	r3, [pc, #8]	; (80a0e50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0e46:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0e48:	4770      	bx	lr
 80a0e4a:	bf00      	nop
 80a0e4c:	20000004 	.word	0x20000004
 80a0e50:	200000bc 	.word	0x200000bc

080a0e54 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0e54:	2100      	movs	r1, #0
 80a0e56:	f7ff bcc3 	b.w	80a07e0 <system_delay_ms>

080a0e5a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0e5a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0e5c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0e5e:	4604      	mov	r4, r0
      if (_M_manager)
 80a0e60:	b113      	cbz	r3, 80a0e68 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0e62:	2203      	movs	r2, #3
 80a0e64:	4601      	mov	r1, r0
 80a0e66:	4798      	blx	r3
    }
 80a0e68:	4620      	mov	r0, r4
 80a0e6a:	bd10      	pop	{r4, pc}

080a0e6c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80a0e6c:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0e6e:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a0e70:	460b      	mov	r3, r1
 80a0e72:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0e74:	c803      	ldmia	r0, {r0, r1}
 80a0e76:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0e7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0e7e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0e82:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a0e86:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0e8a:	b002      	add	sp, #8
 80a0e8c:	bd10      	pop	{r4, pc}
	...

080a0e90 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a0e90:	2200      	movs	r2, #0
 80a0e92:	4b01      	ldr	r3, [pc, #4]	; (80a0e98 <_GLOBAL__sub_I_RGB+0x8>)
 80a0e94:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a0e96:	4770      	bx	lr
 80a0e98:	200000c0 	.word	0x200000c0

080a0e9c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a0e9c:	4b01      	ldr	r3, [pc, #4]	; (80a0ea4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a0e9e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a0ea0:	4770      	bx	lr
 80a0ea2:	bf00      	nop
 80a0ea4:	20000008 	.word	0x20000008

080a0ea8 <serialEventRun>:
{
 80a0ea8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0eaa:	4b13      	ldr	r3, [pc, #76]	; (80a0ef8 <serialEventRun+0x50>)
 80a0eac:	b143      	cbz	r3, 80a0ec0 <serialEventRun+0x18>
 80a0eae:	f000 fc37 	bl	80a1720 <_Z16_fetch_usbserialv>
 80a0eb2:	6803      	ldr	r3, [r0, #0]
 80a0eb4:	691b      	ldr	r3, [r3, #16]
 80a0eb6:	4798      	blx	r3
 80a0eb8:	2800      	cmp	r0, #0
 80a0eba:	dd01      	ble.n	80a0ec0 <serialEventRun+0x18>
        serialEvent();
 80a0ebc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a0ec0:	4b0e      	ldr	r3, [pc, #56]	; (80a0efc <serialEventRun+0x54>)
 80a0ec2:	b143      	cbz	r3, 80a0ed6 <serialEventRun+0x2e>
 80a0ec4:	f000 fe9e 	bl	80a1c04 <_Z22__fetch_global_Serial1v>
 80a0ec8:	6803      	ldr	r3, [r0, #0]
 80a0eca:	691b      	ldr	r3, [r3, #16]
 80a0ecc:	4798      	blx	r3
 80a0ece:	2800      	cmp	r0, #0
 80a0ed0:	dd01      	ble.n	80a0ed6 <serialEventRun+0x2e>
        serialEvent1();
 80a0ed2:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a0ed6:	4b0a      	ldr	r3, [pc, #40]	; (80a0f00 <serialEventRun+0x58>)
 80a0ed8:	b10b      	cbz	r3, 80a0ede <serialEventRun+0x36>
 80a0eda:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0ede:	4b09      	ldr	r3, [pc, #36]	; (80a0f04 <serialEventRun+0x5c>)
 80a0ee0:	b143      	cbz	r3, 80a0ef4 <serialEventRun+0x4c>
 80a0ee2:	f000 fc57 	bl	80a1794 <_Z17_fetch_usbserial1v>
 80a0ee6:	6803      	ldr	r3, [r0, #0]
 80a0ee8:	691b      	ldr	r3, [r3, #16]
 80a0eea:	4798      	blx	r3
 80a0eec:	2800      	cmp	r0, #0
 80a0eee:	dd01      	ble.n	80a0ef4 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a0ef0:	f3af 8000 	nop.w
}
 80a0ef4:	bd08      	pop	{r3, pc}
 80a0ef6:	bf00      	nop
	...

080a0f08 <_post_loop>:
{
 80a0f08:	b508      	push	{r3, lr}
	serialEventRun();
 80a0f0a:	f7ff ffcd 	bl	80a0ea8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0f0e:	f7ff fb3d 	bl	80a058c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0f12:	4b01      	ldr	r3, [pc, #4]	; (80a0f18 <_post_loop+0x10>)
 80a0f14:	6018      	str	r0, [r3, #0]
}
 80a0f16:	bd08      	pop	{r3, pc}
 80a0f18:	20000444 	.word	0x20000444

080a0f1c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0f1c:	4805      	ldr	r0, [pc, #20]	; (80a0f34 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a0f1e:	4a06      	ldr	r2, [pc, #24]	; (80a0f38 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a0f20:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0f22:	1a12      	subs	r2, r2, r0
 80a0f24:	4905      	ldr	r1, [pc, #20]	; (80a0f3c <_Z33system_initialize_user_backup_ramv+0x20>)
 80a0f26:	f001 fc65 	bl	80a27f4 <memcpy>
    __backup_sram_signature = signature;
 80a0f2a:	4b05      	ldr	r3, [pc, #20]	; (80a0f40 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a0f2c:	4a05      	ldr	r2, [pc, #20]	; (80a0f44 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a0f2e:	601a      	str	r2, [r3, #0]
}
 80a0f30:	bd08      	pop	{r3, pc}
 80a0f32:	bf00      	nop
 80a0f34:	40024000 	.word	0x40024000
 80a0f38:	40024004 	.word	0x40024004
 80a0f3c:	080a2e60 	.word	0x080a2e60
 80a0f40:	40024000 	.word	0x40024000
 80a0f44:	9a271c1e 	.word	0x9a271c1e

080a0f48 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0f48:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0f4a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0f4c:	461a      	mov	r2, r3
 80a0f4e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0f52:	9300      	str	r3, [sp, #0]
 80a0f54:	f7ff fc6e 	bl	80a0834 <system_ctrl_set_result>
}
 80a0f58:	b003      	add	sp, #12
 80a0f5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0f60 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0f60:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0f62:	8843      	ldrh	r3, [r0, #2]
 80a0f64:	2b0a      	cmp	r3, #10
 80a0f66:	d008      	beq.n	80a0f7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0f68:	2b50      	cmp	r3, #80	; 0x50
 80a0f6a:	d10b      	bne.n	80a0f84 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a0f6c:	4b09      	ldr	r3, [pc, #36]	; (80a0f94 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0f6e:	681b      	ldr	r3, [r3, #0]
 80a0f70:	b14b      	cbz	r3, 80a0f86 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a0f72:	b003      	add	sp, #12
 80a0f74:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a0f78:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a0f7a:	f7ff ffe5 	bl	80a0f48 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a0f7e:	b003      	add	sp, #12
 80a0f80:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0f84:	2300      	movs	r3, #0
 80a0f86:	461a      	mov	r2, r3
 80a0f88:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0f8c:	9300      	str	r3, [sp, #0]
 80a0f8e:	f7ff fc51 	bl	80a0834 <system_ctrl_set_result>
}
 80a0f92:	e7f4      	b.n	80a0f7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a0f94:	200000d4 	.word	0x200000d4

080a0f98 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0f98:	2100      	movs	r1, #0
{
 80a0f9a:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0f9c:	4811      	ldr	r0, [pc, #68]	; (80a0fe4 <module_user_init_hook+0x4c>)
 80a0f9e:	f7ff fd1b 	bl	80a09d8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a0fa2:	4b11      	ldr	r3, [pc, #68]	; (80a0fe8 <module_user_init_hook+0x50>)
 80a0fa4:	681a      	ldr	r2, [r3, #0]
 80a0fa6:	4b11      	ldr	r3, [pc, #68]	; (80a0fec <module_user_init_hook+0x54>)
 80a0fa8:	429a      	cmp	r2, r3
 80a0faa:	bf0c      	ite	eq
 80a0fac:	2201      	moveq	r2, #1
 80a0fae:	2200      	movne	r2, #0
 80a0fb0:	4b0f      	ldr	r3, [pc, #60]	; (80a0ff0 <module_user_init_hook+0x58>)
 80a0fb2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0fb4:	d001      	beq.n	80a0fba <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a0fb6:	f7ff ffb1 	bl	80a0f1c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0fba:	f7ff fad7 	bl	80a056c <HAL_RNG_GetRandomNumber>
 80a0fbe:	4604      	mov	r4, r0
    srand(seed);
 80a0fc0:	f001 fc2e 	bl	80a2820 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0fc4:	4b0b      	ldr	r3, [pc, #44]	; (80a0ff4 <module_user_init_hook+0x5c>)
 80a0fc6:	b113      	cbz	r3, 80a0fce <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a0fc8:	4620      	mov	r0, r4
 80a0fca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0fce:	2100      	movs	r1, #0
 80a0fd0:	4808      	ldr	r0, [pc, #32]	; (80a0ff4 <module_user_init_hook+0x5c>)
 80a0fd2:	f7ff fcc1 	bl	80a0958 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0fda:	2100      	movs	r1, #0
 80a0fdc:	4806      	ldr	r0, [pc, #24]	; (80a0ff8 <module_user_init_hook+0x60>)
 80a0fde:	f7ff bc1f 	b.w	80a0820 <system_ctrl_set_app_request_handler>
 80a0fe2:	bf00      	nop
 80a0fe4:	080a0e9d 	.word	0x080a0e9d
 80a0fe8:	40024000 	.word	0x40024000
 80a0fec:	9a271c1e 	.word	0x9a271c1e
 80a0ff0:	200000d0 	.word	0x200000d0
 80a0ff4:	00000000 	.word	0x00000000
 80a0ff8:	080a0f61 	.word	0x080a0f61

080a0ffc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0ffc:	4770      	bx	lr

080a0ffe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a0ffe:	2000      	movs	r0, #0
 80a1000:	4770      	bx	lr

080a1002 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1002:	b510      	push	{r4, lr}
 80a1004:	4604      	mov	r4, r0
 80a1006:	2110      	movs	r1, #16
 80a1008:	f7ff f849 	bl	80a009e <_ZdlPvj>
 80a100c:	4620      	mov	r0, r4
 80a100e:	bd10      	pop	{r4, pc}

080a1010 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a1010:	b508      	push	{r3, lr}
      { delete this; }
 80a1012:	f7ff fff6 	bl	80a1002 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1016:	bd08      	pop	{r3, pc}

080a1018 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1018:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a101a:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a101c:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a1020:	6002      	str	r2, [r0, #0]
 80a1022:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a1024:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1026:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a1028:	680c      	ldr	r4, [r1, #0]
 80a102a:	8085      	strh	r5, [r0, #4]
 80a102c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a102e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a1030:	bd30      	pop	{r4, r5, pc}

080a1032 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a1032:	b510      	push	{r4, lr}
 80a1034:	4604      	mov	r4, r0
    free((void*)msg_);
 80a1036:	6800      	ldr	r0, [r0, #0]
 80a1038:	f7ff fc9e 	bl	80a0978 <free>
}
 80a103c:	4620      	mov	r0, r4
 80a103e:	bd10      	pop	{r4, pc}

080a1040 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a1040:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1042:	68c4      	ldr	r4, [r0, #12]
 80a1044:	b1f4      	cbz	r4, 80a1084 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a1046:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1048:	2b02      	cmp	r3, #2
 80a104a:	d103      	bne.n	80a1054 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a104c:	f104 000c 	add.w	r0, r4, #12
 80a1050:	f7ff ffef 	bl	80a1032 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a1054:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1056:	b135      	cbz	r5, 80a1066 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1058:	4628      	mov	r0, r5
 80a105a:	f7ff fefe 	bl	80a0e5a <_ZNSt14_Function_baseD1Ev>
 80a105e:	2110      	movs	r1, #16
 80a1060:	4628      	mov	r0, r5
 80a1062:	f7ff f81c 	bl	80a009e <_ZdlPvj>
 80a1066:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1068:	b135      	cbz	r5, 80a1078 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a106a:	4628      	mov	r0, r5
 80a106c:	f7ff fef5 	bl	80a0e5a <_ZNSt14_Function_baseD1Ev>
 80a1070:	2110      	movs	r1, #16
 80a1072:	4628      	mov	r0, r5
 80a1074:	f7ff f813 	bl	80a009e <_ZdlPvj>
 80a1078:	4620      	mov	r0, r4
 80a107a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a107e:	2114      	movs	r1, #20
 80a1080:	f7ff b80d 	b.w	80a009e <_ZdlPvj>
 80a1084:	bd38      	pop	{r3, r4, r5, pc}

080a1086 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a1086:	b510      	push	{r4, lr}
 80a1088:	b088      	sub	sp, #32
 80a108a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a108c:	4668      	mov	r0, sp
 80a108e:	f7ff fd17 	bl	80a0ac0 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a1092:	4669      	mov	r1, sp
 80a1094:	a804      	add	r0, sp, #16
 80a1096:	f7ff fd35 	bl	80a0b04 <_ZN6StringC1ERKS_>
 80a109a:	a804      	add	r0, sp, #16
 80a109c:	47a0      	blx	r4
 80a109e:	4604      	mov	r4, r0
 80a10a0:	a804      	add	r0, sp, #16
 80a10a2:	f7ff fcc3 	bl	80a0a2c <_ZN6StringD1Ev>
    String p(param);
 80a10a6:	4668      	mov	r0, sp
 80a10a8:	f7ff fcc0 	bl	80a0a2c <_ZN6StringD1Ev>
}
 80a10ac:	4620      	mov	r0, r4
 80a10ae:	b008      	add	sp, #32
 80a10b0:	bd10      	pop	{r4, pc}

080a10b2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a10b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a10b4:	2300      	movs	r3, #0
         size = sizeof(*this);
 80a10b6:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80a10b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80a10bc:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a10be:	4669      	mov	r1, sp
 80a10c0:	461a      	mov	r2, r3
 80a10c2:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80a10c4:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80a10c8:	f8ad 4000 	strh.w	r4, [sp]
 80a10cc:	f7ff fc1c 	bl	80a0908 <spark_function>
}
 80a10d0:	b004      	add	sp, #16
 80a10d2:	bd10      	pop	{r4, pc}

080a10d4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a10d4:	680b      	ldr	r3, [r1, #0]
 80a10d6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 80a10d8:	684b      	ldr	r3, [r1, #4]
 80a10da:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 80a10dc:	b113      	cbz	r3, 80a10e4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 80a10de:	685a      	ldr	r2, [r3, #4]
 80a10e0:	3201      	adds	r2, #1
 80a10e2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a10e4:	4770      	bx	lr

080a10e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a10e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a10e8:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80a10ea:	4668      	mov	r0, sp
 80a10ec:	460d      	mov	r5, r1
 80a10ee:	f7ff fff1 	bl	80a10d4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a10f2:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a10f4:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a10f6:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a10f8:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a10fa:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a10fc:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a10fe:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1100:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a1102:	f7ff fe45 	bl	80a0d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a1106:	b135      	cbz	r5, 80a1116 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 80a1108:	1d28      	adds	r0, r5, #4
 80a110a:	f7ff fe41 	bl	80a0d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a110e:	2108      	movs	r1, #8
 80a1110:	4628      	mov	r0, r5
 80a1112:	f7fe ffc4 	bl	80a009e <_ZdlPvj>
        return p;
    }
 80a1116:	4620      	mov	r0, r4
 80a1118:	b003      	add	sp, #12
 80a111a:	bd30      	pop	{r4, r5, pc}

080a111c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a111c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a111e:	b510      	push	{r4, lr}
      if (_M_empty())
 80a1120:	b90a      	cbnz	r2, 80a1126 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a1122:	f000 fddf 	bl	80a1ce4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1126:	68c3      	ldr	r3, [r0, #12]
    }
 80a1128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a112c:	4718      	bx	r3

080a112e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a112e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a1130:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a1132:	f100 0110 	add.w	r1, r0, #16
 80a1136:	f7ff fff1 	bl	80a111c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a113a:	bd08      	pop	{r3, pc}

080a113c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a113c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a113e:	b510      	push	{r4, lr}
      if (_M_empty())
 80a1140:	b90a      	cbnz	r2, 80a1146 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a1142:	f000 fdcf 	bl	80a1ce4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1146:	68c3      	ldr	r3, [r0, #12]
    }
 80a1148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a114c:	4718      	bx	r3

080a114e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a114e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a1150:	6800      	ldr	r0, [r0, #0]
 80a1152:	f100 0110 	add.w	r1, r0, #16
 80a1156:	f7ff fff1 	bl	80a113c <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a115a:	bd08      	pop	{r3, pc}

080a115c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a115c:	b538      	push	{r3, r4, r5, lr}
 80a115e:	2300      	movs	r3, #0
 80a1160:	4604      	mov	r4, r0
 80a1162:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1164:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1166:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1168:	f7fe ff95 	bl	80a0096 <_Znwj>
 80a116c:	b128      	cbz	r0, 80a117a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a116e:	2301      	movs	r3, #1
 80a1170:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a1174:	4b02      	ldr	r3, [pc, #8]	; (80a1180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a1176:	60c5      	str	r5, [r0, #12]
 80a1178:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a117a:	6020      	str	r0, [r4, #0]
	}
 80a117c:	4620      	mov	r0, r4
 80a117e:	bd38      	pop	{r3, r4, r5, pc}
 80a1180:	080a2b68 	.word	0x080a2b68

080a1184 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a1184:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a1186:	2300      	movs	r3, #0
 80a1188:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a118a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a118c:	4604      	mov	r4, r0
 80a118e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a1190:	b12b      	cbz	r3, 80a119e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1192:	2202      	movs	r2, #2
 80a1194:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1196:	68eb      	ldr	r3, [r5, #12]
 80a1198:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a119a:	68ab      	ldr	r3, [r5, #8]
 80a119c:	60a3      	str	r3, [r4, #8]
    }
 80a119e:	4620      	mov	r0, r4
 80a11a0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a11a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a11a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a11a6:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 80a11a8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a11aa:	4668      	mov	r0, sp
 80a11ac:	f7ff ff34 	bl	80a1018 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a11b0:	f04f 0302 	mov.w	r3, #2
 80a11b4:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a11b8:	2a00      	cmp	r2, #0
 80a11ba:	d103      	bne.n	80a11c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a11bc:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a11c0:	2900      	cmp	r1, #0
 80a11c2:	d1f7      	bne.n	80a11b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a11c4:	d125      	bne.n	80a1212 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a11c6:	f104 050c 	add.w	r5, r4, #12
 80a11ca:	4669      	mov	r1, sp
 80a11cc:	4628      	mov	r0, r5
 80a11ce:	f7ff ff23 	bl	80a1018 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a11d2:	2301      	movs	r3, #1
 80a11d4:	f3bf 8f5b 	dmb	ish
 80a11d8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a11da:	2000      	movs	r0, #0
 80a11dc:	f3bf 8f5b 	dmb	ish
 80a11e0:	f104 0308 	add.w	r3, r4, #8
 80a11e4:	e853 6f00 	ldrex	r6, [r3]
 80a11e8:	e843 0200 	strex	r2, r0, [r3]
 80a11ec:	2a00      	cmp	r2, #0
 80a11ee:	d1f9      	bne.n	80a11e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a11f0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a11f4:	b16e      	cbz	r6, 80a1212 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a11f6:	f7ff fafb 	bl	80a07f0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a11fa:	b178      	cbz	r0, 80a121c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a11fc:	4629      	mov	r1, r5
 80a11fe:	4630      	mov	r0, r6
 80a1200:	f7ff ff8c 	bl	80a111c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a1204:	4630      	mov	r0, r6
 80a1206:	f7ff fe28 	bl	80a0e5a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a120a:	2110      	movs	r1, #16
 80a120c:	4630      	mov	r0, r6
 80a120e:	f7fe ff46 	bl	80a009e <_ZdlPvj>
        p_->setError(std::move(error));
 80a1212:	4668      	mov	r0, sp
 80a1214:	f7ff ff0d 	bl	80a1032 <_ZN8particle5ErrorD1Ev>
    }
 80a1218:	b009      	add	sp, #36	; 0x24
 80a121a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a121c:	4631      	mov	r1, r6
 80a121e:	a802      	add	r0, sp, #8
 80a1220:	f7ff ffb0 	bl	80a1184 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a1224:	68e0      	ldr	r0, [r4, #12]
 80a1226:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a122a:	b108      	cbz	r0, 80a1230 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a122c:	f001 fb26 	bl	80a287c <strdup>
        type_(type) {
 80a1230:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1232:	2010      	movs	r0, #16
 80a1234:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a1238:	f7fe ff2d 	bl	80a0096 <_Znwj>
 80a123c:	4605      	mov	r5, r0
 80a123e:	b1e8      	cbz	r0, 80a127c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a1240:	2700      	movs	r7, #0
 80a1242:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1244:	2018      	movs	r0, #24
 80a1246:	f7fe ff26 	bl	80a0096 <_Znwj>
 80a124a:	4604      	mov	r4, r0
 80a124c:	b188      	cbz	r0, 80a1272 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a124e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a1250:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a1252:	a802      	add	r0, sp, #8
 80a1254:	f7ff fe0a 	bl	80a0e6c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1258:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a125a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a125c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a125e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1260:	9204      	str	r2, [sp, #16]
 80a1262:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1264:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a1266:	60e3      	str	r3, [r4, #12]
 80a1268:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a126c:	9205      	str	r2, [sp, #20]
 80a126e:	f7ff fed3 	bl	80a1018 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a1272:	4b08      	ldr	r3, [pc, #32]	; (80a1294 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1274:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1276:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1278:	4b07      	ldr	r3, [pc, #28]	; (80a1298 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a127a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a127c:	a806      	add	r0, sp, #24
 80a127e:	f7ff fed8 	bl	80a1032 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a1282:	a802      	add	r0, sp, #8
 80a1284:	f7ff fde9 	bl	80a0e5a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1288:	2200      	movs	r2, #0
 80a128a:	4629      	mov	r1, r5
 80a128c:	4803      	ldr	r0, [pc, #12]	; (80a129c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a128e:	f7ff fab7 	bl	80a0800 <application_thread_invoke>
 80a1292:	e7b7      	b.n	80a1204 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a1294:	080a112f 	.word	0x080a112f
 80a1298:	080a13b9 	.word	0x080a13b9
 80a129c:	080a187d 	.word	0x080a187d

080a12a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a12a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a12a4:	b08a      	sub	sp, #40	; 0x28
 80a12a6:	4605      	mov	r5, r0
 80a12a8:	460c      	mov	r4, r1
 80a12aa:	4617      	mov	r7, r2
 80a12ac:	4698      	mov	r8, r3
 80a12ae:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a12b2:	f7ff fb39 	bl	80a0928 <spark_cloud_flag_connected>
 80a12b6:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a12b8:	4682      	mov	sl, r0
 80a12ba:	bb38      	cbnz	r0, 80a130c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a12bc:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a12c0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a12c2:	a905      	add	r1, sp, #20
 80a12c4:	4630      	mov	r0, r6
 80a12c6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a12ca:	f7ff fea5 	bl	80a1018 <_ZN8particle5ErrorC1EOS0_>
 80a12ce:	2014      	movs	r0, #20
 80a12d0:	f7fe fee1 	bl	80a0096 <_Znwj>
 80a12d4:	4604      	mov	r4, r0
 80a12d6:	b148      	cbz	r0, 80a12ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a12d8:	2302      	movs	r3, #2
 80a12da:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a12dc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a12de:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a12e2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a12e4:	4631      	mov	r1, r6
 80a12e6:	300c      	adds	r0, #12
 80a12e8:	f7ff fe96 	bl	80a1018 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a12ec:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a12ee:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a12f0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a12f4:	f7ff ff32 	bl	80a115c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a12f8:	4630      	mov	r0, r6
 80a12fa:	f7ff fe9a 	bl	80a1032 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a12fe:	a805      	add	r0, sp, #20
 80a1300:	f7ff fe97 	bl	80a1032 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a1304:	4628      	mov	r0, r5
 80a1306:	b00a      	add	sp, #40	; 0x28
 80a1308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d.size = sizeof(spark_send_event_data);
 80a130c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 80a130e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1312:	2014      	movs	r0, #20
 80a1314:	e9cd aa08 	strd	sl, sl, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 80a1318:	9307      	str	r3, [sp, #28]
 80a131a:	f7fe febc 	bl	80a0096 <_Znwj>
 80a131e:	4601      	mov	r1, r0
 80a1320:	b128      	cbz	r0, 80a132e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1322:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a1326:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a132a:	f880 a001 	strb.w	sl, [r0, #1]
 80a132e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1330:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a1332:	f7ff ff13 	bl	80a115c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a1336:	4b1f      	ldr	r3, [pc, #124]	; (80a13b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x114>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1338:	2008      	movs	r0, #8
 80a133a:	9308      	str	r3, [sp, #32]
 80a133c:	f7fe feab 	bl	80a0096 <_Znwj>
 80a1340:	4682      	mov	sl, r0
 80a1342:	b110      	cbz	r0, 80a134a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xaa>
 80a1344:	a903      	add	r1, sp, #12
 80a1346:	f7ff fec5 	bl	80a10d4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a134a:	4642      	mov	r2, r8
 80a134c:	4639      	mov	r1, r7
 80a134e:	4620      	mov	r0, r4
 80a1350:	9600      	str	r6, [sp, #0]
 80a1352:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a1356:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a135a:	f7ff faed 	bl	80a0938 <spark_send_event>
 80a135e:	b9b8      	cbnz	r0, 80a1390 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
	return __atomic_load_n(&_M_i, int(__m));
 80a1360:	9b03      	ldr	r3, [sp, #12]
 80a1362:	785b      	ldrb	r3, [r3, #1]
 80a1364:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1368:	b993      	cbnz	r3, 80a1390 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
 80a136a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a136e:	a905      	add	r1, sp, #20
 80a1370:	a803      	add	r0, sp, #12
 80a1372:	9205      	str	r2, [sp, #20]
 80a1374:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1378:	f7ff ff14 	bl	80a11a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a137c:	a805      	add	r0, sp, #20
 80a137e:	f7ff fe58 	bl	80a1032 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1382:	a805      	add	r0, sp, #20
 80a1384:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1386:	f7ff feae 	bl	80a10e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a138a:	a806      	add	r0, sp, #24
 80a138c:	f7ff fd00 	bl	80a0d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1390:	a903      	add	r1, sp, #12
 80a1392:	a805      	add	r0, sp, #20
 80a1394:	f7ff fe9e 	bl	80a10d4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1398:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a139a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a139c:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a139e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a13a0:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a13a2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a13a4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a13a6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a13a8:	f7ff fcf2 	bl	80a0d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a13ac:	a804      	add	r0, sp, #16
 80a13ae:	f7ff fcef 	bl	80a0d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a13b2:	e7a7      	b.n	80a1304 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a13b4:	080a1435 	.word	0x080a1435

080a13b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 80a13b8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a13ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a13bc:	4605      	mov	r5, r0
	switch (__op)
 80a13be:	d103      	bne.n	80a13c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a13c0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a13c2:	6003      	str	r3, [r0, #0]
      }
 80a13c4:	2000      	movs	r0, #0
 80a13c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 80a13c8:	2a02      	cmp	r2, #2
 80a13ca:	d010      	beq.n	80a13ee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a13cc:	2a03      	cmp	r2, #3
 80a13ce:	d1f9      	bne.n	80a13c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a13d0:	6804      	ldr	r4, [r0, #0]
 80a13d2:	2c00      	cmp	r4, #0
 80a13d4:	d0f6      	beq.n	80a13c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 80a13d6:	f104 0010 	add.w	r0, r4, #16
 80a13da:	f7ff fe2a 	bl	80a1032 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a13de:	4620      	mov	r0, r4
 80a13e0:	f7ff fd3b 	bl	80a0e5a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a13e4:	2118      	movs	r1, #24
 80a13e6:	4620      	mov	r0, r4
 80a13e8:	f7fe fe59 	bl	80a009e <_ZdlPvj>
 80a13ec:	e7ea      	b.n	80a13c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a13ee:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a13f0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a13f2:	f7fe fe50 	bl	80a0096 <_Znwj>
 80a13f6:	4604      	mov	r4, r0
 80a13f8:	b150      	cbz	r0, 80a1410 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a13fa:	4631      	mov	r1, r6
 80a13fc:	f7ff fec2 	bl	80a1184 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a1400:	6930      	ldr	r0, [r6, #16]
 80a1402:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1406:	b108      	cbz	r0, 80a140c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 80a1408:	f001 fa38 	bl	80a287c <strdup>
        type_(type) {
 80a140c:	6120      	str	r0, [r4, #16]
 80a140e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a1410:	602c      	str	r4, [r5, #0]
	}
 80a1412:	e7d7      	b.n	80a13c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

080a1414 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a1414:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a1416:	2300      	movs	r3, #0
 80a1418:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a141a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a141c:	4604      	mov	r4, r0
 80a141e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a1420:	b12b      	cbz	r3, 80a142e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1422:	2202      	movs	r2, #2
 80a1424:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1426:	68eb      	ldr	r3, [r5, #12]
 80a1428:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a142a:	68ab      	ldr	r3, [r5, #8]
 80a142c:	60a3      	str	r3, [r4, #8]
    }
 80a142e:	4620      	mov	r0, r4
 80a1430:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1434 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1434:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1436:	4604      	mov	r4, r0
 80a1438:	b089      	sub	sp, #36	; 0x24
 80a143a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a143c:	a801      	add	r0, sp, #4
 80a143e:	4611      	mov	r1, r2
 80a1440:	f7ff fe51 	bl	80a10e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1444:	b1a4      	cbz	r4, 80a1470 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1446:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1448:	b11d      	cbz	r5, 80a1452 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a144a:	4628      	mov	r0, r5
 80a144c:	f001 fa16 	bl	80a287c <strdup>
 80a1450:	4605      	mov	r5, r0
 80a1452:	a801      	add	r0, sp, #4
 80a1454:	a903      	add	r1, sp, #12
        type_(type) {
 80a1456:	9503      	str	r5, [sp, #12]
 80a1458:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a145c:	f7ff fea2 	bl	80a11a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1460:	a803      	add	r0, sp, #12
 80a1462:	f7ff fde6 	bl	80a1032 <_ZN8particle5ErrorD1Ev>
 80a1466:	a802      	add	r0, sp, #8
 80a1468:	f7ff fc92 	bl	80a0d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a146c:	b009      	add	sp, #36	; 0x24
 80a146e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1470:	2301      	movs	r3, #1
      { return _M_ptr; }
 80a1472:	9d01      	ldr	r5, [sp, #4]
 80a1474:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a1478:	2a00      	cmp	r2, #0
 80a147a:	d103      	bne.n	80a1484 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a147c:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a1480:	2900      	cmp	r1, #0
 80a1482:	d1f7      	bne.n	80a1474 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a1484:	d1ef      	bne.n	80a1466 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a1486:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a1488:	f3bf 8f5b 	dmb	ish
 80a148c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a148e:	f3bf 8f5b 	dmb	ish
 80a1492:	1d2b      	adds	r3, r5, #4
 80a1494:	e853 6f00 	ldrex	r6, [r3]
 80a1498:	e843 4200 	strex	r2, r4, [r3]
 80a149c:	2a00      	cmp	r2, #0
 80a149e:	d1f9      	bne.n	80a1494 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a14a0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a14a4:	2e00      	cmp	r6, #0
 80a14a6:	d0de      	beq.n	80a1466 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a14a8:	4620      	mov	r0, r4
 80a14aa:	f7ff f9a1 	bl	80a07f0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a14ae:	4607      	mov	r7, r0
 80a14b0:	b160      	cbz	r0, 80a14cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a14b2:	4630      	mov	r0, r6
 80a14b4:	f105 010c 	add.w	r1, r5, #12
 80a14b8:	f7ff fe40 	bl	80a113c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a14bc:	4630      	mov	r0, r6
 80a14be:	f7ff fccc 	bl	80a0e5a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a14c2:	2110      	movs	r1, #16
 80a14c4:	4630      	mov	r0, r6
 80a14c6:	f7fe fdea 	bl	80a009e <_ZdlPvj>
 80a14ca:	e7cc      	b.n	80a1466 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a14cc:	4631      	mov	r1, r6
 80a14ce:	a803      	add	r0, sp, #12
 80a14d0:	f7ff ffa0 	bl	80a1414 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a14d4:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a14d6:	2010      	movs	r0, #16
 80a14d8:	f88d 301c 	strb.w	r3, [sp, #28]
 80a14dc:	f7fe fddb 	bl	80a0096 <_Znwj>
 80a14e0:	4605      	mov	r5, r0
 80a14e2:	b1d0      	cbz	r0, 80a151a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a14e4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a14e6:	2014      	movs	r0, #20
 80a14e8:	f7fe fdd5 	bl	80a0096 <_Znwj>
 80a14ec:	4604      	mov	r4, r0
 80a14ee:	b178      	cbz	r0, 80a1510 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a14f0:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a14f2:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a14f4:	a803      	add	r0, sp, #12
 80a14f6:	f7ff fcb9 	bl	80a0e6c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a14fa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a14fc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a14fe:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1500:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a1502:	9205      	str	r2, [sp, #20]
 80a1504:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1506:	60e3      	str	r3, [r4, #12]
 80a1508:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a150c:	9206      	str	r2, [sp, #24]
 80a150e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1510:	4b06      	ldr	r3, [pc, #24]	; (80a152c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1512:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1514:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1516:	4b06      	ldr	r3, [pc, #24]	; (80a1530 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a1518:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a151a:	a803      	add	r0, sp, #12
 80a151c:	f7ff fc9d 	bl	80a0e5a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1520:	2200      	movs	r2, #0
 80a1522:	4629      	mov	r1, r5
 80a1524:	4803      	ldr	r0, [pc, #12]	; (80a1534 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a1526:	f7ff f96b 	bl	80a0800 <application_thread_invoke>
 80a152a:	e7c7      	b.n	80a14bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a152c:	080a114f 	.word	0x080a114f
 80a1530:	080a1539 	.word	0x080a1539
 80a1534:	080a187d 	.word	0x080a187d

080a1538 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 80a1538:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a153a:	b570      	push	{r4, r5, r6, lr}
 80a153c:	4604      	mov	r4, r0
	switch (__op)
 80a153e:	d103      	bne.n	80a1548 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a1540:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a1542:	6003      	str	r3, [r0, #0]
      }
 80a1544:	2000      	movs	r0, #0
 80a1546:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 80a1548:	2a02      	cmp	r2, #2
 80a154a:	d00c      	beq.n	80a1566 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a154c:	2a03      	cmp	r2, #3
 80a154e:	d1f9      	bne.n	80a1544 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a1550:	6804      	ldr	r4, [r0, #0]
 80a1552:	2c00      	cmp	r4, #0
 80a1554:	d0f6      	beq.n	80a1544 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 80a1556:	4620      	mov	r0, r4
 80a1558:	f7ff fc7f 	bl	80a0e5a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a155c:	2114      	movs	r1, #20
 80a155e:	4620      	mov	r0, r4
 80a1560:	f7fe fd9d 	bl	80a009e <_ZdlPvj>
 80a1564:	e7ee      	b.n	80a1544 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1566:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a1568:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a156a:	f7fe fd94 	bl	80a0096 <_Znwj>
 80a156e:	4605      	mov	r5, r0
 80a1570:	b120      	cbz	r0, 80a157c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 80a1572:	4631      	mov	r1, r6
 80a1574:	f7ff ff4e 	bl	80a1414 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1578:	7c33      	ldrb	r3, [r6, #16]
 80a157a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a157c:	6025      	str	r5, [r4, #0]
	}
 80a157e:	e7e1      	b.n	80a1544 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

080a1580 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1580:	4770      	bx	lr

080a1582 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1584:	460e      	mov	r6, r1
 80a1586:	2400      	movs	r4, #0
 80a1588:	f100 0708 	add.w	r7, r0, #8
 80a158c:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a158e:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a1592:	220a      	movs	r2, #10
 80a1594:	4630      	mov	r0, r6
 80a1596:	f7ff fb08 	bl	80a0baa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a159a:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a159c:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a159e:	d101      	bne.n	80a15a4 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a15a0:	4620      	mov	r0, r4
 80a15a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a15a4:	2c00      	cmp	r4, #0
 80a15a6:	d0f2      	beq.n	80a158e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a15a8:	212e      	movs	r1, #46	; 0x2e
 80a15aa:	4630      	mov	r0, r6
 80a15ac:	f7ff fae4 	bl	80a0b78 <_ZN5Print5printEc>
 80a15b0:	4404      	add	r4, r0
 80a15b2:	e7ec      	b.n	80a158e <_ZNK9IPAddress7printToER5Print+0xc>

080a15b4 <_ZN9IPAddressD0Ev>:
 80a15b4:	b510      	push	{r4, lr}
 80a15b6:	4604      	mov	r4, r0
 80a15b8:	2118      	movs	r1, #24
 80a15ba:	f7fe fd70 	bl	80a009e <_ZdlPvj>
 80a15be:	4620      	mov	r0, r4
 80a15c0:	bd10      	pop	{r4, pc}
	...

080a15c4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a15c4:	b510      	push	{r4, lr}
 80a15c6:	4604      	mov	r4, r0
 80a15c8:	4b04      	ldr	r3, [pc, #16]	; (80a15dc <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a15ca:	2211      	movs	r2, #17
 80a15cc:	2100      	movs	r1, #0
 80a15ce:	f840 3b04 	str.w	r3, [r0], #4
 80a15d2:	f001 f91d 	bl	80a2810 <memset>
}
 80a15d6:	4620      	mov	r0, r4
 80a15d8:	bd10      	pop	{r4, pc}
 80a15da:	bf00      	nop
 80a15dc:	080a2b84 	.word	0x080a2b84

080a15e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a15e0:	4603      	mov	r3, r0
 80a15e2:	4a07      	ldr	r2, [pc, #28]	; (80a1600 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a15e4:	b510      	push	{r4, lr}
 80a15e6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a15ea:	f101 0210 	add.w	r2, r1, #16
 80a15ee:	f851 4b04 	ldr.w	r4, [r1], #4
 80a15f2:	4291      	cmp	r1, r2
 80a15f4:	f843 4b04 	str.w	r4, [r3], #4
 80a15f8:	d1f9      	bne.n	80a15ee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a15fa:	780a      	ldrb	r2, [r1, #0]
 80a15fc:	701a      	strb	r2, [r3, #0]
}
 80a15fe:	bd10      	pop	{r4, pc}
 80a1600:	080a2b84 	.word	0x080a2b84

080a1604 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a1604:	4a02      	ldr	r2, [pc, #8]	; (80a1610 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a1606:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a160a:	2204      	movs	r2, #4
 80a160c:	7502      	strb	r2, [r0, #20]
}
 80a160e:	4770      	bx	lr
 80a1610:	080a2b84 	.word	0x080a2b84

080a1614 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1614:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1616:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a161a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a161e:	2304      	movs	r3, #4
 80a1620:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1624:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1628:	6044      	str	r4, [r0, #4]
 80a162a:	7503      	strb	r3, [r0, #20]
}
 80a162c:	bd10      	pop	{r4, pc}
	...

080a1630 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1630:	b513      	push	{r0, r1, r4, lr}
 80a1632:	4c04      	ldr	r4, [pc, #16]	; (80a1644 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1634:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1636:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a163a:	9400      	str	r4, [sp, #0]
 80a163c:	f7ff ffea 	bl	80a1614 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1640:	b002      	add	sp, #8
 80a1642:	bd10      	pop	{r4, pc}
 80a1644:	080a2b84 	.word	0x080a2b84

080a1648 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1648:	7441      	strb	r1, [r0, #17]
}
 80a164a:	4770      	bx	lr

080a164c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a164c:	4770      	bx	lr

080a164e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a164e:	4770      	bx	lr

080a1650 <_ZN9USBSerial4readEv>:
{
 80a1650:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1652:	2100      	movs	r1, #0
 80a1654:	7c00      	ldrb	r0, [r0, #16]
 80a1656:	f7ff f893 	bl	80a0780 <HAL_USB_USART_Receive_Data>
}
 80a165a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a165e:	bd08      	pop	{r3, pc}

080a1660 <_ZN9USBSerial4peekEv>:
{
 80a1660:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1662:	2101      	movs	r1, #1
 80a1664:	7c00      	ldrb	r0, [r0, #16]
 80a1666:	f7ff f88b 	bl	80a0780 <HAL_USB_USART_Receive_Data>
}
 80a166a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a166e:	bd08      	pop	{r3, pc}

080a1670 <_ZN9USBSerial17availableForWriteEv>:
{
 80a1670:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1672:	7c00      	ldrb	r0, [r0, #16]
 80a1674:	f7ff f87c 	bl	80a0770 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1678:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a167c:	bd08      	pop	{r3, pc}

080a167e <_ZN9USBSerial9availableEv>:
{
 80a167e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1680:	7c00      	ldrb	r0, [r0, #16]
 80a1682:	f7ff f86d 	bl	80a0760 <HAL_USB_USART_Available_Data>
}
 80a1686:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a168a:	bd08      	pop	{r3, pc}

080a168c <_ZN9USBSerial5writeEh>:
{
 80a168c:	b538      	push	{r3, r4, r5, lr}
 80a168e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1690:	7c00      	ldrb	r0, [r0, #16]
{
 80a1692:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1694:	f7ff f86c 	bl	80a0770 <HAL_USB_USART_Available_Data_For_Write>
 80a1698:	2800      	cmp	r0, #0
 80a169a:	dc01      	bgt.n	80a16a0 <_ZN9USBSerial5writeEh+0x14>
 80a169c:	7c60      	ldrb	r0, [r4, #17]
 80a169e:	b128      	cbz	r0, 80a16ac <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a16a0:	4629      	mov	r1, r5
 80a16a2:	7c20      	ldrb	r0, [r4, #16]
 80a16a4:	f7ff f874 	bl	80a0790 <HAL_USB_USART_Send_Data>
 80a16a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a16ac:	bd38      	pop	{r3, r4, r5, pc}

080a16ae <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a16ae:	7c00      	ldrb	r0, [r0, #16]
 80a16b0:	f7ff b876 	b.w	80a07a0 <HAL_USB_USART_Flush_Data>

080a16b4 <_ZN9USBSerialD0Ev>:
 80a16b4:	b510      	push	{r4, lr}
 80a16b6:	4604      	mov	r4, r0
 80a16b8:	2114      	movs	r1, #20
 80a16ba:	f7fe fcf0 	bl	80a009e <_ZdlPvj>
 80a16be:	4620      	mov	r0, r4
 80a16c0:	bd10      	pop	{r4, pc}

080a16c2 <__tcf_1>:
 80a16c2:	4770      	bx	lr

080a16c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a16c4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a16c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a16ca:	4604      	mov	r4, r0
 80a16cc:	4608      	mov	r0, r1
 80a16ce:	2100      	movs	r1, #0
 80a16d0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a16d4:	4b04      	ldr	r3, [pc, #16]	; (80a16e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a16d6:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a16d8:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a16da:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a16dc:	4611      	mov	r1, r2
  _blocking = true;
 80a16de:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a16e0:	f7ff f82e 	bl	80a0740 <HAL_USB_USART_Init>
}
 80a16e4:	4620      	mov	r0, r4
 80a16e6:	bd10      	pop	{r4, pc}
 80a16e8:	080a2b98 	.word	0x080a2b98

080a16ec <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a16ec:	2200      	movs	r2, #0
 80a16ee:	7c00      	ldrb	r0, [r0, #16]
 80a16f0:	f7ff b82e 	b.w	80a0750 <HAL_USB_USART_Begin>

080a16f4 <_Z19acquireSerialBufferv>:
{
 80a16f4:	b510      	push	{r4, lr}
 80a16f6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a16f8:	2214      	movs	r2, #20
 80a16fa:	2100      	movs	r1, #0
 80a16fc:	f001 f888 	bl	80a2810 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a1700:	4b05      	ldr	r3, [pc, #20]	; (80a1718 <_Z19acquireSerialBufferv+0x24>)
}
 80a1702:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a1704:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1706:	4b05      	ldr	r3, [pc, #20]	; (80a171c <_Z19acquireSerialBufferv+0x28>)
 80a1708:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a170a:	f240 1301 	movw	r3, #257	; 0x101
 80a170e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1710:	2381      	movs	r3, #129	; 0x81
 80a1712:	8223      	strh	r3, [r4, #16]
}
 80a1714:	bd10      	pop	{r4, pc}
 80a1716:	bf00      	nop
 80a1718:	20000108 	.word	0x20000108
 80a171c:	20000209 	.word	0x20000209

080a1720 <_Z16_fetch_usbserialv>:
{
 80a1720:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1722:	4d0e      	ldr	r5, [pc, #56]	; (80a175c <_Z16_fetch_usbserialv+0x3c>)
{
 80a1724:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1726:	a801      	add	r0, sp, #4
 80a1728:	f7ff ffe4 	bl	80a16f4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a172c:	7829      	ldrb	r1, [r5, #0]
 80a172e:	f3bf 8f5b 	dmb	ish
 80a1732:	f011 0401 	ands.w	r4, r1, #1
 80a1736:	d10e      	bne.n	80a1756 <_Z16_fetch_usbserialv+0x36>
 80a1738:	4628      	mov	r0, r5
 80a173a:	f7fe fcb2 	bl	80a00a2 <__cxa_guard_acquire>
 80a173e:	b150      	cbz	r0, 80a1756 <_Z16_fetch_usbserialv+0x36>
 80a1740:	4621      	mov	r1, r4
 80a1742:	aa01      	add	r2, sp, #4
 80a1744:	4806      	ldr	r0, [pc, #24]	; (80a1760 <_Z16_fetch_usbserialv+0x40>)
 80a1746:	f7ff ffbd 	bl	80a16c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a174a:	4628      	mov	r0, r5
 80a174c:	f7fe fcae 	bl	80a00ac <__cxa_guard_release>
 80a1750:	4804      	ldr	r0, [pc, #16]	; (80a1764 <_Z16_fetch_usbserialv+0x44>)
 80a1752:	f001 f845 	bl	80a27e0 <atexit>
	return _usbserial;
}
 80a1756:	4802      	ldr	r0, [pc, #8]	; (80a1760 <_Z16_fetch_usbserialv+0x40>)
 80a1758:	b007      	add	sp, #28
 80a175a:	bd30      	pop	{r4, r5, pc}
 80a175c:	200000d8 	.word	0x200000d8
 80a1760:	200000e0 	.word	0x200000e0
 80a1764:	080a164d 	.word	0x080a164d

080a1768 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1768:	b510      	push	{r4, lr}
 80a176a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a176c:	2214      	movs	r2, #20
 80a176e:	2100      	movs	r1, #0
 80a1770:	f001 f84e 	bl	80a2810 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1774:	4b05      	ldr	r3, [pc, #20]	; (80a178c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1776:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1778:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a177a:	4b05      	ldr	r3, [pc, #20]	; (80a1790 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a177c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a177e:	f240 1301 	movw	r3, #257	; 0x101
 80a1782:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1784:	2381      	movs	r3, #129	; 0x81
 80a1786:	8223      	strh	r3, [r4, #16]
}
 80a1788:	bd10      	pop	{r4, pc}
 80a178a:	bf00      	nop
 80a178c:	2000028a 	.word	0x2000028a
 80a1790:	2000038b 	.word	0x2000038b

080a1794 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1794:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1796:	4c0e      	ldr	r4, [pc, #56]	; (80a17d0 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a1798:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a179a:	a801      	add	r0, sp, #4
 80a179c:	f7ff ffe4 	bl	80a1768 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a17a0:	7823      	ldrb	r3, [r4, #0]
 80a17a2:	f3bf 8f5b 	dmb	ish
 80a17a6:	07db      	lsls	r3, r3, #31
 80a17a8:	d40e      	bmi.n	80a17c8 <_Z17_fetch_usbserial1v+0x34>
 80a17aa:	4620      	mov	r0, r4
 80a17ac:	f7fe fc79 	bl	80a00a2 <__cxa_guard_acquire>
 80a17b0:	b150      	cbz	r0, 80a17c8 <_Z17_fetch_usbserial1v+0x34>
 80a17b2:	2101      	movs	r1, #1
 80a17b4:	aa01      	add	r2, sp, #4
 80a17b6:	4807      	ldr	r0, [pc, #28]	; (80a17d4 <_Z17_fetch_usbserial1v+0x40>)
 80a17b8:	f7ff ff84 	bl	80a16c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a17bc:	4620      	mov	r0, r4
 80a17be:	f7fe fc75 	bl	80a00ac <__cxa_guard_release>
 80a17c2:	4805      	ldr	r0, [pc, #20]	; (80a17d8 <_Z17_fetch_usbserial1v+0x44>)
 80a17c4:	f001 f80c 	bl	80a27e0 <atexit>
  return _usbserial1;
}
 80a17c8:	4802      	ldr	r0, [pc, #8]	; (80a17d4 <_Z17_fetch_usbserial1v+0x40>)
 80a17ca:	b006      	add	sp, #24
 80a17cc:	bd10      	pop	{r4, pc}
 80a17ce:	bf00      	nop
 80a17d0:	200000dc 	.word	0x200000dc
 80a17d4:	200000f4 	.word	0x200000f4
 80a17d8:	080a16c3 	.word	0x080a16c3

080a17dc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a17dc:	4770      	bx	lr

080a17de <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a17de:	7441      	strb	r1, [r0, #17]
}
 80a17e0:	4770      	bx	lr

080a17e2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a17e2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a17e4:	7c00      	ldrb	r0, [r0, #16]
 80a17e6:	f7fe ff29 	bl	80a063c <hal_usart_available_data_for_write>
}
 80a17ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a17ee:	bd08      	pop	{r3, pc}

080a17f0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a17f0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a17f2:	7c00      	ldrb	r0, [r0, #16]
 80a17f4:	f7fe fefa 	bl	80a05ec <hal_usart_available>
}
 80a17f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a17fc:	bd08      	pop	{r3, pc}

080a17fe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a17fe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1800:	7c00      	ldrb	r0, [r0, #16]
 80a1802:	f7fe ff03 	bl	80a060c <hal_usart_peek>
}
 80a1806:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a180a:	bd08      	pop	{r3, pc}

080a180c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a180c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a180e:	7c00      	ldrb	r0, [r0, #16]
 80a1810:	f7fe fef4 	bl	80a05fc <hal_usart_read>
}
 80a1814:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1818:	bd08      	pop	{r3, pc}

080a181a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a181a:	7c00      	ldrb	r0, [r0, #16]
 80a181c:	f7fe befe 	b.w	80a061c <hal_usart_flush>

080a1820 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1820:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1822:	7c46      	ldrb	r6, [r0, #17]
{
 80a1824:	4604      	mov	r4, r0
 80a1826:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1828:	b12e      	cbz	r6, 80a1836 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a182a:	4629      	mov	r1, r5
 80a182c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a182e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1832:	f7fe bed3 	b.w	80a05dc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1836:	7c00      	ldrb	r0, [r0, #16]
 80a1838:	f7fe ff00 	bl	80a063c <hal_usart_available_data_for_write>
 80a183c:	2800      	cmp	r0, #0
 80a183e:	dcf4      	bgt.n	80a182a <_ZN11USARTSerial5writeEh+0xa>
}
 80a1840:	4630      	mov	r0, r6
 80a1842:	bd70      	pop	{r4, r5, r6, pc}

080a1844 <_ZN11USARTSerialD0Ev>:
 80a1844:	b510      	push	{r4, lr}
 80a1846:	4604      	mov	r4, r0
 80a1848:	2114      	movs	r1, #20
 80a184a:	f7fe fc28 	bl	80a009e <_ZdlPvj>
 80a184e:	4620      	mov	r0, r4
 80a1850:	bd10      	pop	{r4, pc}
	...

080a1854 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a1854:	b510      	push	{r4, lr}
 80a1856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a185a:	4604      	mov	r4, r0
 80a185c:	4608      	mov	r0, r1
 80a185e:	4611      	mov	r1, r2
 80a1860:	2200      	movs	r2, #0
 80a1862:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a1866:	4b04      	ldr	r3, [pc, #16]	; (80a1878 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a1868:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a186a:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a186c:	2301      	movs	r3, #1
 80a186e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a1870:	f7fe feec 	bl	80a064c <hal_usart_init_ex>
}
 80a1874:	4620      	mov	r0, r4
 80a1876:	bd10      	pop	{r4, pc}
 80a1878:	080a2bc8 	.word	0x080a2bc8

080a187c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a187c:	b510      	push	{r4, lr}
      if (_M_empty())
 80a187e:	6883      	ldr	r3, [r0, #8]
 80a1880:	4604      	mov	r4, r0
 80a1882:	b90b      	cbnz	r3, 80a1888 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1884:	f000 fa2e 	bl	80a1ce4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1888:	68c3      	ldr	r3, [r0, #12]
 80a188a:	4798      	blx	r3
      if (_M_manager)
 80a188c:	68a3      	ldr	r3, [r4, #8]
 80a188e:	b11b      	cbz	r3, 80a1898 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1890:	2203      	movs	r2, #3
 80a1892:	4621      	mov	r1, r4
 80a1894:	4620      	mov	r0, r4
 80a1896:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1898:	4620      	mov	r0, r4
}
 80a189a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a189e:	2110      	movs	r1, #16
 80a18a0:	f7fe bbfd 	b.w	80a009e <_ZdlPvj>

080a18a4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a18a4:	4770      	bx	lr

080a18a6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a18a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a18a8:	4606      	mov	r6, r0
 80a18aa:	4615      	mov	r5, r2
 80a18ac:	460c      	mov	r4, r1
 80a18ae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a18b0:	42bc      	cmp	r4, r7
 80a18b2:	d006      	beq.n	80a18c2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a18b4:	6833      	ldr	r3, [r6, #0]
 80a18b6:	4630      	mov	r0, r6
 80a18b8:	689b      	ldr	r3, [r3, #8]
 80a18ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a18be:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a18c0:	e7f6      	b.n	80a18b0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a18c2:	4628      	mov	r0, r5
 80a18c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a18c6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a18c6:	2200      	movs	r2, #0
 80a18c8:	7c00      	ldrb	r0, [r0, #16]
 80a18ca:	f7fe beef 	b.w	80a06ac <hal_i2c_write>

080a18ce <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a18ce:	2100      	movs	r1, #0
 80a18d0:	7c00      	ldrb	r0, [r0, #16]
 80a18d2:	f7fe bef3 	b.w	80a06bc <hal_i2c_available>

080a18d6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a18d6:	2100      	movs	r1, #0
 80a18d8:	7c00      	ldrb	r0, [r0, #16]
 80a18da:	f7fe bef7 	b.w	80a06cc <hal_i2c_read>

080a18de <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a18de:	2100      	movs	r1, #0
 80a18e0:	7c00      	ldrb	r0, [r0, #16]
 80a18e2:	f7fe befb 	b.w	80a06dc <hal_i2c_peek>

080a18e6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a18e6:	2100      	movs	r1, #0
 80a18e8:	7c00      	ldrb	r0, [r0, #16]
 80a18ea:	f7fe beff 	b.w	80a06ec <hal_i2c_flush>

080a18ee <_ZN7TwoWireD0Ev>:
 80a18ee:	b510      	push	{r4, lr}
 80a18f0:	4604      	mov	r4, r0
 80a18f2:	2114      	movs	r1, #20
 80a18f4:	f7fe fbd3 	bl	80a009e <_ZdlPvj>
 80a18f8:	4620      	mov	r0, r4
 80a18fa:	bd10      	pop	{r4, pc}

080a18fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a18fc:	b510      	push	{r4, lr}
 80a18fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1902:	4604      	mov	r4, r0
 80a1904:	4608      	mov	r0, r1
 80a1906:	2100      	movs	r1, #0
 80a1908:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a190c:	4b03      	ldr	r3, [pc, #12]	; (80a191c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a190e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1910:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a1912:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1914:	f7fe fefa 	bl	80a070c <hal_i2c_init>
}
 80a1918:	4620      	mov	r0, r4
 80a191a:	bd10      	pop	{r4, pc}
 80a191c:	080a2bf8 	.word	0x080a2bf8

080a1920 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 80a1920:	2200      	movs	r2, #0
 80a1922:	7c00      	ldrb	r0, [r0, #16]
 80a1924:	f7fe be9a 	b.w	80a065c <hal_i2c_set_speed>

080a1928 <_ZN7TwoWire12stretchClockEb>:
  hal_i2c_stretch_clock(_i2c, stretch, NULL);
 80a1928:	2200      	movs	r2, #0
 80a192a:	7c00      	ldrb	r0, [r0, #16]
 80a192c:	f7fe be9e 	b.w	80a066c <hal_i2c_stretch_clock>

080a1930 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1930:	2300      	movs	r3, #0
 80a1932:	7c00      	ldrb	r0, [r0, #16]
 80a1934:	461a      	mov	r2, r3
 80a1936:	4619      	mov	r1, r3
 80a1938:	f7fe bea0 	b.w	80a067c <hal_i2c_begin>

080a193c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a193c:	2200      	movs	r2, #0
 80a193e:	7c00      	ldrb	r0, [r0, #16]
 80a1940:	f7fe bea4 	b.w	80a068c <hal_i2c_begin_transmission>

080a1944 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a1944:	2200      	movs	r2, #0
 80a1946:	7c00      	ldrb	r0, [r0, #16]
 80a1948:	f7fe bea8 	b.w	80a069c <hal_i2c_end_transmission>

080a194c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a194c:	2101      	movs	r1, #1
 80a194e:	f7ff bff9 	b.w	80a1944 <_ZN7TwoWire15endTransmissionEh>

080a1952 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1952:	2200      	movs	r2, #0
 80a1954:	6840      	ldr	r0, [r0, #4]
 80a1956:	4611      	mov	r1, r2
 80a1958:	f7fe bf8e 	b.w	80a0878 <network_ready>

080a195c <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a195c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a195e:	4615      	mov	r5, r2
 80a1960:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1962:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a1964:	460e      	mov	r6, r1
 80a1966:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a1968:	2100      	movs	r1, #0
 80a196a:	a803      	add	r0, sp, #12
 80a196c:	f000 ff50 	bl	80a2810 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1970:	4628      	mov	r0, r5
 80a1972:	f000 ff9e 	bl	80a28b2 <strlen>
 80a1976:	2700      	movs	r7, #0
 80a1978:	b281      	uxth	r1, r0
 80a197a:	6873      	ldr	r3, [r6, #4]
 80a197c:	4628      	mov	r0, r5
 80a197e:	9700      	str	r7, [sp, #0]
 80a1980:	aa03      	add	r2, sp, #12
 80a1982:	f7fe ff15 	bl	80a07b0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1986:	b130      	cbz	r0, 80a1996 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a1988:	4639      	mov	r1, r7
 80a198a:	4620      	mov	r0, r4
 80a198c:	f7ff fe3a 	bl	80a1604 <_ZN9IPAddressC1Em>
    }
 80a1990:	4620      	mov	r0, r4
 80a1992:	b009      	add	sp, #36	; 0x24
 80a1994:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1996:	4620      	mov	r0, r4
 80a1998:	a903      	add	r1, sp, #12
 80a199a:	f7ff fe21 	bl	80a15e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a199e:	e7f7      	b.n	80a1990 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a19a0 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a19a0:	2200      	movs	r2, #0
 80a19a2:	6840      	ldr	r0, [r0, #4]
 80a19a4:	4611      	mov	r1, r2
 80a19a6:	f7fe bf87 	b.w	80a08b8 <network_listening>

080a19aa <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a19aa:	2200      	movs	r2, #0
 80a19ac:	6840      	ldr	r0, [r0, #4]
 80a19ae:	4611      	mov	r1, r2
 80a19b0:	f7fe bf92 	b.w	80a08d8 <network_get_listen_timeout>

080a19b4 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a19b4:	2200      	movs	r2, #0
 80a19b6:	6840      	ldr	r0, [r0, #4]
 80a19b8:	f7fe bf86 	b.w	80a08c8 <network_set_listen_timeout>

080a19bc <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a19bc:	2200      	movs	r2, #0
 80a19be:	6840      	ldr	r0, [r0, #4]
 80a19c0:	f081 0101 	eor.w	r1, r1, #1
 80a19c4:	f7fe bf70 	b.w	80a08a8 <network_listen>

080a19c8 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a19c8:	2300      	movs	r3, #0
 80a19ca:	6840      	ldr	r0, [r0, #4]
 80a19cc:	461a      	mov	r2, r3
 80a19ce:	4619      	mov	r1, r3
 80a19d0:	f7fe bf62 	b.w	80a0898 <network_off>

080a19d4 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a19d4:	2300      	movs	r3, #0
 80a19d6:	6840      	ldr	r0, [r0, #4]
 80a19d8:	461a      	mov	r2, r3
 80a19da:	4619      	mov	r1, r3
 80a19dc:	f7fe bf54 	b.w	80a0888 <network_on>

080a19e0 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a19e0:	2200      	movs	r2, #0
 80a19e2:	6840      	ldr	r0, [r0, #4]
 80a19e4:	4611      	mov	r1, r2
 80a19e6:	f7fe bf37 	b.w	80a0858 <network_connecting>

080a19ea <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a19ea:	2200      	movs	r2, #0
 80a19ec:	2102      	movs	r1, #2
 80a19ee:	6840      	ldr	r0, [r0, #4]
 80a19f0:	f7fe bf3a 	b.w	80a0868 <network_disconnect>

080a19f4 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a19f4:	2300      	movs	r3, #0
 80a19f6:	6840      	ldr	r0, [r0, #4]
 80a19f8:	461a      	mov	r2, r3
 80a19fa:	f7fe bf25 	b.w	80a0848 <network_connect>
	...

080a1a00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1a00:	2204      	movs	r2, #4
 80a1a02:	4b02      	ldr	r3, [pc, #8]	; (80a1a0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1a04:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1a06:	4a02      	ldr	r2, [pc, #8]	; (80a1a10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1a08:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a1a0a:	4770      	bx	lr
 80a1a0c:	2000040c 	.word	0x2000040c
 80a1a10:	080a2c20 	.word	0x080a2c20

080a1a14 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1a14:	2300      	movs	r3, #0
 80a1a16:	6840      	ldr	r0, [r0, #4]
 80a1a18:	461a      	mov	r2, r3
 80a1a1a:	f7fe bf15 	b.w	80a0848 <network_connect>

080a1a1e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1a1e:	2200      	movs	r2, #0
 80a1a20:	2102      	movs	r1, #2
 80a1a22:	6840      	ldr	r0, [r0, #4]
 80a1a24:	f7fe bf20 	b.w	80a0868 <network_disconnect>

080a1a28 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1a28:	2200      	movs	r2, #0
 80a1a2a:	6840      	ldr	r0, [r0, #4]
 80a1a2c:	4611      	mov	r1, r2
 80a1a2e:	f7fe bf13 	b.w	80a0858 <network_connecting>

080a1a32 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1a32:	2200      	movs	r2, #0
 80a1a34:	6840      	ldr	r0, [r0, #4]
 80a1a36:	4611      	mov	r1, r2
 80a1a38:	f7fe bf1e 	b.w	80a0878 <network_ready>

080a1a3c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1a3c:	2300      	movs	r3, #0
 80a1a3e:	6840      	ldr	r0, [r0, #4]
 80a1a40:	461a      	mov	r2, r3
 80a1a42:	4619      	mov	r1, r3
 80a1a44:	f7fe bf20 	b.w	80a0888 <network_on>

080a1a48 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1a48:	2300      	movs	r3, #0
 80a1a4a:	6840      	ldr	r0, [r0, #4]
 80a1a4c:	461a      	mov	r2, r3
 80a1a4e:	4619      	mov	r1, r3
 80a1a50:	f7fe bf22 	b.w	80a0898 <network_off>

080a1a54 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a1a54:	2100      	movs	r1, #0
 80a1a56:	6840      	ldr	r0, [r0, #4]
 80a1a58:	f7fe bf46 	b.w	80a08e8 <network_is_on>

080a1a5c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a1a5c:	2100      	movs	r1, #0
 80a1a5e:	6840      	ldr	r0, [r0, #4]
 80a1a60:	f7fe bf4a 	b.w	80a08f8 <network_is_off>

080a1a64 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1a64:	2200      	movs	r2, #0
 80a1a66:	6840      	ldr	r0, [r0, #4]
 80a1a68:	f081 0101 	eor.w	r1, r1, #1
 80a1a6c:	f7fe bf1c 	b.w	80a08a8 <network_listen>

080a1a70 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1a70:	2200      	movs	r2, #0
 80a1a72:	6840      	ldr	r0, [r0, #4]
 80a1a74:	f7fe bf28 	b.w	80a08c8 <network_set_listen_timeout>

080a1a78 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1a78:	2200      	movs	r2, #0
 80a1a7a:	6840      	ldr	r0, [r0, #4]
 80a1a7c:	4611      	mov	r1, r2
 80a1a7e:	f7fe bf2b 	b.w	80a08d8 <network_get_listen_timeout>

080a1a82 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1a82:	2200      	movs	r2, #0
 80a1a84:	6840      	ldr	r0, [r0, #4]
 80a1a86:	4611      	mov	r1, r2
 80a1a88:	f7fe bf16 	b.w	80a08b8 <network_listening>

080a1a8c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1a8c:	b570      	push	{r4, r5, r6, lr}
 80a1a8e:	4615      	mov	r5, r2
 80a1a90:	b08e      	sub	sp, #56	; 0x38
 80a1a92:	4604      	mov	r4, r0
    IPAddress addr;
 80a1a94:	a808      	add	r0, sp, #32
 80a1a96:	f7ff fd95 	bl	80a15c4 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a1a9a:	2211      	movs	r2, #17
 80a1a9c:	2100      	movs	r1, #0
 80a1a9e:	a803      	add	r0, sp, #12
 80a1aa0:	f000 feb6 	bl	80a2810 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1aa4:	2600      	movs	r6, #0
 80a1aa6:	4628      	mov	r0, r5
 80a1aa8:	f000 ff03 	bl	80a28b2 <strlen>
 80a1aac:	4b0a      	ldr	r3, [pc, #40]	; (80a1ad8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1aae:	9600      	str	r6, [sp, #0]
 80a1ab0:	b281      	uxth	r1, r0
 80a1ab2:	685b      	ldr	r3, [r3, #4]
 80a1ab4:	4628      	mov	r0, r5
 80a1ab6:	aa03      	add	r2, sp, #12
 80a1ab8:	f7fe fe7a 	bl	80a07b0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1abc:	b130      	cbz	r0, 80a1acc <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a1abe:	4631      	mov	r1, r6
 80a1ac0:	4620      	mov	r0, r4
 80a1ac2:	f7ff fd9f 	bl	80a1604 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1ac6:	4620      	mov	r0, r4
 80a1ac8:	b00e      	add	sp, #56	; 0x38
 80a1aca:	bd70      	pop	{r4, r5, r6, pc}
 80a1acc:	4620      	mov	r0, r4
 80a1ace:	a903      	add	r1, sp, #12
 80a1ad0:	f7ff fd86 	bl	80a15e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1ad4:	e7f7      	b.n	80a1ac6 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1ad6:	bf00      	nop
 80a1ad8:	2000040c 	.word	0x2000040c

080a1adc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1adc:	4b02      	ldr	r3, [pc, #8]	; (80a1ae8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1ade:	4a03      	ldr	r2, [pc, #12]	; (80a1aec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1ae0:	601a      	str	r2, [r3, #0]
 80a1ae2:	2200      	movs	r2, #0
 80a1ae4:	605a      	str	r2, [r3, #4]

} // spark
 80a1ae6:	4770      	bx	lr
 80a1ae8:	20000414 	.word	0x20000414
 80a1aec:	080a2c5c 	.word	0x080a2c5c

080a1af0 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1af0:	4b02      	ldr	r3, [pc, #8]	; (80a1afc <__tcf_0+0xc>)
 80a1af2:	6898      	ldr	r0, [r3, #8]
 80a1af4:	b108      	cbz	r0, 80a1afa <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a1af6:	f7fe bd69 	b.w	80a05cc <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a1afa:	4770      	bx	lr
 80a1afc:	20000420 	.word	0x20000420

080a1b00 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a1b00:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a1b02:	b570      	push	{r4, r5, r6, lr}
 80a1b04:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a1b06:	d901      	bls.n	80a1b0c <pinAvailable+0xc>
    return false;
 80a1b08:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a1b0a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1b0c:	f1a0 030d 	sub.w	r3, r0, #13
 80a1b10:	2b02      	cmp	r3, #2
 80a1b12:	d90b      	bls.n	80a1b2c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a1b14:	2801      	cmp	r0, #1
 80a1b16:	d824      	bhi.n	80a1b62 <pinAvailable+0x62>
 80a1b18:	f000 f8be 	bl	80a1c98 <_Z19__fetch_global_Wirev>
 80a1b1c:	2100      	movs	r1, #0
 80a1b1e:	7c00      	ldrb	r0, [r0, #16]
 80a1b20:	f7fe fdec 	bl	80a06fc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1b24:	f080 0001 	eor.w	r0, r0, #1
 80a1b28:	b2c0      	uxtb	r0, r0
 80a1b2a:	e7ee      	b.n	80a1b0a <pinAvailable+0xa>
 80a1b2c:	4e12      	ldr	r6, [pc, #72]	; (80a1b78 <pinAvailable+0x78>)
 80a1b2e:	7831      	ldrb	r1, [r6, #0]
 80a1b30:	f3bf 8f5b 	dmb	ish
 80a1b34:	f011 0501 	ands.w	r5, r1, #1
 80a1b38:	d10d      	bne.n	80a1b56 <pinAvailable+0x56>
 80a1b3a:	4630      	mov	r0, r6
 80a1b3c:	f7fe fab1 	bl	80a00a2 <__cxa_guard_acquire>
 80a1b40:	b148      	cbz	r0, 80a1b56 <pinAvailable+0x56>
 80a1b42:	4629      	mov	r1, r5
 80a1b44:	480d      	ldr	r0, [pc, #52]	; (80a1b7c <pinAvailable+0x7c>)
 80a1b46:	f7fe ff4f 	bl	80a09e8 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a1b4a:	4630      	mov	r0, r6
 80a1b4c:	f7fe faae 	bl	80a00ac <__cxa_guard_release>
 80a1b50:	480b      	ldr	r0, [pc, #44]	; (80a1b80 <pinAvailable+0x80>)
 80a1b52:	f000 fe45 	bl	80a27e0 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1b56:	4b09      	ldr	r3, [pc, #36]	; (80a1b7c <pinAvailable+0x7c>)
 80a1b58:	7818      	ldrb	r0, [r3, #0]
 80a1b5a:	f7fe fde9 	bl	80a0730 <hal_spi_is_enabled>
 80a1b5e:	2800      	cmp	r0, #0
 80a1b60:	d1d2      	bne.n	80a1b08 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1b62:	3c12      	subs	r4, #18
 80a1b64:	2c01      	cmp	r4, #1
 80a1b66:	d805      	bhi.n	80a1b74 <pinAvailable+0x74>
 80a1b68:	f000 f84c 	bl	80a1c04 <_Z22__fetch_global_Serial1v>
 80a1b6c:	7c00      	ldrb	r0, [r0, #16]
 80a1b6e:	f7fe fd5d 	bl	80a062c <hal_usart_is_enabled>
 80a1b72:	e7d7      	b.n	80a1b24 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a1b74:	2001      	movs	r0, #1
 80a1b76:	e7c8      	b.n	80a1b0a <pinAvailable+0xa>
 80a1b78:	2000041c 	.word	0x2000041c
 80a1b7c:	20000420 	.word	0x20000420
 80a1b80:	080a1af1 	.word	0x080a1af1

080a1b84 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1b84:	2817      	cmp	r0, #23
{
 80a1b86:	b538      	push	{r3, r4, r5, lr}
 80a1b88:	4604      	mov	r4, r0
 80a1b8a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1b8c:	d80a      	bhi.n	80a1ba4 <pinMode+0x20>
 80a1b8e:	29ff      	cmp	r1, #255	; 0xff
 80a1b90:	d008      	beq.n	80a1ba4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a1b92:	f7ff ffb5 	bl	80a1b00 <pinAvailable>
 80a1b96:	b128      	cbz	r0, 80a1ba4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a1b98:	4629      	mov	r1, r5
 80a1b9a:	4620      	mov	r0, r4
}
 80a1b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a1ba0:	f7fe bccc 	b.w	80a053c <HAL_Pin_Mode>
}
 80a1ba4:	bd38      	pop	{r3, r4, r5, pc}

080a1ba6 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a1ba6:	b510      	push	{r4, lr}
 80a1ba8:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1baa:	f7fe fccf 	bl	80a054c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a1bae:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a1bb0:	b2db      	uxtb	r3, r3
 80a1bb2:	2b01      	cmp	r3, #1
 80a1bb4:	d908      	bls.n	80a1bc8 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a1bb6:	4620      	mov	r0, r4
 80a1bb8:	f7ff ffa2 	bl	80a1b00 <pinAvailable>
 80a1bbc:	b120      	cbz	r0, 80a1bc8 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1bbe:	4620      	mov	r0, r4
}
 80a1bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a1bc4:	f7fe bcca 	b.w	80a055c <HAL_GPIO_Read>
}
 80a1bc8:	2000      	movs	r0, #0
 80a1bca:	bd10      	pop	{r4, pc}

080a1bcc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a1bcc:	4770      	bx	lr
	...

080a1bd0 <_Z20acquireSerial1Bufferv>:
{
 80a1bd0:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a1bd2:	2514      	movs	r5, #20
{
 80a1bd4:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a1bd6:	462a      	mov	r2, r5
 80a1bd8:	2100      	movs	r1, #0
 80a1bda:	f000 fe19 	bl	80a2810 <memset>
 80a1bde:	8025      	strh	r5, [r4, #0]
 80a1be0:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1be2:	4e07      	ldr	r6, [pc, #28]	; (80a1c00 <_Z20acquireSerial1Bufferv+0x30>)
 80a1be4:	4628      	mov	r0, r5
 80a1be6:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a1be8:	8125      	strh	r5, [r4, #8]
 80a1bea:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1bec:	f000 f878 	bl	80a1ce0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1bf0:	4631      	mov	r1, r6
    };
 80a1bf2:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1bf4:	4628      	mov	r0, r5
 80a1bf6:	f000 f873 	bl	80a1ce0 <_ZnajRKSt9nothrow_t>
    };
 80a1bfa:	60e0      	str	r0, [r4, #12]
}
 80a1bfc:	4620      	mov	r0, r4
 80a1bfe:	bd70      	pop	{r4, r5, r6, pc}
 80a1c00:	080a2c90 	.word	0x080a2c90

080a1c04 <_Z22__fetch_global_Serial1v>:
{
 80a1c04:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a1c06:	4d0e      	ldr	r5, [pc, #56]	; (80a1c40 <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a1c08:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a1c0a:	7829      	ldrb	r1, [r5, #0]
 80a1c0c:	f3bf 8f5b 	dmb	ish
 80a1c10:	f011 0401 	ands.w	r4, r1, #1
 80a1c14:	d111      	bne.n	80a1c3a <_Z22__fetch_global_Serial1v+0x36>
 80a1c16:	4628      	mov	r0, r5
 80a1c18:	f7fe fa43 	bl	80a00a2 <__cxa_guard_acquire>
 80a1c1c:	b168      	cbz	r0, 80a1c3a <_Z22__fetch_global_Serial1v+0x36>
 80a1c1e:	a801      	add	r0, sp, #4
 80a1c20:	f7ff ffd6 	bl	80a1bd0 <_Z20acquireSerial1Bufferv>
 80a1c24:	4621      	mov	r1, r4
 80a1c26:	aa01      	add	r2, sp, #4
 80a1c28:	4806      	ldr	r0, [pc, #24]	; (80a1c44 <_Z22__fetch_global_Serial1v+0x40>)
 80a1c2a:	f7ff fe13 	bl	80a1854 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a1c2e:	4628      	mov	r0, r5
 80a1c30:	f7fe fa3c 	bl	80a00ac <__cxa_guard_release>
 80a1c34:	4804      	ldr	r0, [pc, #16]	; (80a1c48 <_Z22__fetch_global_Serial1v+0x44>)
 80a1c36:	f000 fdd3 	bl	80a27e0 <atexit>
    return serial1;
}
 80a1c3a:	4802      	ldr	r0, [pc, #8]	; (80a1c44 <_Z22__fetch_global_Serial1v+0x40>)
 80a1c3c:	b007      	add	sp, #28
 80a1c3e:	bd30      	pop	{r4, r5, pc}
 80a1c40:	2000042c 	.word	0x2000042c
 80a1c44:	20000430 	.word	0x20000430
 80a1c48:	080a1bcd 	.word	0x080a1bcd

080a1c4c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1c4c:	2300      	movs	r3, #0
 80a1c4e:	b507      	push	{r0, r1, r2, lr}
 80a1c50:	461a      	mov	r2, r3
 80a1c52:	4619      	mov	r1, r3
 80a1c54:	9300      	str	r3, [sp, #0]
 80a1c56:	4803      	ldr	r0, [pc, #12]	; (80a1c64 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a1c58:	f7ff fcea 	bl	80a1630 <_ZN9IPAddressC1Ehhhh>
 80a1c5c:	b003      	add	sp, #12
 80a1c5e:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1c62:	bf00      	nop
 80a1c64:	20000448 	.word	0x20000448

080a1c68 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1c68:	4770      	bx	lr
	...

080a1c6c <_Z17acquireWireBufferv>:
{
 80a1c6c:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a1c6e:	2314      	movs	r3, #20
 80a1c70:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1c72:	4e08      	ldr	r6, [pc, #32]	; (80a1c94 <_Z17acquireWireBufferv+0x28>)
{
 80a1c74:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a1c76:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1c78:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a1c7a:	6085      	str	r5, [r0, #8]
 80a1c7c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1c7e:	4628      	mov	r0, r5
 80a1c80:	f000 f82e 	bl	80a1ce0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1c84:	4631      	mov	r1, r6
	};
 80a1c86:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1c88:	4628      	mov	r0, r5
 80a1c8a:	f000 f829 	bl	80a1ce0 <_ZnajRKSt9nothrow_t>
	};
 80a1c8e:	60e0      	str	r0, [r4, #12]
}
 80a1c90:	4620      	mov	r0, r4
 80a1c92:	bd70      	pop	{r4, r5, r6, pc}
 80a1c94:	080a2c90 	.word	0x080a2c90

080a1c98 <_Z19__fetch_global_Wirev>:
{
 80a1c98:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1c9a:	4d0e      	ldr	r5, [pc, #56]	; (80a1cd4 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a1c9c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1c9e:	7829      	ldrb	r1, [r5, #0]
 80a1ca0:	f3bf 8f5b 	dmb	ish
 80a1ca4:	f011 0401 	ands.w	r4, r1, #1
 80a1ca8:	d111      	bne.n	80a1cce <_Z19__fetch_global_Wirev+0x36>
 80a1caa:	4628      	mov	r0, r5
 80a1cac:	f7fe f9f9 	bl	80a00a2 <__cxa_guard_acquire>
 80a1cb0:	b168      	cbz	r0, 80a1cce <_Z19__fetch_global_Wirev+0x36>
 80a1cb2:	a801      	add	r0, sp, #4
 80a1cb4:	f7ff ffda 	bl	80a1c6c <_Z17acquireWireBufferv>
 80a1cb8:	4621      	mov	r1, r4
 80a1cba:	aa01      	add	r2, sp, #4
 80a1cbc:	4806      	ldr	r0, [pc, #24]	; (80a1cd8 <_Z19__fetch_global_Wirev+0x40>)
 80a1cbe:	f7ff fe1d 	bl	80a18fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a1cc2:	4628      	mov	r0, r5
 80a1cc4:	f7fe f9f2 	bl	80a00ac <__cxa_guard_release>
 80a1cc8:	4804      	ldr	r0, [pc, #16]	; (80a1cdc <_Z19__fetch_global_Wirev+0x44>)
 80a1cca:	f000 fd89 	bl	80a27e0 <atexit>
	return wire;
}
 80a1cce:	4802      	ldr	r0, [pc, #8]	; (80a1cd8 <_Z19__fetch_global_Wirev+0x40>)
 80a1cd0:	b007      	add	sp, #28
 80a1cd2:	bd30      	pop	{r4, r5, pc}
 80a1cd4:	20000460 	.word	0x20000460
 80a1cd8:	20000464 	.word	0x20000464
 80a1cdc:	080a1c69 	.word	0x080a1c69

080a1ce0 <_ZnajRKSt9nothrow_t>:
 80a1ce0:	f7fe b9db 	b.w	80a009a <_Znaj>

080a1ce4 <_ZSt25__throw_bad_function_callv>:
 80a1ce4:	b508      	push	{r3, lr}
 80a1ce6:	f7fe fe57 	bl	80a0998 <abort>
	...

080a1cec <__aeabi_drsub>:
 80a1cec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1cf0:	e002      	b.n	80a1cf8 <__adddf3>
 80a1cf2:	bf00      	nop

080a1cf4 <__aeabi_dsub>:
 80a1cf4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1cf8 <__adddf3>:
 80a1cf8:	b530      	push	{r4, r5, lr}
 80a1cfa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1cfe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1d02:	ea94 0f05 	teq	r4, r5
 80a1d06:	bf08      	it	eq
 80a1d08:	ea90 0f02 	teqeq	r0, r2
 80a1d0c:	bf1f      	itttt	ne
 80a1d0e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1d12:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1d16:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1d1a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1d1e:	f000 80e2 	beq.w	80a1ee6 <__adddf3+0x1ee>
 80a1d22:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1d26:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1d2a:	bfb8      	it	lt
 80a1d2c:	426d      	neglt	r5, r5
 80a1d2e:	dd0c      	ble.n	80a1d4a <__adddf3+0x52>
 80a1d30:	442c      	add	r4, r5
 80a1d32:	ea80 0202 	eor.w	r2, r0, r2
 80a1d36:	ea81 0303 	eor.w	r3, r1, r3
 80a1d3a:	ea82 0000 	eor.w	r0, r2, r0
 80a1d3e:	ea83 0101 	eor.w	r1, r3, r1
 80a1d42:	ea80 0202 	eor.w	r2, r0, r2
 80a1d46:	ea81 0303 	eor.w	r3, r1, r3
 80a1d4a:	2d36      	cmp	r5, #54	; 0x36
 80a1d4c:	bf88      	it	hi
 80a1d4e:	bd30      	pophi	{r4, r5, pc}
 80a1d50:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1d54:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1d58:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1d5c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1d60:	d002      	beq.n	80a1d68 <__adddf3+0x70>
 80a1d62:	4240      	negs	r0, r0
 80a1d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1d68:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1d6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1d70:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1d74:	d002      	beq.n	80a1d7c <__adddf3+0x84>
 80a1d76:	4252      	negs	r2, r2
 80a1d78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1d7c:	ea94 0f05 	teq	r4, r5
 80a1d80:	f000 80a7 	beq.w	80a1ed2 <__adddf3+0x1da>
 80a1d84:	f1a4 0401 	sub.w	r4, r4, #1
 80a1d88:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1d8c:	db0d      	blt.n	80a1daa <__adddf3+0xb2>
 80a1d8e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1d92:	fa22 f205 	lsr.w	r2, r2, r5
 80a1d96:	1880      	adds	r0, r0, r2
 80a1d98:	f141 0100 	adc.w	r1, r1, #0
 80a1d9c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1da0:	1880      	adds	r0, r0, r2
 80a1da2:	fa43 f305 	asr.w	r3, r3, r5
 80a1da6:	4159      	adcs	r1, r3
 80a1da8:	e00e      	b.n	80a1dc8 <__adddf3+0xd0>
 80a1daa:	f1a5 0520 	sub.w	r5, r5, #32
 80a1dae:	f10e 0e20 	add.w	lr, lr, #32
 80a1db2:	2a01      	cmp	r2, #1
 80a1db4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1db8:	bf28      	it	cs
 80a1dba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1dbe:	fa43 f305 	asr.w	r3, r3, r5
 80a1dc2:	18c0      	adds	r0, r0, r3
 80a1dc4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1dc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1dcc:	d507      	bpl.n	80a1dde <__adddf3+0xe6>
 80a1dce:	f04f 0e00 	mov.w	lr, #0
 80a1dd2:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1dd6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1dda:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1dde:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1de2:	d31b      	bcc.n	80a1e1c <__adddf3+0x124>
 80a1de4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1de8:	d30c      	bcc.n	80a1e04 <__adddf3+0x10c>
 80a1dea:	0849      	lsrs	r1, r1, #1
 80a1dec:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1df0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1df4:	f104 0401 	add.w	r4, r4, #1
 80a1df8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1dfc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1e00:	f080 809a 	bcs.w	80a1f38 <__adddf3+0x240>
 80a1e04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1e08:	bf08      	it	eq
 80a1e0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1e0e:	f150 0000 	adcs.w	r0, r0, #0
 80a1e12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1e16:	ea41 0105 	orr.w	r1, r1, r5
 80a1e1a:	bd30      	pop	{r4, r5, pc}
 80a1e1c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1e20:	4140      	adcs	r0, r0
 80a1e22:	eb41 0101 	adc.w	r1, r1, r1
 80a1e26:	3c01      	subs	r4, #1
 80a1e28:	bf28      	it	cs
 80a1e2a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a1e2e:	d2e9      	bcs.n	80a1e04 <__adddf3+0x10c>
 80a1e30:	f091 0f00 	teq	r1, #0
 80a1e34:	bf04      	itt	eq
 80a1e36:	4601      	moveq	r1, r0
 80a1e38:	2000      	moveq	r0, #0
 80a1e3a:	fab1 f381 	clz	r3, r1
 80a1e3e:	bf08      	it	eq
 80a1e40:	3320      	addeq	r3, #32
 80a1e42:	f1a3 030b 	sub.w	r3, r3, #11
 80a1e46:	f1b3 0220 	subs.w	r2, r3, #32
 80a1e4a:	da0c      	bge.n	80a1e66 <__adddf3+0x16e>
 80a1e4c:	320c      	adds	r2, #12
 80a1e4e:	dd08      	ble.n	80a1e62 <__adddf3+0x16a>
 80a1e50:	f102 0c14 	add.w	ip, r2, #20
 80a1e54:	f1c2 020c 	rsb	r2, r2, #12
 80a1e58:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1e5c:	fa21 f102 	lsr.w	r1, r1, r2
 80a1e60:	e00c      	b.n	80a1e7c <__adddf3+0x184>
 80a1e62:	f102 0214 	add.w	r2, r2, #20
 80a1e66:	bfd8      	it	le
 80a1e68:	f1c2 0c20 	rsble	ip, r2, #32
 80a1e6c:	fa01 f102 	lsl.w	r1, r1, r2
 80a1e70:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1e74:	bfdc      	itt	le
 80a1e76:	ea41 010c 	orrle.w	r1, r1, ip
 80a1e7a:	4090      	lslle	r0, r2
 80a1e7c:	1ae4      	subs	r4, r4, r3
 80a1e7e:	bfa2      	ittt	ge
 80a1e80:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1e84:	4329      	orrge	r1, r5
 80a1e86:	bd30      	popge	{r4, r5, pc}
 80a1e88:	ea6f 0404 	mvn.w	r4, r4
 80a1e8c:	3c1f      	subs	r4, #31
 80a1e8e:	da1c      	bge.n	80a1eca <__adddf3+0x1d2>
 80a1e90:	340c      	adds	r4, #12
 80a1e92:	dc0e      	bgt.n	80a1eb2 <__adddf3+0x1ba>
 80a1e94:	f104 0414 	add.w	r4, r4, #20
 80a1e98:	f1c4 0220 	rsb	r2, r4, #32
 80a1e9c:	fa20 f004 	lsr.w	r0, r0, r4
 80a1ea0:	fa01 f302 	lsl.w	r3, r1, r2
 80a1ea4:	ea40 0003 	orr.w	r0, r0, r3
 80a1ea8:	fa21 f304 	lsr.w	r3, r1, r4
 80a1eac:	ea45 0103 	orr.w	r1, r5, r3
 80a1eb0:	bd30      	pop	{r4, r5, pc}
 80a1eb2:	f1c4 040c 	rsb	r4, r4, #12
 80a1eb6:	f1c4 0220 	rsb	r2, r4, #32
 80a1eba:	fa20 f002 	lsr.w	r0, r0, r2
 80a1ebe:	fa01 f304 	lsl.w	r3, r1, r4
 80a1ec2:	ea40 0003 	orr.w	r0, r0, r3
 80a1ec6:	4629      	mov	r1, r5
 80a1ec8:	bd30      	pop	{r4, r5, pc}
 80a1eca:	fa21 f004 	lsr.w	r0, r1, r4
 80a1ece:	4629      	mov	r1, r5
 80a1ed0:	bd30      	pop	{r4, r5, pc}
 80a1ed2:	f094 0f00 	teq	r4, #0
 80a1ed6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1eda:	bf06      	itte	eq
 80a1edc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1ee0:	3401      	addeq	r4, #1
 80a1ee2:	3d01      	subne	r5, #1
 80a1ee4:	e74e      	b.n	80a1d84 <__adddf3+0x8c>
 80a1ee6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1eea:	bf18      	it	ne
 80a1eec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1ef0:	d029      	beq.n	80a1f46 <__adddf3+0x24e>
 80a1ef2:	ea94 0f05 	teq	r4, r5
 80a1ef6:	bf08      	it	eq
 80a1ef8:	ea90 0f02 	teqeq	r0, r2
 80a1efc:	d005      	beq.n	80a1f0a <__adddf3+0x212>
 80a1efe:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1f02:	bf04      	itt	eq
 80a1f04:	4619      	moveq	r1, r3
 80a1f06:	4610      	moveq	r0, r2
 80a1f08:	bd30      	pop	{r4, r5, pc}
 80a1f0a:	ea91 0f03 	teq	r1, r3
 80a1f0e:	bf1e      	ittt	ne
 80a1f10:	2100      	movne	r1, #0
 80a1f12:	2000      	movne	r0, #0
 80a1f14:	bd30      	popne	{r4, r5, pc}
 80a1f16:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1f1a:	d105      	bne.n	80a1f28 <__adddf3+0x230>
 80a1f1c:	0040      	lsls	r0, r0, #1
 80a1f1e:	4149      	adcs	r1, r1
 80a1f20:	bf28      	it	cs
 80a1f22:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1f26:	bd30      	pop	{r4, r5, pc}
 80a1f28:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1f2c:	bf3c      	itt	cc
 80a1f2e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1f32:	bd30      	popcc	{r4, r5, pc}
 80a1f34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1f38:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1f3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1f40:	f04f 0000 	mov.w	r0, #0
 80a1f44:	bd30      	pop	{r4, r5, pc}
 80a1f46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1f4a:	bf1a      	itte	ne
 80a1f4c:	4619      	movne	r1, r3
 80a1f4e:	4610      	movne	r0, r2
 80a1f50:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1f54:	bf1c      	itt	ne
 80a1f56:	460b      	movne	r3, r1
 80a1f58:	4602      	movne	r2, r0
 80a1f5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1f5e:	bf06      	itte	eq
 80a1f60:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1f64:	ea91 0f03 	teqeq	r1, r3
 80a1f68:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1f6c:	bd30      	pop	{r4, r5, pc}
 80a1f6e:	bf00      	nop

080a1f70 <__aeabi_ui2d>:
 80a1f70:	f090 0f00 	teq	r0, #0
 80a1f74:	bf04      	itt	eq
 80a1f76:	2100      	moveq	r1, #0
 80a1f78:	4770      	bxeq	lr
 80a1f7a:	b530      	push	{r4, r5, lr}
 80a1f7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1f80:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1f84:	f04f 0500 	mov.w	r5, #0
 80a1f88:	f04f 0100 	mov.w	r1, #0
 80a1f8c:	e750      	b.n	80a1e30 <__adddf3+0x138>
 80a1f8e:	bf00      	nop

080a1f90 <__aeabi_i2d>:
 80a1f90:	f090 0f00 	teq	r0, #0
 80a1f94:	bf04      	itt	eq
 80a1f96:	2100      	moveq	r1, #0
 80a1f98:	4770      	bxeq	lr
 80a1f9a:	b530      	push	{r4, r5, lr}
 80a1f9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1fa0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1fa4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1fa8:	bf48      	it	mi
 80a1faa:	4240      	negmi	r0, r0
 80a1fac:	f04f 0100 	mov.w	r1, #0
 80a1fb0:	e73e      	b.n	80a1e30 <__adddf3+0x138>
 80a1fb2:	bf00      	nop

080a1fb4 <__aeabi_f2d>:
 80a1fb4:	0042      	lsls	r2, r0, #1
 80a1fb6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1fba:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1fbe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1fc2:	bf1f      	itttt	ne
 80a1fc4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1fc8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1fcc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1fd0:	4770      	bxne	lr
 80a1fd2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a1fd6:	bf08      	it	eq
 80a1fd8:	4770      	bxeq	lr
 80a1fda:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a1fde:	bf04      	itt	eq
 80a1fe0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a1fe4:	4770      	bxeq	lr
 80a1fe6:	b530      	push	{r4, r5, lr}
 80a1fe8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1fec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1ff0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1ff4:	e71c      	b.n	80a1e30 <__adddf3+0x138>
 80a1ff6:	bf00      	nop

080a1ff8 <__aeabi_ul2d>:
 80a1ff8:	ea50 0201 	orrs.w	r2, r0, r1
 80a1ffc:	bf08      	it	eq
 80a1ffe:	4770      	bxeq	lr
 80a2000:	b530      	push	{r4, r5, lr}
 80a2002:	f04f 0500 	mov.w	r5, #0
 80a2006:	e00a      	b.n	80a201e <__aeabi_l2d+0x16>

080a2008 <__aeabi_l2d>:
 80a2008:	ea50 0201 	orrs.w	r2, r0, r1
 80a200c:	bf08      	it	eq
 80a200e:	4770      	bxeq	lr
 80a2010:	b530      	push	{r4, r5, lr}
 80a2012:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2016:	d502      	bpl.n	80a201e <__aeabi_l2d+0x16>
 80a2018:	4240      	negs	r0, r0
 80a201a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a201e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2022:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2026:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a202a:	f43f aed8 	beq.w	80a1dde <__adddf3+0xe6>
 80a202e:	f04f 0203 	mov.w	r2, #3
 80a2032:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2036:	bf18      	it	ne
 80a2038:	3203      	addne	r2, #3
 80a203a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a203e:	bf18      	it	ne
 80a2040:	3203      	addne	r2, #3
 80a2042:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2046:	f1c2 0320 	rsb	r3, r2, #32
 80a204a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a204e:	fa20 f002 	lsr.w	r0, r0, r2
 80a2052:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2056:	ea40 000e 	orr.w	r0, r0, lr
 80a205a:	fa21 f102 	lsr.w	r1, r1, r2
 80a205e:	4414      	add	r4, r2
 80a2060:	e6bd      	b.n	80a1dde <__adddf3+0xe6>
 80a2062:	bf00      	nop

080a2064 <__aeabi_dmul>:
 80a2064:	b570      	push	{r4, r5, r6, lr}
 80a2066:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a206a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a206e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2072:	bf1d      	ittte	ne
 80a2074:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2078:	ea94 0f0c 	teqne	r4, ip
 80a207c:	ea95 0f0c 	teqne	r5, ip
 80a2080:	f000 f8de 	bleq	80a2240 <__aeabi_dmul+0x1dc>
 80a2084:	442c      	add	r4, r5
 80a2086:	ea81 0603 	eor.w	r6, r1, r3
 80a208a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a208e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2092:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2096:	bf18      	it	ne
 80a2098:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a209c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a20a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a20a4:	d038      	beq.n	80a2118 <__aeabi_dmul+0xb4>
 80a20a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a20aa:	f04f 0500 	mov.w	r5, #0
 80a20ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a20b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a20b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a20ba:	f04f 0600 	mov.w	r6, #0
 80a20be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a20c2:	f09c 0f00 	teq	ip, #0
 80a20c6:	bf18      	it	ne
 80a20c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a20cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a20d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a20d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a20d8:	d204      	bcs.n	80a20e4 <__aeabi_dmul+0x80>
 80a20da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a20de:	416d      	adcs	r5, r5
 80a20e0:	eb46 0606 	adc.w	r6, r6, r6
 80a20e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a20e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a20ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a20f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a20f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a20f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a20fc:	bf88      	it	hi
 80a20fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2102:	d81e      	bhi.n	80a2142 <__aeabi_dmul+0xde>
 80a2104:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2108:	bf08      	it	eq
 80a210a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a210e:	f150 0000 	adcs.w	r0, r0, #0
 80a2112:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2116:	bd70      	pop	{r4, r5, r6, pc}
 80a2118:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a211c:	ea46 0101 	orr.w	r1, r6, r1
 80a2120:	ea40 0002 	orr.w	r0, r0, r2
 80a2124:	ea81 0103 	eor.w	r1, r1, r3
 80a2128:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a212c:	bfc2      	ittt	gt
 80a212e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2132:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2136:	bd70      	popgt	{r4, r5, r6, pc}
 80a2138:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a213c:	f04f 0e00 	mov.w	lr, #0
 80a2140:	3c01      	subs	r4, #1
 80a2142:	f300 80ab 	bgt.w	80a229c <__aeabi_dmul+0x238>
 80a2146:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a214a:	bfde      	ittt	le
 80a214c:	2000      	movle	r0, #0
 80a214e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2152:	bd70      	pople	{r4, r5, r6, pc}
 80a2154:	f1c4 0400 	rsb	r4, r4, #0
 80a2158:	3c20      	subs	r4, #32
 80a215a:	da35      	bge.n	80a21c8 <__aeabi_dmul+0x164>
 80a215c:	340c      	adds	r4, #12
 80a215e:	dc1b      	bgt.n	80a2198 <__aeabi_dmul+0x134>
 80a2160:	f104 0414 	add.w	r4, r4, #20
 80a2164:	f1c4 0520 	rsb	r5, r4, #32
 80a2168:	fa00 f305 	lsl.w	r3, r0, r5
 80a216c:	fa20 f004 	lsr.w	r0, r0, r4
 80a2170:	fa01 f205 	lsl.w	r2, r1, r5
 80a2174:	ea40 0002 	orr.w	r0, r0, r2
 80a2178:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a217c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2180:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2184:	fa21 f604 	lsr.w	r6, r1, r4
 80a2188:	eb42 0106 	adc.w	r1, r2, r6
 80a218c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2190:	bf08      	it	eq
 80a2192:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2196:	bd70      	pop	{r4, r5, r6, pc}
 80a2198:	f1c4 040c 	rsb	r4, r4, #12
 80a219c:	f1c4 0520 	rsb	r5, r4, #32
 80a21a0:	fa00 f304 	lsl.w	r3, r0, r4
 80a21a4:	fa20 f005 	lsr.w	r0, r0, r5
 80a21a8:	fa01 f204 	lsl.w	r2, r1, r4
 80a21ac:	ea40 0002 	orr.w	r0, r0, r2
 80a21b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a21b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a21b8:	f141 0100 	adc.w	r1, r1, #0
 80a21bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a21c0:	bf08      	it	eq
 80a21c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a21c6:	bd70      	pop	{r4, r5, r6, pc}
 80a21c8:	f1c4 0520 	rsb	r5, r4, #32
 80a21cc:	fa00 f205 	lsl.w	r2, r0, r5
 80a21d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a21d4:	fa20 f304 	lsr.w	r3, r0, r4
 80a21d8:	fa01 f205 	lsl.w	r2, r1, r5
 80a21dc:	ea43 0302 	orr.w	r3, r3, r2
 80a21e0:	fa21 f004 	lsr.w	r0, r1, r4
 80a21e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a21e8:	fa21 f204 	lsr.w	r2, r1, r4
 80a21ec:	ea20 0002 	bic.w	r0, r0, r2
 80a21f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a21f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a21f8:	bf08      	it	eq
 80a21fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a21fe:	bd70      	pop	{r4, r5, r6, pc}
 80a2200:	f094 0f00 	teq	r4, #0
 80a2204:	d10f      	bne.n	80a2226 <__aeabi_dmul+0x1c2>
 80a2206:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a220a:	0040      	lsls	r0, r0, #1
 80a220c:	eb41 0101 	adc.w	r1, r1, r1
 80a2210:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2214:	bf08      	it	eq
 80a2216:	3c01      	subeq	r4, #1
 80a2218:	d0f7      	beq.n	80a220a <__aeabi_dmul+0x1a6>
 80a221a:	ea41 0106 	orr.w	r1, r1, r6
 80a221e:	f095 0f00 	teq	r5, #0
 80a2222:	bf18      	it	ne
 80a2224:	4770      	bxne	lr
 80a2226:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a222a:	0052      	lsls	r2, r2, #1
 80a222c:	eb43 0303 	adc.w	r3, r3, r3
 80a2230:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2234:	bf08      	it	eq
 80a2236:	3d01      	subeq	r5, #1
 80a2238:	d0f7      	beq.n	80a222a <__aeabi_dmul+0x1c6>
 80a223a:	ea43 0306 	orr.w	r3, r3, r6
 80a223e:	4770      	bx	lr
 80a2240:	ea94 0f0c 	teq	r4, ip
 80a2244:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2248:	bf18      	it	ne
 80a224a:	ea95 0f0c 	teqne	r5, ip
 80a224e:	d00c      	beq.n	80a226a <__aeabi_dmul+0x206>
 80a2250:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2254:	bf18      	it	ne
 80a2256:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a225a:	d1d1      	bne.n	80a2200 <__aeabi_dmul+0x19c>
 80a225c:	ea81 0103 	eor.w	r1, r1, r3
 80a2260:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2264:	f04f 0000 	mov.w	r0, #0
 80a2268:	bd70      	pop	{r4, r5, r6, pc}
 80a226a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a226e:	bf06      	itte	eq
 80a2270:	4610      	moveq	r0, r2
 80a2272:	4619      	moveq	r1, r3
 80a2274:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2278:	d019      	beq.n	80a22ae <__aeabi_dmul+0x24a>
 80a227a:	ea94 0f0c 	teq	r4, ip
 80a227e:	d102      	bne.n	80a2286 <__aeabi_dmul+0x222>
 80a2280:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2284:	d113      	bne.n	80a22ae <__aeabi_dmul+0x24a>
 80a2286:	ea95 0f0c 	teq	r5, ip
 80a228a:	d105      	bne.n	80a2298 <__aeabi_dmul+0x234>
 80a228c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2290:	bf1c      	itt	ne
 80a2292:	4610      	movne	r0, r2
 80a2294:	4619      	movne	r1, r3
 80a2296:	d10a      	bne.n	80a22ae <__aeabi_dmul+0x24a>
 80a2298:	ea81 0103 	eor.w	r1, r1, r3
 80a229c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a22a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a22a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a22a8:	f04f 0000 	mov.w	r0, #0
 80a22ac:	bd70      	pop	{r4, r5, r6, pc}
 80a22ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a22b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a22b6:	bd70      	pop	{r4, r5, r6, pc}

080a22b8 <__aeabi_ddiv>:
 80a22b8:	b570      	push	{r4, r5, r6, lr}
 80a22ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a22be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a22c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a22c6:	bf1d      	ittte	ne
 80a22c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a22cc:	ea94 0f0c 	teqne	r4, ip
 80a22d0:	ea95 0f0c 	teqne	r5, ip
 80a22d4:	f000 f8a7 	bleq	80a2426 <__aeabi_ddiv+0x16e>
 80a22d8:	eba4 0405 	sub.w	r4, r4, r5
 80a22dc:	ea81 0e03 	eor.w	lr, r1, r3
 80a22e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a22e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a22e8:	f000 8088 	beq.w	80a23fc <__aeabi_ddiv+0x144>
 80a22ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a22f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a22f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a22f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a22fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2300:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2304:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2308:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a230c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2310:	429d      	cmp	r5, r3
 80a2312:	bf08      	it	eq
 80a2314:	4296      	cmpeq	r6, r2
 80a2316:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a231a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a231e:	d202      	bcs.n	80a2326 <__aeabi_ddiv+0x6e>
 80a2320:	085b      	lsrs	r3, r3, #1
 80a2322:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2326:	1ab6      	subs	r6, r6, r2
 80a2328:	eb65 0503 	sbc.w	r5, r5, r3
 80a232c:	085b      	lsrs	r3, r3, #1
 80a232e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2332:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2336:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a233a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a233e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2342:	bf22      	ittt	cs
 80a2344:	1ab6      	subcs	r6, r6, r2
 80a2346:	4675      	movcs	r5, lr
 80a2348:	ea40 000c 	orrcs.w	r0, r0, ip
 80a234c:	085b      	lsrs	r3, r3, #1
 80a234e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2352:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2356:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a235a:	bf22      	ittt	cs
 80a235c:	1ab6      	subcs	r6, r6, r2
 80a235e:	4675      	movcs	r5, lr
 80a2360:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2364:	085b      	lsrs	r3, r3, #1
 80a2366:	ea4f 0232 	mov.w	r2, r2, rrx
 80a236a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a236e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2372:	bf22      	ittt	cs
 80a2374:	1ab6      	subcs	r6, r6, r2
 80a2376:	4675      	movcs	r5, lr
 80a2378:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a237c:	085b      	lsrs	r3, r3, #1
 80a237e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2382:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2386:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a238a:	bf22      	ittt	cs
 80a238c:	1ab6      	subcs	r6, r6, r2
 80a238e:	4675      	movcs	r5, lr
 80a2390:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2394:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2398:	d018      	beq.n	80a23cc <__aeabi_ddiv+0x114>
 80a239a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a239e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a23a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a23a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a23aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a23ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a23b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a23b6:	d1c0      	bne.n	80a233a <__aeabi_ddiv+0x82>
 80a23b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a23bc:	d10b      	bne.n	80a23d6 <__aeabi_ddiv+0x11e>
 80a23be:	ea41 0100 	orr.w	r1, r1, r0
 80a23c2:	f04f 0000 	mov.w	r0, #0
 80a23c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a23ca:	e7b6      	b.n	80a233a <__aeabi_ddiv+0x82>
 80a23cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a23d0:	bf04      	itt	eq
 80a23d2:	4301      	orreq	r1, r0
 80a23d4:	2000      	moveq	r0, #0
 80a23d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a23da:	bf88      	it	hi
 80a23dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a23e0:	f63f aeaf 	bhi.w	80a2142 <__aeabi_dmul+0xde>
 80a23e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80a23e8:	bf04      	itt	eq
 80a23ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a23ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a23f2:	f150 0000 	adcs.w	r0, r0, #0
 80a23f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a23fa:	bd70      	pop	{r4, r5, r6, pc}
 80a23fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2400:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2404:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2408:	bfc2      	ittt	gt
 80a240a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a240e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2412:	bd70      	popgt	{r4, r5, r6, pc}
 80a2414:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2418:	f04f 0e00 	mov.w	lr, #0
 80a241c:	3c01      	subs	r4, #1
 80a241e:	e690      	b.n	80a2142 <__aeabi_dmul+0xde>
 80a2420:	ea45 0e06 	orr.w	lr, r5, r6
 80a2424:	e68d      	b.n	80a2142 <__aeabi_dmul+0xde>
 80a2426:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a242a:	ea94 0f0c 	teq	r4, ip
 80a242e:	bf08      	it	eq
 80a2430:	ea95 0f0c 	teqeq	r5, ip
 80a2434:	f43f af3b 	beq.w	80a22ae <__aeabi_dmul+0x24a>
 80a2438:	ea94 0f0c 	teq	r4, ip
 80a243c:	d10a      	bne.n	80a2454 <__aeabi_ddiv+0x19c>
 80a243e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2442:	f47f af34 	bne.w	80a22ae <__aeabi_dmul+0x24a>
 80a2446:	ea95 0f0c 	teq	r5, ip
 80a244a:	f47f af25 	bne.w	80a2298 <__aeabi_dmul+0x234>
 80a244e:	4610      	mov	r0, r2
 80a2450:	4619      	mov	r1, r3
 80a2452:	e72c      	b.n	80a22ae <__aeabi_dmul+0x24a>
 80a2454:	ea95 0f0c 	teq	r5, ip
 80a2458:	d106      	bne.n	80a2468 <__aeabi_ddiv+0x1b0>
 80a245a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a245e:	f43f aefd 	beq.w	80a225c <__aeabi_dmul+0x1f8>
 80a2462:	4610      	mov	r0, r2
 80a2464:	4619      	mov	r1, r3
 80a2466:	e722      	b.n	80a22ae <__aeabi_dmul+0x24a>
 80a2468:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a246c:	bf18      	it	ne
 80a246e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2472:	f47f aec5 	bne.w	80a2200 <__aeabi_dmul+0x19c>
 80a2476:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a247a:	f47f af0d 	bne.w	80a2298 <__aeabi_dmul+0x234>
 80a247e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2482:	f47f aeeb 	bne.w	80a225c <__aeabi_dmul+0x1f8>
 80a2486:	e712      	b.n	80a22ae <__aeabi_dmul+0x24a>

080a2488 <__gedf2>:
 80a2488:	f04f 3cff 	mov.w	ip, #4294967295
 80a248c:	e006      	b.n	80a249c <__cmpdf2+0x4>
 80a248e:	bf00      	nop

080a2490 <__ledf2>:
 80a2490:	f04f 0c01 	mov.w	ip, #1
 80a2494:	e002      	b.n	80a249c <__cmpdf2+0x4>
 80a2496:	bf00      	nop

080a2498 <__cmpdf2>:
 80a2498:	f04f 0c01 	mov.w	ip, #1
 80a249c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a24a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a24a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a24a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a24ac:	bf18      	it	ne
 80a24ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a24b2:	d01b      	beq.n	80a24ec <__cmpdf2+0x54>
 80a24b4:	b001      	add	sp, #4
 80a24b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a24ba:	bf0c      	ite	eq
 80a24bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a24c0:	ea91 0f03 	teqne	r1, r3
 80a24c4:	bf02      	ittt	eq
 80a24c6:	ea90 0f02 	teqeq	r0, r2
 80a24ca:	2000      	moveq	r0, #0
 80a24cc:	4770      	bxeq	lr
 80a24ce:	f110 0f00 	cmn.w	r0, #0
 80a24d2:	ea91 0f03 	teq	r1, r3
 80a24d6:	bf58      	it	pl
 80a24d8:	4299      	cmppl	r1, r3
 80a24da:	bf08      	it	eq
 80a24dc:	4290      	cmpeq	r0, r2
 80a24de:	bf2c      	ite	cs
 80a24e0:	17d8      	asrcs	r0, r3, #31
 80a24e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a24e6:	f040 0001 	orr.w	r0, r0, #1
 80a24ea:	4770      	bx	lr
 80a24ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a24f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a24f4:	d102      	bne.n	80a24fc <__cmpdf2+0x64>
 80a24f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a24fa:	d107      	bne.n	80a250c <__cmpdf2+0x74>
 80a24fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2500:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2504:	d1d6      	bne.n	80a24b4 <__cmpdf2+0x1c>
 80a2506:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a250a:	d0d3      	beq.n	80a24b4 <__cmpdf2+0x1c>
 80a250c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2510:	4770      	bx	lr
 80a2512:	bf00      	nop

080a2514 <__aeabi_cdrcmple>:
 80a2514:	4684      	mov	ip, r0
 80a2516:	4610      	mov	r0, r2
 80a2518:	4662      	mov	r2, ip
 80a251a:	468c      	mov	ip, r1
 80a251c:	4619      	mov	r1, r3
 80a251e:	4663      	mov	r3, ip
 80a2520:	e000      	b.n	80a2524 <__aeabi_cdcmpeq>
 80a2522:	bf00      	nop

080a2524 <__aeabi_cdcmpeq>:
 80a2524:	b501      	push	{r0, lr}
 80a2526:	f7ff ffb7 	bl	80a2498 <__cmpdf2>
 80a252a:	2800      	cmp	r0, #0
 80a252c:	bf48      	it	mi
 80a252e:	f110 0f00 	cmnmi.w	r0, #0
 80a2532:	bd01      	pop	{r0, pc}

080a2534 <__aeabi_dcmpeq>:
 80a2534:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2538:	f7ff fff4 	bl	80a2524 <__aeabi_cdcmpeq>
 80a253c:	bf0c      	ite	eq
 80a253e:	2001      	moveq	r0, #1
 80a2540:	2000      	movne	r0, #0
 80a2542:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2546:	bf00      	nop

080a2548 <__aeabi_dcmplt>:
 80a2548:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a254c:	f7ff ffea 	bl	80a2524 <__aeabi_cdcmpeq>
 80a2550:	bf34      	ite	cc
 80a2552:	2001      	movcc	r0, #1
 80a2554:	2000      	movcs	r0, #0
 80a2556:	f85d fb08 	ldr.w	pc, [sp], #8
 80a255a:	bf00      	nop

080a255c <__aeabi_dcmple>:
 80a255c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2560:	f7ff ffe0 	bl	80a2524 <__aeabi_cdcmpeq>
 80a2564:	bf94      	ite	ls
 80a2566:	2001      	movls	r0, #1
 80a2568:	2000      	movhi	r0, #0
 80a256a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a256e:	bf00      	nop

080a2570 <__aeabi_dcmpge>:
 80a2570:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2574:	f7ff ffce 	bl	80a2514 <__aeabi_cdrcmple>
 80a2578:	bf94      	ite	ls
 80a257a:	2001      	movls	r0, #1
 80a257c:	2000      	movhi	r0, #0
 80a257e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2582:	bf00      	nop

080a2584 <__aeabi_dcmpgt>:
 80a2584:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2588:	f7ff ffc4 	bl	80a2514 <__aeabi_cdrcmple>
 80a258c:	bf34      	ite	cc
 80a258e:	2001      	movcc	r0, #1
 80a2590:	2000      	movcs	r0, #0
 80a2592:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2596:	bf00      	nop

080a2598 <__aeabi_dcmpun>:
 80a2598:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a259c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a25a0:	d102      	bne.n	80a25a8 <__aeabi_dcmpun+0x10>
 80a25a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a25a6:	d10a      	bne.n	80a25be <__aeabi_dcmpun+0x26>
 80a25a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a25ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a25b0:	d102      	bne.n	80a25b8 <__aeabi_dcmpun+0x20>
 80a25b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a25b6:	d102      	bne.n	80a25be <__aeabi_dcmpun+0x26>
 80a25b8:	f04f 0000 	mov.w	r0, #0
 80a25bc:	4770      	bx	lr
 80a25be:	f04f 0001 	mov.w	r0, #1
 80a25c2:	4770      	bx	lr

080a25c4 <__aeabi_d2iz>:
 80a25c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a25c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a25cc:	d215      	bcs.n	80a25fa <__aeabi_d2iz+0x36>
 80a25ce:	d511      	bpl.n	80a25f4 <__aeabi_d2iz+0x30>
 80a25d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a25d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a25d8:	d912      	bls.n	80a2600 <__aeabi_d2iz+0x3c>
 80a25da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a25de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a25e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a25e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a25ea:	fa23 f002 	lsr.w	r0, r3, r2
 80a25ee:	bf18      	it	ne
 80a25f0:	4240      	negne	r0, r0
 80a25f2:	4770      	bx	lr
 80a25f4:	f04f 0000 	mov.w	r0, #0
 80a25f8:	4770      	bx	lr
 80a25fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a25fe:	d105      	bne.n	80a260c <__aeabi_d2iz+0x48>
 80a2600:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a2604:	bf08      	it	eq
 80a2606:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a260a:	4770      	bx	lr
 80a260c:	f04f 0000 	mov.w	r0, #0
 80a2610:	4770      	bx	lr
 80a2612:	bf00      	nop

080a2614 <__aeabi_d2uiz>:
 80a2614:	004a      	lsls	r2, r1, #1
 80a2616:	d211      	bcs.n	80a263c <__aeabi_d2uiz+0x28>
 80a2618:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a261c:	d211      	bcs.n	80a2642 <__aeabi_d2uiz+0x2e>
 80a261e:	d50d      	bpl.n	80a263c <__aeabi_d2uiz+0x28>
 80a2620:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2624:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2628:	d40e      	bmi.n	80a2648 <__aeabi_d2uiz+0x34>
 80a262a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a262e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2632:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2636:	fa23 f002 	lsr.w	r0, r3, r2
 80a263a:	4770      	bx	lr
 80a263c:	f04f 0000 	mov.w	r0, #0
 80a2640:	4770      	bx	lr
 80a2642:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2646:	d102      	bne.n	80a264e <__aeabi_d2uiz+0x3a>
 80a2648:	f04f 30ff 	mov.w	r0, #4294967295
 80a264c:	4770      	bx	lr
 80a264e:	f04f 0000 	mov.w	r0, #0
 80a2652:	4770      	bx	lr

080a2654 <__aeabi_d2f>:
 80a2654:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2658:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a265c:	bf24      	itt	cs
 80a265e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a2662:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a2666:	d90d      	bls.n	80a2684 <__aeabi_d2f+0x30>
 80a2668:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a266c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a2670:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a2674:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a2678:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a267c:	bf08      	it	eq
 80a267e:	f020 0001 	biceq.w	r0, r0, #1
 80a2682:	4770      	bx	lr
 80a2684:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a2688:	d121      	bne.n	80a26ce <__aeabi_d2f+0x7a>
 80a268a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a268e:	bfbc      	itt	lt
 80a2690:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a2694:	4770      	bxlt	lr
 80a2696:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a269a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a269e:	f1c2 0218 	rsb	r2, r2, #24
 80a26a2:	f1c2 0c20 	rsb	ip, r2, #32
 80a26a6:	fa10 f30c 	lsls.w	r3, r0, ip
 80a26aa:	fa20 f002 	lsr.w	r0, r0, r2
 80a26ae:	bf18      	it	ne
 80a26b0:	f040 0001 	orrne.w	r0, r0, #1
 80a26b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a26b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a26bc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a26c0:	ea40 000c 	orr.w	r0, r0, ip
 80a26c4:	fa23 f302 	lsr.w	r3, r3, r2
 80a26c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a26cc:	e7cc      	b.n	80a2668 <__aeabi_d2f+0x14>
 80a26ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a26d2:	d107      	bne.n	80a26e4 <__aeabi_d2f+0x90>
 80a26d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a26d8:	bf1e      	ittt	ne
 80a26da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a26de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a26e2:	4770      	bxne	lr
 80a26e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a26e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a26ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a26f0:	4770      	bx	lr
 80a26f2:	bf00      	nop

080a26f4 <__gesf2>:
 80a26f4:	f04f 3cff 	mov.w	ip, #4294967295
 80a26f8:	e006      	b.n	80a2708 <__cmpsf2+0x4>
 80a26fa:	bf00      	nop

080a26fc <__lesf2>:
 80a26fc:	f04f 0c01 	mov.w	ip, #1
 80a2700:	e002      	b.n	80a2708 <__cmpsf2+0x4>
 80a2702:	bf00      	nop

080a2704 <__cmpsf2>:
 80a2704:	f04f 0c01 	mov.w	ip, #1
 80a2708:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a270c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2710:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2714:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2718:	bf18      	it	ne
 80a271a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a271e:	d011      	beq.n	80a2744 <__cmpsf2+0x40>
 80a2720:	b001      	add	sp, #4
 80a2722:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a2726:	bf18      	it	ne
 80a2728:	ea90 0f01 	teqne	r0, r1
 80a272c:	bf58      	it	pl
 80a272e:	ebb2 0003 	subspl.w	r0, r2, r3
 80a2732:	bf88      	it	hi
 80a2734:	17c8      	asrhi	r0, r1, #31
 80a2736:	bf38      	it	cc
 80a2738:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a273c:	bf18      	it	ne
 80a273e:	f040 0001 	orrne.w	r0, r0, #1
 80a2742:	4770      	bx	lr
 80a2744:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2748:	d102      	bne.n	80a2750 <__cmpsf2+0x4c>
 80a274a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a274e:	d105      	bne.n	80a275c <__cmpsf2+0x58>
 80a2750:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2754:	d1e4      	bne.n	80a2720 <__cmpsf2+0x1c>
 80a2756:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a275a:	d0e1      	beq.n	80a2720 <__cmpsf2+0x1c>
 80a275c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2760:	4770      	bx	lr
 80a2762:	bf00      	nop

080a2764 <__aeabi_cfrcmple>:
 80a2764:	4684      	mov	ip, r0
 80a2766:	4608      	mov	r0, r1
 80a2768:	4661      	mov	r1, ip
 80a276a:	e7ff      	b.n	80a276c <__aeabi_cfcmpeq>

080a276c <__aeabi_cfcmpeq>:
 80a276c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a276e:	f7ff ffc9 	bl	80a2704 <__cmpsf2>
 80a2772:	2800      	cmp	r0, #0
 80a2774:	bf48      	it	mi
 80a2776:	f110 0f00 	cmnmi.w	r0, #0
 80a277a:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a277c <__aeabi_fcmpeq>:
 80a277c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2780:	f7ff fff4 	bl	80a276c <__aeabi_cfcmpeq>
 80a2784:	bf0c      	ite	eq
 80a2786:	2001      	moveq	r0, #1
 80a2788:	2000      	movne	r0, #0
 80a278a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a278e:	bf00      	nop

080a2790 <__aeabi_fcmplt>:
 80a2790:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2794:	f7ff ffea 	bl	80a276c <__aeabi_cfcmpeq>
 80a2798:	bf34      	ite	cc
 80a279a:	2001      	movcc	r0, #1
 80a279c:	2000      	movcs	r0, #0
 80a279e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a27a2:	bf00      	nop

080a27a4 <__aeabi_fcmple>:
 80a27a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a27a8:	f7ff ffe0 	bl	80a276c <__aeabi_cfcmpeq>
 80a27ac:	bf94      	ite	ls
 80a27ae:	2001      	movls	r0, #1
 80a27b0:	2000      	movhi	r0, #0
 80a27b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a27b6:	bf00      	nop

080a27b8 <__aeabi_fcmpge>:
 80a27b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a27bc:	f7ff ffd2 	bl	80a2764 <__aeabi_cfrcmple>
 80a27c0:	bf94      	ite	ls
 80a27c2:	2001      	movls	r0, #1
 80a27c4:	2000      	movhi	r0, #0
 80a27c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a27ca:	bf00      	nop

080a27cc <__aeabi_fcmpgt>:
 80a27cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a27d0:	f7ff ffc8 	bl	80a2764 <__aeabi_cfrcmple>
 80a27d4:	bf34      	ite	cc
 80a27d6:	2001      	movcc	r0, #1
 80a27d8:	2000      	movcs	r0, #0
 80a27da:	f85d fb08 	ldr.w	pc, [sp], #8
 80a27de:	bf00      	nop

080a27e0 <atexit>:
 80a27e0:	2300      	movs	r3, #0
 80a27e2:	4601      	mov	r1, r0
 80a27e4:	461a      	mov	r2, r3
 80a27e6:	4618      	mov	r0, r3
 80a27e8:	f000 b8f2 	b.w	80a29d0 <__register_exitproc>

080a27ec <atol>:
 80a27ec:	220a      	movs	r2, #10
 80a27ee:	2100      	movs	r1, #0
 80a27f0:	f000 b8e4 	b.w	80a29bc <strtol>

080a27f4 <memcpy>:
 80a27f4:	440a      	add	r2, r1
 80a27f6:	4291      	cmp	r1, r2
 80a27f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80a27fc:	d100      	bne.n	80a2800 <memcpy+0xc>
 80a27fe:	4770      	bx	lr
 80a2800:	b510      	push	{r4, lr}
 80a2802:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2806:	4291      	cmp	r1, r2
 80a2808:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a280c:	d1f9      	bne.n	80a2802 <memcpy+0xe>
 80a280e:	bd10      	pop	{r4, pc}

080a2810 <memset>:
 80a2810:	4603      	mov	r3, r0
 80a2812:	4402      	add	r2, r0
 80a2814:	4293      	cmp	r3, r2
 80a2816:	d100      	bne.n	80a281a <memset+0xa>
 80a2818:	4770      	bx	lr
 80a281a:	f803 1b01 	strb.w	r1, [r3], #1
 80a281e:	e7f9      	b.n	80a2814 <memset+0x4>

080a2820 <srand>:
 80a2820:	b538      	push	{r3, r4, r5, lr}
 80a2822:	4b10      	ldr	r3, [pc, #64]	; (80a2864 <srand+0x44>)
 80a2824:	4604      	mov	r4, r0
 80a2826:	681d      	ldr	r5, [r3, #0]
 80a2828:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a282a:	b9b3      	cbnz	r3, 80a285a <srand+0x3a>
 80a282c:	2018      	movs	r0, #24
 80a282e:	f7fe f89b 	bl	80a0968 <malloc>
 80a2832:	4602      	mov	r2, r0
 80a2834:	63a8      	str	r0, [r5, #56]	; 0x38
 80a2836:	b920      	cbnz	r0, 80a2842 <srand+0x22>
 80a2838:	2142      	movs	r1, #66	; 0x42
 80a283a:	4b0b      	ldr	r3, [pc, #44]	; (80a2868 <srand+0x48>)
 80a283c:	480b      	ldr	r0, [pc, #44]	; (80a286c <srand+0x4c>)
 80a283e:	f7fe f8c3 	bl	80a09c8 <__assert_func>
 80a2842:	490b      	ldr	r1, [pc, #44]	; (80a2870 <srand+0x50>)
 80a2844:	4b0b      	ldr	r3, [pc, #44]	; (80a2874 <srand+0x54>)
 80a2846:	e9c0 1300 	strd	r1, r3, [r0]
 80a284a:	4b0b      	ldr	r3, [pc, #44]	; (80a2878 <srand+0x58>)
 80a284c:	2100      	movs	r1, #0
 80a284e:	6083      	str	r3, [r0, #8]
 80a2850:	230b      	movs	r3, #11
 80a2852:	8183      	strh	r3, [r0, #12]
 80a2854:	2001      	movs	r0, #1
 80a2856:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a285a:	2200      	movs	r2, #0
 80a285c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a285e:	611c      	str	r4, [r3, #16]
 80a2860:	615a      	str	r2, [r3, #20]
 80a2862:	bd38      	pop	{r3, r4, r5, pc}
 80a2864:	20000008 	.word	0x20000008
 80a2868:	080a2c91 	.word	0x080a2c91
 80a286c:	080a2ca8 	.word	0x080a2ca8
 80a2870:	abcd330e 	.word	0xabcd330e
 80a2874:	e66d1234 	.word	0xe66d1234
 80a2878:	0005deec 	.word	0x0005deec

080a287c <strdup>:
 80a287c:	4b02      	ldr	r3, [pc, #8]	; (80a2888 <strdup+0xc>)
 80a287e:	4601      	mov	r1, r0
 80a2880:	6818      	ldr	r0, [r3, #0]
 80a2882:	f000 b803 	b.w	80a288c <_strdup_r>
 80a2886:	bf00      	nop
 80a2888:	20000008 	.word	0x20000008

080a288c <_strdup_r>:
 80a288c:	b570      	push	{r4, r5, r6, lr}
 80a288e:	4604      	mov	r4, r0
 80a2890:	4608      	mov	r0, r1
 80a2892:	460d      	mov	r5, r1
 80a2894:	f000 f80d 	bl	80a28b2 <strlen>
 80a2898:	1c46      	adds	r6, r0, #1
 80a289a:	4631      	mov	r1, r6
 80a289c:	4620      	mov	r0, r4
 80a289e:	f7fe f883 	bl	80a09a8 <_malloc_r>
 80a28a2:	4604      	mov	r4, r0
 80a28a4:	b118      	cbz	r0, 80a28ae <_strdup_r+0x22>
 80a28a6:	4632      	mov	r2, r6
 80a28a8:	4629      	mov	r1, r5
 80a28aa:	f7ff ffa3 	bl	80a27f4 <memcpy>
 80a28ae:	4620      	mov	r0, r4
 80a28b0:	bd70      	pop	{r4, r5, r6, pc}

080a28b2 <strlen>:
 80a28b2:	4603      	mov	r3, r0
 80a28b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a28b8:	2a00      	cmp	r2, #0
 80a28ba:	d1fb      	bne.n	80a28b4 <strlen+0x2>
 80a28bc:	1a18      	subs	r0, r3, r0
 80a28be:	3801      	subs	r0, #1
 80a28c0:	4770      	bx	lr
	...

080a28c4 <_strtol_l.constprop.0>:
 80a28c4:	2b01      	cmp	r3, #1
 80a28c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a28ca:	4680      	mov	r8, r0
 80a28cc:	d001      	beq.n	80a28d2 <_strtol_l.constprop.0+0xe>
 80a28ce:	2b24      	cmp	r3, #36	; 0x24
 80a28d0:	d906      	bls.n	80a28e0 <_strtol_l.constprop.0+0x1c>
 80a28d2:	f7fe f871 	bl	80a09b8 <__errno>
 80a28d6:	2316      	movs	r3, #22
 80a28d8:	6003      	str	r3, [r0, #0]
 80a28da:	2000      	movs	r0, #0
 80a28dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a28e0:	460d      	mov	r5, r1
 80a28e2:	4f35      	ldr	r7, [pc, #212]	; (80a29b8 <_strtol_l.constprop.0+0xf4>)
 80a28e4:	4628      	mov	r0, r5
 80a28e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a28ea:	5de6      	ldrb	r6, [r4, r7]
 80a28ec:	f016 0608 	ands.w	r6, r6, #8
 80a28f0:	d1f8      	bne.n	80a28e4 <_strtol_l.constprop.0+0x20>
 80a28f2:	2c2d      	cmp	r4, #45	; 0x2d
 80a28f4:	d12f      	bne.n	80a2956 <_strtol_l.constprop.0+0x92>
 80a28f6:	2601      	movs	r6, #1
 80a28f8:	782c      	ldrb	r4, [r5, #0]
 80a28fa:	1c85      	adds	r5, r0, #2
 80a28fc:	2b00      	cmp	r3, #0
 80a28fe:	d057      	beq.n	80a29b0 <_strtol_l.constprop.0+0xec>
 80a2900:	2b10      	cmp	r3, #16
 80a2902:	d109      	bne.n	80a2918 <_strtol_l.constprop.0+0x54>
 80a2904:	2c30      	cmp	r4, #48	; 0x30
 80a2906:	d107      	bne.n	80a2918 <_strtol_l.constprop.0+0x54>
 80a2908:	7828      	ldrb	r0, [r5, #0]
 80a290a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a290e:	2858      	cmp	r0, #88	; 0x58
 80a2910:	d149      	bne.n	80a29a6 <_strtol_l.constprop.0+0xe2>
 80a2912:	2310      	movs	r3, #16
 80a2914:	786c      	ldrb	r4, [r5, #1]
 80a2916:	3502      	adds	r5, #2
 80a2918:	2700      	movs	r7, #0
 80a291a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80a291e:	f10e 3eff 	add.w	lr, lr, #4294967295
 80a2922:	fbbe f9f3 	udiv	r9, lr, r3
 80a2926:	4638      	mov	r0, r7
 80a2928:	fb03 ea19 	mls	sl, r3, r9, lr
 80a292c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80a2930:	f1bc 0f09 	cmp.w	ip, #9
 80a2934:	d814      	bhi.n	80a2960 <_strtol_l.constprop.0+0x9c>
 80a2936:	4664      	mov	r4, ip
 80a2938:	42a3      	cmp	r3, r4
 80a293a:	dd22      	ble.n	80a2982 <_strtol_l.constprop.0+0xbe>
 80a293c:	2f00      	cmp	r7, #0
 80a293e:	db1d      	blt.n	80a297c <_strtol_l.constprop.0+0xb8>
 80a2940:	4581      	cmp	r9, r0
 80a2942:	d31b      	bcc.n	80a297c <_strtol_l.constprop.0+0xb8>
 80a2944:	d101      	bne.n	80a294a <_strtol_l.constprop.0+0x86>
 80a2946:	45a2      	cmp	sl, r4
 80a2948:	db18      	blt.n	80a297c <_strtol_l.constprop.0+0xb8>
 80a294a:	2701      	movs	r7, #1
 80a294c:	fb00 4003 	mla	r0, r0, r3, r4
 80a2950:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a2954:	e7ea      	b.n	80a292c <_strtol_l.constprop.0+0x68>
 80a2956:	2c2b      	cmp	r4, #43	; 0x2b
 80a2958:	bf04      	itt	eq
 80a295a:	782c      	ldrbeq	r4, [r5, #0]
 80a295c:	1c85      	addeq	r5, r0, #2
 80a295e:	e7cd      	b.n	80a28fc <_strtol_l.constprop.0+0x38>
 80a2960:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80a2964:	f1bc 0f19 	cmp.w	ip, #25
 80a2968:	d801      	bhi.n	80a296e <_strtol_l.constprop.0+0xaa>
 80a296a:	3c37      	subs	r4, #55	; 0x37
 80a296c:	e7e4      	b.n	80a2938 <_strtol_l.constprop.0+0x74>
 80a296e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80a2972:	f1bc 0f19 	cmp.w	ip, #25
 80a2976:	d804      	bhi.n	80a2982 <_strtol_l.constprop.0+0xbe>
 80a2978:	3c57      	subs	r4, #87	; 0x57
 80a297a:	e7dd      	b.n	80a2938 <_strtol_l.constprop.0+0x74>
 80a297c:	f04f 37ff 	mov.w	r7, #4294967295
 80a2980:	e7e6      	b.n	80a2950 <_strtol_l.constprop.0+0x8c>
 80a2982:	2f00      	cmp	r7, #0
 80a2984:	da07      	bge.n	80a2996 <_strtol_l.constprop.0+0xd2>
 80a2986:	2322      	movs	r3, #34	; 0x22
 80a2988:	4670      	mov	r0, lr
 80a298a:	f8c8 3000 	str.w	r3, [r8]
 80a298e:	2a00      	cmp	r2, #0
 80a2990:	d0a4      	beq.n	80a28dc <_strtol_l.constprop.0+0x18>
 80a2992:	1e69      	subs	r1, r5, #1
 80a2994:	e005      	b.n	80a29a2 <_strtol_l.constprop.0+0xde>
 80a2996:	b106      	cbz	r6, 80a299a <_strtol_l.constprop.0+0xd6>
 80a2998:	4240      	negs	r0, r0
 80a299a:	2a00      	cmp	r2, #0
 80a299c:	d09e      	beq.n	80a28dc <_strtol_l.constprop.0+0x18>
 80a299e:	2f00      	cmp	r7, #0
 80a29a0:	d1f7      	bne.n	80a2992 <_strtol_l.constprop.0+0xce>
 80a29a2:	6011      	str	r1, [r2, #0]
 80a29a4:	e79a      	b.n	80a28dc <_strtol_l.constprop.0+0x18>
 80a29a6:	2430      	movs	r4, #48	; 0x30
 80a29a8:	2b00      	cmp	r3, #0
 80a29aa:	d1b5      	bne.n	80a2918 <_strtol_l.constprop.0+0x54>
 80a29ac:	2308      	movs	r3, #8
 80a29ae:	e7b3      	b.n	80a2918 <_strtol_l.constprop.0+0x54>
 80a29b0:	2c30      	cmp	r4, #48	; 0x30
 80a29b2:	d0a9      	beq.n	80a2908 <_strtol_l.constprop.0+0x44>
 80a29b4:	230a      	movs	r3, #10
 80a29b6:	e7af      	b.n	80a2918 <_strtol_l.constprop.0+0x54>
 80a29b8:	080a2d26 	.word	0x080a2d26

080a29bc <strtol>:
 80a29bc:	4613      	mov	r3, r2
 80a29be:	460a      	mov	r2, r1
 80a29c0:	4601      	mov	r1, r0
 80a29c2:	4802      	ldr	r0, [pc, #8]	; (80a29cc <strtol+0x10>)
 80a29c4:	6800      	ldr	r0, [r0, #0]
 80a29c6:	f7ff bf7d 	b.w	80a28c4 <_strtol_l.constprop.0>
 80a29ca:	bf00      	nop
 80a29cc:	20000008 	.word	0x20000008

080a29d0 <__register_exitproc>:
 80a29d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a29d4:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a2a84 <__register_exitproc+0xb4>
 80a29d8:	4606      	mov	r6, r0
 80a29da:	f8d8 0000 	ldr.w	r0, [r8]
 80a29de:	461f      	mov	r7, r3
 80a29e0:	460d      	mov	r5, r1
 80a29e2:	4691      	mov	r9, r2
 80a29e4:	f000 f858 	bl	80a2a98 <__retarget_lock_acquire_recursive>
 80a29e8:	4b27      	ldr	r3, [pc, #156]	; (80a2a88 <__register_exitproc+0xb8>)
 80a29ea:	681c      	ldr	r4, [r3, #0]
 80a29ec:	b934      	cbnz	r4, 80a29fc <__register_exitproc+0x2c>
 80a29ee:	4c27      	ldr	r4, [pc, #156]	; (80a2a8c <__register_exitproc+0xbc>)
 80a29f0:	601c      	str	r4, [r3, #0]
 80a29f2:	4b27      	ldr	r3, [pc, #156]	; (80a2a90 <__register_exitproc+0xc0>)
 80a29f4:	b113      	cbz	r3, 80a29fc <__register_exitproc+0x2c>
 80a29f6:	681b      	ldr	r3, [r3, #0]
 80a29f8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a29fc:	6863      	ldr	r3, [r4, #4]
 80a29fe:	2b1f      	cmp	r3, #31
 80a2a00:	dd07      	ble.n	80a2a12 <__register_exitproc+0x42>
 80a2a02:	f8d8 0000 	ldr.w	r0, [r8]
 80a2a06:	f000 f849 	bl	80a2a9c <__retarget_lock_release_recursive>
 80a2a0a:	f04f 30ff 	mov.w	r0, #4294967295
 80a2a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2a12:	b35e      	cbz	r6, 80a2a6c <__register_exitproc+0x9c>
 80a2a14:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a2a18:	b988      	cbnz	r0, 80a2a3e <__register_exitproc+0x6e>
 80a2a1a:	4b1e      	ldr	r3, [pc, #120]	; (80a2a94 <__register_exitproc+0xc4>)
 80a2a1c:	b923      	cbnz	r3, 80a2a28 <__register_exitproc+0x58>
 80a2a1e:	f8d8 0000 	ldr.w	r0, [r8]
 80a2a22:	f000 f83a 	bl	80a2a9a <__retarget_lock_release>
 80a2a26:	e7f0      	b.n	80a2a0a <__register_exitproc+0x3a>
 80a2a28:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a2a2c:	f7fd ff9c 	bl	80a0968 <malloc>
 80a2a30:	2800      	cmp	r0, #0
 80a2a32:	d0f4      	beq.n	80a2a1e <__register_exitproc+0x4e>
 80a2a34:	2300      	movs	r3, #0
 80a2a36:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a2a3a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a2a3e:	2201      	movs	r2, #1
 80a2a40:	6863      	ldr	r3, [r4, #4]
 80a2a42:	2e02      	cmp	r6, #2
 80a2a44:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a2a48:	fa02 f203 	lsl.w	r2, r2, r3
 80a2a4c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a2a50:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a2a54:	ea43 0302 	orr.w	r3, r3, r2
 80a2a58:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a2a5c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a2a60:	bf02      	ittt	eq
 80a2a62:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a2a66:	4313      	orreq	r3, r2
 80a2a68:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a2a6c:	6863      	ldr	r3, [r4, #4]
 80a2a6e:	f8d8 0000 	ldr.w	r0, [r8]
 80a2a72:	1c5a      	adds	r2, r3, #1
 80a2a74:	3302      	adds	r3, #2
 80a2a76:	6062      	str	r2, [r4, #4]
 80a2a78:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a2a7c:	f000 f80e 	bl	80a2a9c <__retarget_lock_release_recursive>
 80a2a80:	2000      	movs	r0, #0
 80a2a82:	e7c4      	b.n	80a2a0e <__register_exitproc+0x3e>
 80a2a84:	2000006c 	.word	0x2000006c
 80a2a88:	20000504 	.word	0x20000504
 80a2a8c:	20000478 	.word	0x20000478
 80a2a90:	00000000 	.word	0x00000000
 80a2a94:	080a0969 	.word	0x080a0969

080a2a98 <__retarget_lock_acquire_recursive>:
 80a2a98:	4770      	bx	lr

080a2a9a <__retarget_lock_release>:
 80a2a9a:	4770      	bx	lr

080a2a9c <__retarget_lock_release_recursive>:
 80a2a9c:	4770      	bx	lr

080a2a9e <link_code_end>:
	...

080a2aa0 <dynalib_user>:
 80a2aa0:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a2ab0:	0000 0000 6f59 2075 7270 7365 6573 2064     ....You pressed 
 80a2ac0:	6874 2065 7562 7474 6e6f 2021 293a 0020     the button! :) .
 80a2ad0:	7542 7474 6e6f 7250 7365 6573 0064 6561     ButtonPressed.ae
 80a2ae0:	5372 6174 7472 6954 656d 0072 6561 5372     rStartTimer.aerS
 80a2af0:	7465 6353 726f 0065 6353 726f 3a65 0020     etScore.Score: .
 80a2b00:	6954 656d 203a 0000                         Time: ..

080a2b08 <_ZTV17LiquidCrystal_I2C>:
	...
 80a2b10:	02d9 080a 02db 080a 03a7 080a 0b25 080a     ............%...
 80a2b20:	0000 0000 0040 0000 0014 0000 0054 0000     ....@.......T...
 80a2b30:	616e 006e 6e69 0066 766f 0066 002e 7061     nan.inf.ovf...ap
 80a2b40:	0070 5925 252d 2d6d 6425 2554 3a48 4d25     p.%Y-%m-%dT%H:%M
 80a2b50:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

080a2b60 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a2b68:	0ffd 080a 1003 080a 1041 080a 1011 080a     ........A.......
 80a2b78:	0fff 080a                                   ....

080a2b7c <_ZTV9IPAddress>:
	...
 80a2b84:	1583 080a 1581 080a 15b5 080a               ............

080a2b90 <_ZTV9USBSerial>:
	...
 80a2b98:	164f 080a 16b5 080a 168d 080a 0b25 080a     O...........%...
 80a2ba8:	167f 080a 1651 080a 1661 080a 16af 080a     ....Q...a.......
 80a2bb8:	1671 080a 1649 080a                         q...I...

080a2bc0 <_ZTV11USARTSerial>:
	...
 80a2bc8:	17dd 080a 1845 080a 1821 080a 0b25 080a     ....E...!...%...
 80a2bd8:	17f1 080a 180d 080a 17ff 080a 181b 080a     ................
 80a2be8:	17df 080a 17e3 080a                         ........

080a2bf0 <_ZTV7TwoWire>:
	...
 80a2bf8:	18a5 080a 18ef 080a 18c7 080a 18a7 080a     ................
 80a2c08:	18cf 080a 18d7 080a 18df 080a 18e7 080a     ................

080a2c18 <_ZTVN5spark9WiFiClassE>:
	...
 80a2c20:	19f5 080a 19eb 080a 19e1 080a 1953 080a     ............S...
 80a2c30:	19d5 080a 19c9 080a 1a55 080a 1a5d 080a     ........U...]...
 80a2c40:	19bd 080a 19b5 080a 19ab 080a 19a1 080a     ................
 80a2c50:	195d 080a                                   ]...

080a2c54 <_ZTVN5spark12NetworkClassE>:
	...
 80a2c5c:	1a15 080a 1a1f 080a 1a29 080a 1a33 080a     ........)...3...
 80a2c6c:	1a3d 080a 1a49 080a 1a55 080a 1a5d 080a     =...I...U...]...
 80a2c7c:	1a65 080a 1a71 080a 1a79 080a 1a83 080a     e...q...y.......
 80a2c8c:	1a8d 080a                                   ....

080a2c90 <_ZSt7nothrow>:
 80a2c90:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 80a2ca0:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
 80a2cb0:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
 80a2cc0:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
 80a2cd0:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
 80a2ce0:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
 80a2cf0:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
 80a2d00:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
 80a2d10:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
 80a2d20:	646e 632e                                    nd.c.

080a2d25 <_ctype_>:
 80a2d25:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a2d35:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a2d45:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a2d55:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a2d65:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a2d75:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a2d85:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a2d95:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a2da5:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a2e26 <link_const_variable_data_end>:
	...

080a2e28 <link_constructors_location>:
 80a2e28:	080a02cd 	.word	0x080a02cd
 80a2e2c:	080a0511 	.word	0x080a0511
 80a2e30:	080a0521 	.word	0x080a0521
 80a2e34:	080a0531 	.word	0x080a0531
 80a2e38:	080a0a09 	.word	0x080a0a09
 80a2e3c:	080a0dbd 	.word	0x080a0dbd
 80a2e40:	080a0e41 	.word	0x080a0e41
 80a2e44:	080a0e91 	.word	0x080a0e91
 80a2e48:	080a1a01 	.word	0x080a1a01
 80a2e4c:	080a1add 	.word	0x080a1add
 80a2e50:	080a1c4d 	.word	0x080a1c4d

080a2e54 <link_constructors_end>:
	...
