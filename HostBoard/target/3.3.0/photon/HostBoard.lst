
c:/Users/antrut0405/Desktop/iot/HostBoard/target/3.3.0/photon/HostBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001d44  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1d60  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000000  080a1d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000046c  20000074  20000074  00030074  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1dd8  080a1dd8  00021dd8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1e00  080a1e00  00021e00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000bf1d2  00000000  00000000  00021e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00010d90  00000000  00000000  000e0fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0001a495  00000000  00000000  000f1d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000020a8  00000000  00000000  0010c1fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00004ea0  00000000  00000000  0010e2a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00027ba9  00000000  00000000  00113143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002dc23  00000000  00000000  0013acec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000b7f29  00000000  00000000  0016890f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000053c4  00000000  00000000  00220838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fc8a 	bl	80a1946 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fc92 	bl	80a1962 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1d64 	.word	0x080a1d64
 80a004c:	20000074 	.word	0x20000074
 80a0050:	20000074 	.word	0x20000074
 80a0054:	200004dd 	.word	0x200004dd
 80a0058:	200004dd 	.word	0x200004dd

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fdc3 	bl	80a0be8 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42ac      	cmp	r4, r5
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a1d40 	.word	0x080a1d40
 80a0080:	080a1d60 	.word	0x080a1d60

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b834 	b.w	80a00f0 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f88d 	bl	80a01a8 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f000 bd61 	b.w	80a0b58 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 bbd7 	b.w	80a0848 <malloc>

080a009a <_Znaj>:
 80a009a:	f000 bbd5 	b.w	80a0848 <malloc>

080a009e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a009e:	f000 bbdb 	b.w	80a0858 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z9setAnswer6String>:

int correctPin = D3;
int incorrectPin = D2;

int setAnswer(String answer)
{
 80a00b4:	b538      	push	{r3, r4, r5, lr}
    lcd->clear();
 80a00b6:	4c0c      	ldr	r4, [pc, #48]	; (80a00e8 <_Z9setAnswer6String+0x34>)
{
 80a00b8:	4605      	mov	r5, r0
    lcd->clear();
 80a00ba:	6820      	ldr	r0, [r4, #0]
 80a00bc:	f000 f932 	bl	80a0324 <_ZN17LiquidCrystal_I2C5clearEv>
    // Print the score on line 1
    lcd->setCursor(0, 0);
 80a00c0:	2200      	movs	r2, #0
 80a00c2:	6820      	ldr	r0, [r4, #0]
 80a00c4:	4611      	mov	r1, r2
 80a00c6:	f000 f941 	bl	80a034c <_ZN17LiquidCrystal_I2C9setCursorEhh>
    lcd->print("Answer: ");
 80a00ca:	4908      	ldr	r1, [pc, #32]	; (80a00ec <_Z9setAnswer6String+0x38>)
 80a00cc:	6820      	ldr	r0, [r4, #0]
 80a00ce:	f000 fcb2 	bl	80a0a36 <_ZN5Print5printEPKc>
    lcd->setCursor(0, 1);
 80a00d2:	2201      	movs	r2, #1
 80a00d4:	6820      	ldr	r0, [r4, #0]
 80a00d6:	2100      	movs	r1, #0
 80a00d8:	f000 f938 	bl	80a034c <_ZN17LiquidCrystal_I2C9setCursorEhh>
    lcd->print(answer);
 80a00dc:	6829      	ldr	r1, [r5, #0]
 80a00de:	6820      	ldr	r0, [r4, #0]
 80a00e0:	f000 fca9 	bl	80a0a36 <_ZN5Print5printEPKc>

    return 1;
}
 80a00e4:	2001      	movs	r0, #1
 80a00e6:	bd38      	pop	{r3, r4, r5, pc}
 80a00e8:	20000078 	.word	0x20000078
 80a00ec:	080a1afc 	.word	0x080a1afc

080a00f0 <setup>:

// setup() runs once, when the device is first turned on.
void setup()
{
 80a00f0:	b530      	push	{r4, r5, lr}
  // Put initialization like pinMode and begin functions here.
  pinMode(correctPin, INPUT_PULLDOWN);
 80a00f2:	4b1b      	ldr	r3, [pc, #108]	; (80a0160 <setup+0x70>)
{
 80a00f4:	b085      	sub	sp, #20
  pinMode(correctPin, INPUT_PULLDOWN);
 80a00f6:	8818      	ldrh	r0, [r3, #0]
 80a00f8:	2103      	movs	r1, #3
 80a00fa:	f001 fb6b 	bl	80a17d4 <pinMode>
  pinMode(incorrectPin, INPUT_PULLDOWN);
 80a00fe:	4b19      	ldr	r3, [pc, #100]	; (80a0164 <setup+0x74>)
 80a0100:	2103      	movs	r1, #3
 80a0102:	8818      	ldrh	r0, [r3, #0]
 80a0104:	f001 fb66 	bl	80a17d4 <pinMode>
  Serial.begin(9600);
 80a0108:	f001 f932 	bl	80a1370 <_Z16_fetch_usbserialv>
 80a010c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0110:	f001 f914 	bl	80a133c <_ZN9USBSerial5beginEl>

  // Initialize the LCD screen and clear it.
  lcd = new LiquidCrystal_I2C(0x3F, 20, 4);
 80a0114:	2010      	movs	r0, #16
 80a0116:	f7ff ffbe 	bl	80a0096 <_Znwj>
 80a011a:	4604      	mov	r4, r0
 80a011c:	b120      	cbz	r0, 80a0128 <setup+0x38>
 80a011e:	2304      	movs	r3, #4
 80a0120:	2214      	movs	r2, #20
 80a0122:	213f      	movs	r1, #63	; 0x3f
 80a0124:	f000 f896 	bl	80a0254 <_ZN17LiquidCrystal_I2CC1Ehhh>
 80a0128:	4d0f      	ldr	r5, [pc, #60]	; (80a0168 <setup+0x78>)
  lcd->init();
 80a012a:	4620      	mov	r0, r4
  lcd = new LiquidCrystal_I2C(0x3F, 20, 4);
 80a012c:	602c      	str	r4, [r5, #0]
  lcd->init();
 80a012e:	f000 f9a3 	bl	80a0478 <_ZN17LiquidCrystal_I2C4initEv>
  lcd->backlight();
 80a0132:	6828      	ldr	r0, [r5, #0]
 80a0134:	f000 f8b8 	bl	80a02a8 <_ZN17LiquidCrystal_I2C9backlightEv>
  lcd->clear();
 80a0138:	6828      	ldr	r0, [r5, #0]
 80a013a:	f000 f8f3 	bl	80a0324 <_ZN17LiquidCrystal_I2C5clearEv>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a013e:	4a0b      	ldr	r2, [pc, #44]	; (80a016c <setup+0x7c>)
 80a0140:	490b      	ldr	r1, [pc, #44]	; (80a0170 <setup+0x80>)
 80a0142:	480c      	ldr	r0, [pc, #48]	; (80a0174 <setup+0x84>)
 80a0144:	f000 fddd 	bl	80a0d02 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

  Particle.function("aerSetAnswer", setAnswer);

  setAnswer("Waiting...");
 80a0148:	490b      	ldr	r1, [pc, #44]	; (80a0178 <setup+0x88>)
 80a014a:	4668      	mov	r0, sp
 80a014c:	f000 fc20 	bl	80a0990 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0150:	4668      	mov	r0, sp
 80a0152:	f7ff ffaf 	bl	80a00b4 <_Z9setAnswer6String>
 80a0156:	4668      	mov	r0, sp
 80a0158:	f000 fbd0 	bl	80a08fc <_ZN6StringD1Ev>
}
 80a015c:	b005      	add	sp, #20
 80a015e:	bd30      	pop	{r4, r5, pc}
 80a0160:	20000000 	.word	0x20000000
 80a0164:	20000004 	.word	0x20000004
 80a0168:	20000078 	.word	0x20000078
 80a016c:	080a1b05 	.word	0x080a1b05
 80a0170:	080a00b5 	.word	0x080a00b5
 80a0174:	080a0cd7 	.word	0x080a0cd7
 80a0178:	080a1b12 	.word	0x080a1b12

080a017c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a017c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a017e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a0180:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a0182:	b17c      	cbz	r4, 80a01a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a0184:	6863      	ldr	r3, [r4, #4]
 80a0186:	3b01      	subs	r3, #1
 80a0188:	6063      	str	r3, [r4, #4]
 80a018a:	b95b      	cbnz	r3, 80a01a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a018c:	6823      	ldr	r3, [r4, #0]
 80a018e:	4620      	mov	r0, r4
 80a0190:	689b      	ldr	r3, [r3, #8]
 80a0192:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0194:	68a3      	ldr	r3, [r4, #8]
 80a0196:	3b01      	subs	r3, #1
 80a0198:	60a3      	str	r3, [r4, #8]
 80a019a:	b91b      	cbnz	r3, 80a01a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a019c:	6823      	ldr	r3, [r4, #0]
 80a019e:	4620      	mov	r0, r4
 80a01a0:	68db      	ldr	r3, [r3, #12]
 80a01a2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a01a4:	4628      	mov	r0, r5
 80a01a6:	bd38      	pop	{r3, r4, r5, pc}

080a01a8 <loop>:
bool correctPressedLast = false;
bool incorrectPressedLast = false;

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
 80a01a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  bool correctNow = digitalRead(correctPin);
 80a01ac:	4b1b      	ldr	r3, [pc, #108]	; (80a021c <loop+0x74>)
 80a01ae:	4e1c      	ldr	r6, [pc, #112]	; (80a0220 <loop+0x78>)
 80a01b0:	8818      	ldrh	r0, [r3, #0]
 80a01b2:	f001 fb20 	bl	80a17f6 <digitalRead>
  bool incorrectNow = digitalRead(incorrectPin);
 80a01b6:	4b1b      	ldr	r3, [pc, #108]	; (80a0224 <loop+0x7c>)
  bool correctNow = digitalRead(correctPin);
 80a01b8:	f1b0 0800 	subs.w	r8, r0, #0
 80a01bc:	4605      	mov	r5, r0
  bool incorrectNow = digitalRead(incorrectPin);
 80a01be:	8818      	ldrh	r0, [r3, #0]
  bool correctNow = digitalRead(correctPin);
 80a01c0:	bf18      	it	ne
 80a01c2:	f04f 0801 	movne.w	r8, #1
  bool incorrectNow = digitalRead(incorrectPin);
 80a01c6:	f001 fb16 	bl	80a17f6 <digitalRead>
 80a01ca:	1e07      	subs	r7, r0, #0
 80a01cc:	4604      	mov	r4, r0
 80a01ce:	bf18      	it	ne
 80a01d0:	2701      	movne	r7, #1

  // The core of your code will likely live here.
  if (correctNow && !correctPressedLast)
 80a01d2:	b16d      	cbz	r5, 80a01f0 <loop+0x48>
 80a01d4:	7832      	ldrb	r2, [r6, #0]
 80a01d6:	b95a      	cbnz	r2, 80a01f0 <loop+0x48>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a01d8:	4b13      	ldr	r3, [pc, #76]	; (80a0228 <loop+0x80>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a01da:	a802      	add	r0, sp, #8
 80a01dc:	781b      	ldrb	r3, [r3, #0]
 80a01de:	4913      	ldr	r1, [pc, #76]	; (80a022c <loop+0x84>)
 80a01e0:	f88d 3000 	strb.w	r3, [sp]
 80a01e4:	233c      	movs	r3, #60	; 0x3c
 80a01e6:	f000 fe83 	bl	80a0ef0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a01ea:	a803      	add	r0, sp, #12
 80a01ec:	f7ff ffc6 	bl	80a017c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  {
    Particle.publish("Correct");
  }
  if (incorrectNow && !incorrectPressedLast)
 80a01f0:	4d0f      	ldr	r5, [pc, #60]	; (80a0230 <loop+0x88>)
 80a01f2:	b16c      	cbz	r4, 80a0210 <loop+0x68>
 80a01f4:	782a      	ldrb	r2, [r5, #0]
 80a01f6:	b95a      	cbnz	r2, 80a0210 <loop+0x68>
 80a01f8:	4b0b      	ldr	r3, [pc, #44]	; (80a0228 <loop+0x80>)
 80a01fa:	a802      	add	r0, sp, #8
 80a01fc:	781b      	ldrb	r3, [r3, #0]
 80a01fe:	490d      	ldr	r1, [pc, #52]	; (80a0234 <loop+0x8c>)
 80a0200:	f88d 3000 	strb.w	r3, [sp]
 80a0204:	233c      	movs	r3, #60	; 0x3c
 80a0206:	f000 fe73 	bl	80a0ef0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a020a:	a803      	add	r0, sp, #12
 80a020c:	f7ff ffb6 	bl	80a017c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  {
    Particle.publish("Incorrect");
  }

  correctPressedLast = correctNow;
 80a0210:	f886 8000 	strb.w	r8, [r6]
  incorrectPressedLast = incorrectNow;
 80a0214:	702f      	strb	r7, [r5, #0]
 80a0216:	b004      	add	sp, #16
 80a0218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a021c:	20000000 	.word	0x20000000
 80a0220:	20000075 	.word	0x20000075
 80a0224:	20000004 	.word	0x20000004
 80a0228:	20000074 	.word	0x20000074
 80a022c:	080a1b1d 	.word	0x080a1b1d
 80a0230:	20000076 	.word	0x20000076
 80a0234:	080a1b25 	.word	0x080a1b25

080a0238 <_GLOBAL__sub_I_lcd>:
        val_(val) {
 80a0238:	2200      	movs	r2, #0
 80a023a:	4b01      	ldr	r3, [pc, #4]	; (80a0240 <_GLOBAL__sub_I_lcd+0x8>)
 80a023c:	701a      	strb	r2, [r3, #0]
 80a023e:	4770      	bx	lr
 80a0240:	20000074 	.word	0x20000074

080a0244 <_ZN17LiquidCrystal_I2CD1Ev>:

//#define En B00000100  // Enable bit
//#define Rw B00000010  // Read/Write bit
//#define Rs B00000001  // Register select bit

class LiquidCrystal_I2C : public Print {
 80a0244:	4770      	bx	lr

080a0246 <_ZN17LiquidCrystal_I2CD0Ev>:
 80a0246:	b510      	push	{r4, lr}
 80a0248:	4604      	mov	r4, r0
 80a024a:	2110      	movs	r1, #16
 80a024c:	f7ff ff27 	bl	80a009e <_ZdlPvj>
 80a0250:	4620      	mov	r0, r4
 80a0252:	bd10      	pop	{r4, pc}

080a0254 <_ZN17LiquidCrystal_I2CC1Ehhh>:
#include "application.h"

#include "LiquidCrystal_I2C_Spark.h"


LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr,uint8_t lcd_cols,uint8_t lcd_rows)
 80a0254:	b570      	push	{r4, r5, r6, lr}
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
 80a0256:	2500      	movs	r5, #0
 80a0258:	4e03      	ldr	r6, [pc, #12]	; (80a0268 <_ZN17LiquidCrystal_I2CC1Ehhh+0x14>)
 80a025a:	6045      	str	r5, [r0, #4]
 80a025c:	6006      	str	r6, [r0, #0]
{
  _Addr = lcd_Addr;
 80a025e:	7201      	strb	r1, [r0, #8]
  _cols = lcd_cols;
 80a0260:	7342      	strb	r2, [r0, #13]
  _rows = lcd_rows;
 80a0262:	7383      	strb	r3, [r0, #14]
  _backlightval = LCD_NOBACKLIGHT;
 80a0264:	73c5      	strb	r5, [r0, #15]
}
 80a0266:	bd70      	pop	{r4, r5, r6, pc}
 80a0268:	080a1b38 	.word	0x080a1b38

080a026c <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
void LiquidCrystal_I2C::write4bits(uint8_t value) {
        expanderWrite(value);
        pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){
 80a026c:	b538      	push	{r3, r4, r5, lr}
 80a026e:	4604      	mov	r4, r0
 80a0270:	460d      	mov	r5, r1
        Wire.beginTransmission(_Addr);
 80a0272:	f001 fb39 	bl	80a18e8 <_Z19__fetch_global_Wirev>
 80a0276:	7a21      	ldrb	r1, [r4, #8]
 80a0278:	f001 f988 	bl	80a158c <_ZN7TwoWire17beginTransmissionEh>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a027c:	2002      	movs	r0, #2
 80a027e:	f000 f91d 	bl	80a04bc <HAL_Delay_Microseconds>
        delayMicroseconds(2);
        Wire.write((int)(_data) | _backlightval);
 80a0282:	f001 fb31 	bl	80a18e8 <_Z19__fetch_global_Wirev>
 80a0286:	7be1      	ldrb	r1, [r4, #15]
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0288:	6803      	ldr	r3, [r0, #0]
 80a028a:	4329      	orrs	r1, r5
 80a028c:	689b      	ldr	r3, [r3, #8]
 80a028e:	4798      	blx	r3
 80a0290:	2002      	movs	r0, #2
 80a0292:	f000 f913 	bl	80a04bc <HAL_Delay_Microseconds>
        delayMicroseconds(2);
        Wire.endTransmission();
 80a0296:	f001 fb27 	bl	80a18e8 <_Z19__fetch_global_Wirev>
 80a029a:	f001 f97f 	bl	80a159c <_ZN7TwoWire15endTransmissionEv>
        delayMicroseconds(2);
        }
 80a029e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a02a2:	2002      	movs	r0, #2
 80a02a4:	f000 b90a 	b.w	80a04bc <HAL_Delay_Microseconds>

080a02a8 <_ZN17LiquidCrystal_I2C9backlightEv>:
        _backlightval=LCD_BACKLIGHT;
 80a02a8:	2308      	movs	r3, #8
        expanderWrite(0);
 80a02aa:	2100      	movs	r1, #0
        _backlightval=LCD_BACKLIGHT;
 80a02ac:	73c3      	strb	r3, [r0, #15]
        expanderWrite(0);
 80a02ae:	f7ff bfdd 	b.w	80a026c <_ZN17LiquidCrystal_I2C13expanderWriteEh>

080a02b2 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
 80a02b2:	b538      	push	{r3, r4, r5, lr}
 80a02b4:	4605      	mov	r5, r0
 80a02b6:	460c      	mov	r4, r1
        expanderWrite(_data | (1<<2));  // En high
 80a02b8:	f041 0104 	orr.w	r1, r1, #4
 80a02bc:	f7ff ffd6 	bl	80a026c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
 80a02c0:	2001      	movs	r0, #1
 80a02c2:	f000 f8fb 	bl	80a04bc <HAL_Delay_Microseconds>
        delayMicroseconds(1);           // enable pulse must be >450ns

        expanderWrite(_data & ~(1<<2)); // En low
 80a02c6:	4628      	mov	r0, r5
 80a02c8:	f004 01fb 	and.w	r1, r4, #251	; 0xfb
 80a02cc:	f7ff ffce 	bl	80a026c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        delayMicroseconds(50);          // commands need > 37us to settle
}
 80a02d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a02d4:	2032      	movs	r0, #50	; 0x32
 80a02d6:	f000 b8f1 	b.w	80a04bc <HAL_Delay_Microseconds>

080a02da <_ZN17LiquidCrystal_I2C10write4bitsEh>:
void LiquidCrystal_I2C::write4bits(uint8_t value) {
 80a02da:	b538      	push	{r3, r4, r5, lr}
 80a02dc:	4604      	mov	r4, r0
 80a02de:	460d      	mov	r5, r1
        expanderWrite(value);
 80a02e0:	f7ff ffc4 	bl	80a026c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        pulseEnable(value);
 80a02e4:	4629      	mov	r1, r5
 80a02e6:	4620      	mov	r0, r4
}
 80a02e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pulseEnable(value);
 80a02ec:	f7ff bfe1 	b.w	80a02b2 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

080a02f0 <_ZN17LiquidCrystal_I2C4sendEhh>:
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
 80a02f0:	b570      	push	{r4, r5, r6, lr}
 80a02f2:	460d      	mov	r5, r1
 80a02f4:	4614      	mov	r4, r2
 80a02f6:	4606      	mov	r6, r0
        uint8_t highnib=value&0xf0;
 80a02f8:	f021 010f 	bic.w	r1, r1, #15
       write4bits((highnib)|mode);
 80a02fc:	4311      	orrs	r1, r2
 80a02fe:	f7ff ffec 	bl	80a02da <_ZN17LiquidCrystal_I2C10write4bitsEh>
        write4bits((lownib)|mode);
 80a0302:	ea44 1105 	orr.w	r1, r4, r5, lsl #4
 80a0306:	4630      	mov	r0, r6
}
 80a0308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        write4bits((lownib)|mode);
 80a030c:	b2c9      	uxtb	r1, r1
 80a030e:	f7ff bfe4 	b.w	80a02da <_ZN17LiquidCrystal_I2C10write4bitsEh>

080a0312 <_ZN17LiquidCrystal_I2C5writeEh>:
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
 80a0312:	b508      	push	{r3, lr}
        send(value, 1);
 80a0314:	2201      	movs	r2, #1
 80a0316:	f7ff ffeb 	bl	80a02f0 <_ZN17LiquidCrystal_I2C4sendEhh>
}
 80a031a:	2000      	movs	r0, #0
 80a031c:	bd08      	pop	{r3, pc}

080a031e <_ZN17LiquidCrystal_I2C7commandEh>:
        send(value, 0);
 80a031e:	2200      	movs	r2, #0
 80a0320:	f7ff bfe6 	b.w	80a02f0 <_ZN17LiquidCrystal_I2C4sendEhh>

080a0324 <_ZN17LiquidCrystal_I2C5clearEv>:
void LiquidCrystal_I2C::clear(){
 80a0324:	b508      	push	{r3, lr}
        command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 80a0326:	2101      	movs	r1, #1
 80a0328:	f7ff fff9 	bl	80a031e <_ZN17LiquidCrystal_I2C7commandEh>
}
 80a032c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0330:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a0334:	f000 b8c2 	b.w	80a04bc <HAL_Delay_Microseconds>

080a0338 <_ZN17LiquidCrystal_I2C4homeEv>:
void LiquidCrystal_I2C::home(){
 80a0338:	b508      	push	{r3, lr}
        command(LCD_RETURNHOME);  // set cursor position to zero
 80a033a:	2102      	movs	r1, #2
 80a033c:	f7ff ffef 	bl	80a031e <_ZN17LiquidCrystal_I2C7commandEh>
}
 80a0340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0344:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a0348:	f000 b8b8 	b.w	80a04bc <HAL_Delay_Microseconds>

080a034c <_ZN17LiquidCrystal_I2C9setCursorEhh>:
void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
 80a034c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a034e:	4606      	mov	r6, r0
 80a0350:	4615      	mov	r5, r2
 80a0352:	460c      	mov	r4, r1
        int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80a0354:	4b0c      	ldr	r3, [pc, #48]	; (80a0388 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x3c>)
 80a0356:	f10d 0c10 	add.w	ip, sp, #16
 80a035a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80a035c:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
        if ( row > _numlines ) {
 80a0360:	7b32      	ldrb	r2, [r6, #12]
        command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80a0362:	ab04      	add	r3, sp, #16
        if ( row > _numlines ) {
 80a0364:	42aa      	cmp	r2, r5
                row = _numlines-1;    // we count rows starting w/0
 80a0366:	bf3c      	itt	cc
 80a0368:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80a036c:	b2d5      	uxtbcc	r5, r2
        command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80a036e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80a0372:	f855 1c10 	ldr.w	r1, [r5, #-16]
 80a0376:	4630      	mov	r0, r6
 80a0378:	4421      	add	r1, r4
 80a037a:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80a037e:	b2c9      	uxtb	r1, r1
 80a0380:	f7ff ffcd 	bl	80a031e <_ZN17LiquidCrystal_I2C7commandEh>
}
 80a0384:	b004      	add	sp, #16
 80a0386:	bd70      	pop	{r4, r5, r6, pc}
 80a0388:	080a1b48 	.word	0x080a1b48

080a038c <_ZN17LiquidCrystal_I2C7displayEv>:
void LiquidCrystal_I2C::display() {
 80a038c:	b508      	push	{r3, lr}
        _displaycontrol |= LCD_DISPLAYON;
 80a038e:	7a81      	ldrb	r1, [r0, #10]
 80a0390:	f041 0204 	orr.w	r2, r1, #4
 80a0394:	7282      	strb	r2, [r0, #10]
        command(LCD_DISPLAYCONTROL | _displaycontrol);
 80a0396:	f041 010c 	orr.w	r1, r1, #12
 80a039a:	f7ff ffc0 	bl	80a031e <_ZN17LiquidCrystal_I2C7commandEh>
}
 80a039e:	bd08      	pop	{r3, pc}

080a03a0 <_ZN17LiquidCrystal_I2C5beginEhhh>:
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 80a03a0:	b510      	push	{r4, lr}
        if (lines > 1) {
 80a03a2:	2a01      	cmp	r2, #1
                _displayfunction |= LCD_2LINE;
 80a03a4:	bf88      	it	hi
 80a03a6:	7a41      	ldrbhi	r1, [r0, #9]
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 80a03a8:	4604      	mov	r4, r0
                _displayfunction |= LCD_2LINE;
 80a03aa:	bf84      	itt	hi
 80a03ac:	f041 0108 	orrhi.w	r1, r1, #8
 80a03b0:	7241      	strbhi	r1, [r0, #9]
        _numlines = lines;
 80a03b2:	7302      	strb	r2, [r0, #12]
        if ((dotsize != 0) && (lines == 1)) {
 80a03b4:	b12b      	cbz	r3, 80a03c2 <_ZN17LiquidCrystal_I2C5beginEhhh+0x22>
 80a03b6:	2a01      	cmp	r2, #1
                _displayfunction |= LCD_5x10DOTS;
 80a03b8:	bf02      	ittt	eq
 80a03ba:	7a43      	ldrbeq	r3, [r0, #9]
 80a03bc:	f043 0304 	orreq.w	r3, r3, #4
 80a03c0:	7243      	strbeq	r3, [r0, #9]
        delay(50);
 80a03c2:	2032      	movs	r0, #50	; 0x32
 80a03c4:	f000 fb6e 	bl	80a0aa4 <delay>
        expanderWrite(_backlightval);   // reset expanderand turn backlight off (Bit 8 =1)
 80a03c8:	7be1      	ldrb	r1, [r4, #15]
 80a03ca:	4620      	mov	r0, r4
 80a03cc:	f7ff ff4e 	bl	80a026c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        delay(1000);
 80a03d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a03d4:	f000 fb66 	bl	80a0aa4 <delay>
   write4bits(0x03 << 4);
 80a03d8:	2130      	movs	r1, #48	; 0x30
 80a03da:	4620      	mov	r0, r4
 80a03dc:	f7ff ff7d 	bl	80a02da <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a03e0:	f241 1094 	movw	r0, #4500	; 0x1194
 80a03e4:	f000 f86a 	bl	80a04bc <HAL_Delay_Microseconds>
   write4bits(0x03 << 4);
 80a03e8:	2130      	movs	r1, #48	; 0x30
 80a03ea:	4620      	mov	r0, r4
 80a03ec:	f7ff ff75 	bl	80a02da <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a03f0:	f241 1094 	movw	r0, #4500	; 0x1194
 80a03f4:	f000 f862 	bl	80a04bc <HAL_Delay_Microseconds>
   write4bits(0x03 << 4);
 80a03f8:	2130      	movs	r1, #48	; 0x30
 80a03fa:	4620      	mov	r0, r4
 80a03fc:	f7ff ff6d 	bl	80a02da <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a0400:	2096      	movs	r0, #150	; 0x96
 80a0402:	f000 f85b 	bl	80a04bc <HAL_Delay_Microseconds>
   write4bits(0x02 << 4);
 80a0406:	4620      	mov	r0, r4
 80a0408:	2120      	movs	r1, #32
 80a040a:	f7ff ff66 	bl	80a02da <_ZN17LiquidCrystal_I2C10write4bitsEh>
        command(LCD_FUNCTIONSET | _displayfunction);
 80a040e:	7a61      	ldrb	r1, [r4, #9]
 80a0410:	4620      	mov	r0, r4
 80a0412:	f041 0120 	orr.w	r1, r1, #32
 80a0416:	f7ff ff82 	bl	80a031e <_ZN17LiquidCrystal_I2C7commandEh>
        _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a041a:	2304      	movs	r3, #4
        display();
 80a041c:	4620      	mov	r0, r4
        _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a041e:	72a3      	strb	r3, [r4, #10]
        display();
 80a0420:	f7ff ffb4 	bl	80a038c <_ZN17LiquidCrystal_I2C7displayEv>
        clear();
 80a0424:	4620      	mov	r0, r4
 80a0426:	f7ff ff7d 	bl	80a0324 <_ZN17LiquidCrystal_I2C5clearEv>
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a042a:	2302      	movs	r3, #2
        command(LCD_ENTRYMODESET | _displaymode);
 80a042c:	4620      	mov	r0, r4
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a042e:	72e3      	strb	r3, [r4, #11]
        command(LCD_ENTRYMODESET | _displaymode);
 80a0430:	2106      	movs	r1, #6
 80a0432:	f7ff ff74 	bl	80a031e <_ZN17LiquidCrystal_I2C7commandEh>
        home();
 80a0436:	4620      	mov	r0, r4
}
 80a0438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        home();
 80a043c:	f7ff bf7c 	b.w	80a0338 <_ZN17LiquidCrystal_I2C4homeEv>

080a0440 <_ZN17LiquidCrystal_I2C9init_privEv>:
{
 80a0440:	b510      	push	{r4, lr}
 80a0442:	4604      	mov	r4, r0
        Wire.setSpeed(CLOCK_SPEED_100KHZ);
 80a0444:	f001 fa50 	bl	80a18e8 <_Z19__fetch_global_Wirev>
 80a0448:	490a      	ldr	r1, [pc, #40]	; (80a0474 <_ZN17LiquidCrystal_I2C9init_privEv+0x34>)
 80a044a:	f001 f891 	bl	80a1570 <_ZN7TwoWire8setSpeedEm>
        Wire.stretchClock(true);
 80a044e:	f001 fa4b 	bl	80a18e8 <_Z19__fetch_global_Wirev>
 80a0452:	2101      	movs	r1, #1
 80a0454:	f001 f890 	bl	80a1578 <_ZN7TwoWire12stretchClockEb>
        Wire.begin();
 80a0458:	f001 fa46 	bl	80a18e8 <_Z19__fetch_global_Wirev>
 80a045c:	f001 f890 	bl	80a1580 <_ZN7TwoWire5beginEv>
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80a0460:	2300      	movs	r3, #0
        begin(_cols, _rows);
 80a0462:	4620      	mov	r0, r4
 80a0464:	7ba2      	ldrb	r2, [r4, #14]
 80a0466:	7b61      	ldrb	r1, [r4, #13]
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80a0468:	7263      	strb	r3, [r4, #9]
}
 80a046a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        begin(_cols, _rows);
 80a046e:	f7ff bf97 	b.w	80a03a0 <_ZN17LiquidCrystal_I2C5beginEhhh>
 80a0472:	bf00      	nop
 80a0474:	000186a0 	.word	0x000186a0

080a0478 <_ZN17LiquidCrystal_I2C4initEv>:
        init_priv();
 80a0478:	f7ff bfe2 	b.w	80a0440 <_ZN17LiquidCrystal_I2C9init_privEv>

080a047c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a047c:	b508      	push	{r3, lr}
 80a047e:	4b02      	ldr	r3, [pc, #8]	; (80a0488 <HAL_Pin_Mode+0xc>)
 80a0480:	681b      	ldr	r3, [r3, #0]
 80a0482:	689b      	ldr	r3, [r3, #8]
 80a0484:	9301      	str	r3, [sp, #4]
 80a0486:	bd08      	pop	{r3, pc}
 80a0488:	080601b0 	.word	0x080601b0

080a048c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a048c:	b508      	push	{r3, lr}
 80a048e:	4b02      	ldr	r3, [pc, #8]	; (80a0498 <HAL_Get_Pin_Mode+0xc>)
 80a0490:	681b      	ldr	r3, [r3, #0]
 80a0492:	68db      	ldr	r3, [r3, #12]
 80a0494:	9301      	str	r3, [sp, #4]
 80a0496:	bd08      	pop	{r3, pc}
 80a0498:	080601b0 	.word	0x080601b0

080a049c <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a049c:	b508      	push	{r3, lr}
 80a049e:	4b02      	ldr	r3, [pc, #8]	; (80a04a8 <HAL_GPIO_Read+0xc>)
 80a04a0:	681b      	ldr	r3, [r3, #0]
 80a04a2:	695b      	ldr	r3, [r3, #20]
 80a04a4:	9301      	str	r3, [sp, #4]
 80a04a6:	bd08      	pop	{r3, pc}
 80a04a8:	080601b0 	.word	0x080601b0

080a04ac <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a04ac:	b508      	push	{r3, lr}
 80a04ae:	4b02      	ldr	r3, [pc, #8]	; (80a04b8 <HAL_RNG_GetRandomNumber+0xc>)
 80a04b0:	681b      	ldr	r3, [r3, #0]
 80a04b2:	685b      	ldr	r3, [r3, #4]
 80a04b4:	9301      	str	r3, [sp, #4]
 80a04b6:	bd08      	pop	{r3, pc}
 80a04b8:	0806019c 	.word	0x0806019c

080a04bc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a04bc:	b508      	push	{r3, lr}
 80a04be:	4b02      	ldr	r3, [pc, #8]	; (80a04c8 <HAL_Delay_Microseconds+0xc>)
 80a04c0:	681b      	ldr	r3, [r3, #0]
 80a04c2:	68db      	ldr	r3, [r3, #12]
 80a04c4:	9301      	str	r3, [sp, #4]
 80a04c6:	bd08      	pop	{r3, pc}
 80a04c8:	0806019c 	.word	0x0806019c

080a04cc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a04cc:	b508      	push	{r3, lr}
 80a04ce:	4b02      	ldr	r3, [pc, #8]	; (80a04d8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a04d0:	681b      	ldr	r3, [r3, #0]
 80a04d2:	695b      	ldr	r3, [r3, #20]
 80a04d4:	9301      	str	r3, [sp, #4]
 80a04d6:	bd08      	pop	{r3, pc}
 80a04d8:	0806019c 	.word	0x0806019c

080a04dc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a04dc:	b508      	push	{r3, lr}
 80a04de:	4b02      	ldr	r3, [pc, #8]	; (80a04e8 <os_mutex_recursive_create+0xc>)
 80a04e0:	681b      	ldr	r3, [r3, #0]
 80a04e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a04e4:	9301      	str	r3, [sp, #4]
 80a04e6:	bd08      	pop	{r3, pc}
 80a04e8:	080601d0 	.word	0x080601d0

080a04ec <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a04ec:	b508      	push	{r3, lr}
 80a04ee:	4b02      	ldr	r3, [pc, #8]	; (80a04f8 <os_mutex_recursive_destroy+0xc>)
 80a04f0:	681b      	ldr	r3, [r3, #0]
 80a04f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a04f4:	9301      	str	r3, [sp, #4]
 80a04f6:	bd08      	pop	{r3, pc}
 80a04f8:	080601d0 	.word	0x080601d0

080a04fc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a04fc:	b508      	push	{r3, lr}
 80a04fe:	4b02      	ldr	r3, [pc, #8]	; (80a0508 <hal_usart_write+0xc>)
 80a0500:	681b      	ldr	r3, [r3, #0]
 80a0502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0504:	9301      	str	r3, [sp, #4]
 80a0506:	bd08      	pop	{r3, pc}
 80a0508:	080601c4 	.word	0x080601c4

080a050c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a050c:	b508      	push	{r3, lr}
 80a050e:	4b02      	ldr	r3, [pc, #8]	; (80a0518 <hal_usart_available+0xc>)
 80a0510:	681b      	ldr	r3, [r3, #0]
 80a0512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0514:	9301      	str	r3, [sp, #4]
 80a0516:	bd08      	pop	{r3, pc}
 80a0518:	080601c4 	.word	0x080601c4

080a051c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a051c:	b508      	push	{r3, lr}
 80a051e:	4b02      	ldr	r3, [pc, #8]	; (80a0528 <hal_usart_read+0xc>)
 80a0520:	681b      	ldr	r3, [r3, #0]
 80a0522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0524:	9301      	str	r3, [sp, #4]
 80a0526:	bd08      	pop	{r3, pc}
 80a0528:	080601c4 	.word	0x080601c4

080a052c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a052c:	b508      	push	{r3, lr}
 80a052e:	4b02      	ldr	r3, [pc, #8]	; (80a0538 <hal_usart_peek+0xc>)
 80a0530:	681b      	ldr	r3, [r3, #0]
 80a0532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0534:	9301      	str	r3, [sp, #4]
 80a0536:	bd08      	pop	{r3, pc}
 80a0538:	080601c4 	.word	0x080601c4

080a053c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a053c:	b508      	push	{r3, lr}
 80a053e:	4b02      	ldr	r3, [pc, #8]	; (80a0548 <hal_usart_flush+0xc>)
 80a0540:	681b      	ldr	r3, [r3, #0]
 80a0542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0544:	9301      	str	r3, [sp, #4]
 80a0546:	bd08      	pop	{r3, pc}
 80a0548:	080601c4 	.word	0x080601c4

080a054c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a054c:	b508      	push	{r3, lr}
 80a054e:	4b02      	ldr	r3, [pc, #8]	; (80a0558 <hal_usart_is_enabled+0xc>)
 80a0550:	681b      	ldr	r3, [r3, #0]
 80a0552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0554:	9301      	str	r3, [sp, #4]
 80a0556:	bd08      	pop	{r3, pc}
 80a0558:	080601c4 	.word	0x080601c4

080a055c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a055c:	b508      	push	{r3, lr}
 80a055e:	4b02      	ldr	r3, [pc, #8]	; (80a0568 <hal_usart_available_data_for_write+0xc>)
 80a0560:	681b      	ldr	r3, [r3, #0]
 80a0562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0564:	9301      	str	r3, [sp, #4]
 80a0566:	bd08      	pop	{r3, pc}
 80a0568:	080601c4 	.word	0x080601c4

080a056c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a056c:	b508      	push	{r3, lr}
 80a056e:	4b02      	ldr	r3, [pc, #8]	; (80a0578 <hal_usart_init_ex+0xc>)
 80a0570:	681b      	ldr	r3, [r3, #0]
 80a0572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0574:	9301      	str	r3, [sp, #4]
 80a0576:	bd08      	pop	{r3, pc}
 80a0578:	080601c4 	.word	0x080601c4

080a057c <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 80a057c:	b508      	push	{r3, lr}
 80a057e:	4b02      	ldr	r3, [pc, #8]	; (80a0588 <hal_i2c_set_speed+0xc>)
 80a0580:	681b      	ldr	r3, [r3, #0]
 80a0582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0584:	9301      	str	r3, [sp, #4]
 80a0586:	bd08      	pop	{r3, pc}
 80a0588:	080601ac 	.word	0x080601ac

080a058c <hal_i2c_stretch_clock>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
 80a058c:	b508      	push	{r3, lr}
 80a058e:	4b02      	ldr	r3, [pc, #8]	; (80a0598 <hal_i2c_stretch_clock+0xc>)
 80a0590:	681b      	ldr	r3, [r3, #0]
 80a0592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0594:	9301      	str	r3, [sp, #4]
 80a0596:	bd08      	pop	{r3, pc}
 80a0598:	080601ac 	.word	0x080601ac

080a059c <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a059c:	b508      	push	{r3, lr}
 80a059e:	4b02      	ldr	r3, [pc, #8]	; (80a05a8 <hal_i2c_begin+0xc>)
 80a05a0:	681b      	ldr	r3, [r3, #0]
 80a05a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a05a4:	9301      	str	r3, [sp, #4]
 80a05a6:	bd08      	pop	{r3, pc}
 80a05a8:	080601ac 	.word	0x080601ac

080a05ac <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a05ac:	b508      	push	{r3, lr}
 80a05ae:	4b02      	ldr	r3, [pc, #8]	; (80a05b8 <hal_i2c_begin_transmission+0xc>)
 80a05b0:	681b      	ldr	r3, [r3, #0]
 80a05b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a05b4:	9301      	str	r3, [sp, #4]
 80a05b6:	bd08      	pop	{r3, pc}
 80a05b8:	080601ac 	.word	0x080601ac

080a05bc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a05bc:	b508      	push	{r3, lr}
 80a05be:	4b02      	ldr	r3, [pc, #8]	; (80a05c8 <hal_i2c_end_transmission+0xc>)
 80a05c0:	681b      	ldr	r3, [r3, #0]
 80a05c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a05c4:	9301      	str	r3, [sp, #4]
 80a05c6:	bd08      	pop	{r3, pc}
 80a05c8:	080601ac 	.word	0x080601ac

080a05cc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a05cc:	b508      	push	{r3, lr}
 80a05ce:	4b02      	ldr	r3, [pc, #8]	; (80a05d8 <hal_i2c_write+0xc>)
 80a05d0:	681b      	ldr	r3, [r3, #0]
 80a05d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a05d4:	9301      	str	r3, [sp, #4]
 80a05d6:	bd08      	pop	{r3, pc}
 80a05d8:	080601ac 	.word	0x080601ac

080a05dc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a05dc:	b508      	push	{r3, lr}
 80a05de:	4b02      	ldr	r3, [pc, #8]	; (80a05e8 <hal_i2c_available+0xc>)
 80a05e0:	681b      	ldr	r3, [r3, #0]
 80a05e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a05e4:	9301      	str	r3, [sp, #4]
 80a05e6:	bd08      	pop	{r3, pc}
 80a05e8:	080601ac 	.word	0x080601ac

080a05ec <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a05ec:	b508      	push	{r3, lr}
 80a05ee:	4b02      	ldr	r3, [pc, #8]	; (80a05f8 <hal_i2c_read+0xc>)
 80a05f0:	681b      	ldr	r3, [r3, #0]
 80a05f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a05f4:	9301      	str	r3, [sp, #4]
 80a05f6:	bd08      	pop	{r3, pc}
 80a05f8:	080601ac 	.word	0x080601ac

080a05fc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a05fc:	b508      	push	{r3, lr}
 80a05fe:	4b02      	ldr	r3, [pc, #8]	; (80a0608 <hal_i2c_peek+0xc>)
 80a0600:	681b      	ldr	r3, [r3, #0]
 80a0602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0604:	9301      	str	r3, [sp, #4]
 80a0606:	bd08      	pop	{r3, pc}
 80a0608:	080601ac 	.word	0x080601ac

080a060c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a060c:	b508      	push	{r3, lr}
 80a060e:	4b02      	ldr	r3, [pc, #8]	; (80a0618 <hal_i2c_flush+0xc>)
 80a0610:	681b      	ldr	r3, [r3, #0]
 80a0612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0614:	9301      	str	r3, [sp, #4]
 80a0616:	bd08      	pop	{r3, pc}
 80a0618:	080601ac 	.word	0x080601ac

080a061c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a061c:	b508      	push	{r3, lr}
 80a061e:	4b02      	ldr	r3, [pc, #8]	; (80a0628 <hal_i2c_is_enabled+0xc>)
 80a0620:	681b      	ldr	r3, [r3, #0]
 80a0622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0624:	9301      	str	r3, [sp, #4]
 80a0626:	bd08      	pop	{r3, pc}
 80a0628:	080601ac 	.word	0x080601ac

080a062c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a062c:	b508      	push	{r3, lr}
 80a062e:	4b03      	ldr	r3, [pc, #12]	; (80a063c <hal_i2c_init+0x10>)
 80a0630:	681b      	ldr	r3, [r3, #0]
 80a0632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0636:	9301      	str	r3, [sp, #4]
 80a0638:	bd08      	pop	{r3, pc}
 80a063a:	0000      	.short	0x0000
 80a063c:	080601ac 	.word	0x080601ac

080a0640 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0640:	b508      	push	{r3, lr}
 80a0642:	4b02      	ldr	r3, [pc, #8]	; (80a064c <hal_spi_init+0xc>)
 80a0644:	681b      	ldr	r3, [r3, #0]
 80a0646:	69db      	ldr	r3, [r3, #28]
 80a0648:	9301      	str	r3, [sp, #4]
 80a064a:	bd08      	pop	{r3, pc}
 80a064c:	080601b4 	.word	0x080601b4

080a0650 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0650:	b508      	push	{r3, lr}
 80a0652:	4b02      	ldr	r3, [pc, #8]	; (80a065c <hal_spi_is_enabled+0xc>)
 80a0654:	681b      	ldr	r3, [r3, #0]
 80a0656:	6a1b      	ldr	r3, [r3, #32]
 80a0658:	9301      	str	r3, [sp, #4]
 80a065a:	bd08      	pop	{r3, pc}
 80a065c:	080601b4 	.word	0x080601b4

080a0660 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0660:	b508      	push	{r3, lr}
 80a0662:	4b02      	ldr	r3, [pc, #8]	; (80a066c <HAL_USB_USART_Init+0xc>)
 80a0664:	681b      	ldr	r3, [r3, #0]
 80a0666:	681b      	ldr	r3, [r3, #0]
 80a0668:	9301      	str	r3, [sp, #4]
 80a066a:	bd08      	pop	{r3, pc}
 80a066c:	080601d8 	.word	0x080601d8

080a0670 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0670:	b508      	push	{r3, lr}
 80a0672:	4b02      	ldr	r3, [pc, #8]	; (80a067c <HAL_USB_USART_Begin+0xc>)
 80a0674:	681b      	ldr	r3, [r3, #0]
 80a0676:	685b      	ldr	r3, [r3, #4]
 80a0678:	9301      	str	r3, [sp, #4]
 80a067a:	bd08      	pop	{r3, pc}
 80a067c:	080601d8 	.word	0x080601d8

080a0680 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0680:	b508      	push	{r3, lr}
 80a0682:	4b02      	ldr	r3, [pc, #8]	; (80a068c <HAL_USB_USART_Available_Data+0xc>)
 80a0684:	681b      	ldr	r3, [r3, #0]
 80a0686:	691b      	ldr	r3, [r3, #16]
 80a0688:	9301      	str	r3, [sp, #4]
 80a068a:	bd08      	pop	{r3, pc}
 80a068c:	080601d8 	.word	0x080601d8

080a0690 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0690:	b508      	push	{r3, lr}
 80a0692:	4b02      	ldr	r3, [pc, #8]	; (80a069c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0694:	681b      	ldr	r3, [r3, #0]
 80a0696:	695b      	ldr	r3, [r3, #20]
 80a0698:	9301      	str	r3, [sp, #4]
 80a069a:	bd08      	pop	{r3, pc}
 80a069c:	080601d8 	.word	0x080601d8

080a06a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a06a0:	b508      	push	{r3, lr}
 80a06a2:	4b02      	ldr	r3, [pc, #8]	; (80a06ac <HAL_USB_USART_Receive_Data+0xc>)
 80a06a4:	681b      	ldr	r3, [r3, #0]
 80a06a6:	699b      	ldr	r3, [r3, #24]
 80a06a8:	9301      	str	r3, [sp, #4]
 80a06aa:	bd08      	pop	{r3, pc}
 80a06ac:	080601d8 	.word	0x080601d8

080a06b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a06b0:	b508      	push	{r3, lr}
 80a06b2:	4b02      	ldr	r3, [pc, #8]	; (80a06bc <HAL_USB_USART_Send_Data+0xc>)
 80a06b4:	681b      	ldr	r3, [r3, #0]
 80a06b6:	69db      	ldr	r3, [r3, #28]
 80a06b8:	9301      	str	r3, [sp, #4]
 80a06ba:	bd08      	pop	{r3, pc}
 80a06bc:	080601d8 	.word	0x080601d8

080a06c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a06c0:	b508      	push	{r3, lr}
 80a06c2:	4b02      	ldr	r3, [pc, #8]	; (80a06cc <HAL_USB_USART_Flush_Data+0xc>)
 80a06c4:	681b      	ldr	r3, [r3, #0]
 80a06c6:	6a1b      	ldr	r3, [r3, #32]
 80a06c8:	9301      	str	r3, [sp, #4]
 80a06ca:	bd08      	pop	{r3, pc}
 80a06cc:	080601d8 	.word	0x080601d8

080a06d0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a06d0:	b508      	push	{r3, lr}
 80a06d2:	4b02      	ldr	r3, [pc, #8]	; (80a06dc <inet_gethostbyname+0xc>)
 80a06d4:	681b      	ldr	r3, [r3, #0]
 80a06d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a06d8:	9301      	str	r3, [sp, #4]
 80a06da:	bd08      	pop	{r3, pc}
 80a06dc:	080601c0 	.word	0x080601c0

080a06e0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a06e0:	b508      	push	{r3, lr}
 80a06e2:	4b02      	ldr	r3, [pc, #8]	; (80a06ec <set_system_mode+0xc>)
 80a06e4:	681b      	ldr	r3, [r3, #0]
 80a06e6:	685b      	ldr	r3, [r3, #4]
 80a06e8:	9301      	str	r3, [sp, #4]
 80a06ea:	bd08      	pop	{r3, pc}
 80a06ec:	080601a4 	.word	0x080601a4

080a06f0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a06f0:	b508      	push	{r3, lr}
 80a06f2:	4b02      	ldr	r3, [pc, #8]	; (80a06fc <system_delay_ms+0xc>)
 80a06f4:	681b      	ldr	r3, [r3, #0]
 80a06f6:	695b      	ldr	r3, [r3, #20]
 80a06f8:	9301      	str	r3, [sp, #4]
 80a06fa:	bd08      	pop	{r3, pc}
 80a06fc:	080601a4 	.word	0x080601a4

080a0700 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0700:	b508      	push	{r3, lr}
 80a0702:	4b02      	ldr	r3, [pc, #8]	; (80a070c <application_thread_current+0xc>)
 80a0704:	681b      	ldr	r3, [r3, #0]
 80a0706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0708:	9301      	str	r3, [sp, #4]
 80a070a:	bd08      	pop	{r3, pc}
 80a070c:	080601a4 	.word	0x080601a4

080a0710 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0710:	b508      	push	{r3, lr}
 80a0712:	4b02      	ldr	r3, [pc, #8]	; (80a071c <application_thread_invoke+0xc>)
 80a0714:	681b      	ldr	r3, [r3, #0]
 80a0716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0718:	9301      	str	r3, [sp, #4]
 80a071a:	bd08      	pop	{r3, pc}
 80a071c:	080601a4 	.word	0x080601a4

080a0720 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0720:	b508      	push	{r3, lr}
 80a0722:	4b03      	ldr	r3, [pc, #12]	; (80a0730 <system_ctrl_set_app_request_handler+0x10>)
 80a0724:	681b      	ldr	r3, [r3, #0]
 80a0726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a072a:	9301      	str	r3, [sp, #4]
 80a072c:	bd08      	pop	{r3, pc}
 80a072e:	0000      	.short	0x0000
 80a0730:	080601a4 	.word	0x080601a4

080a0734 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0734:	b508      	push	{r3, lr}
 80a0736:	4b03      	ldr	r3, [pc, #12]	; (80a0744 <system_ctrl_set_result+0x10>)
 80a0738:	681b      	ldr	r3, [r3, #0]
 80a073a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a073e:	9301      	str	r3, [sp, #4]
 80a0740:	bd08      	pop	{r3, pc}
 80a0742:	0000      	.short	0x0000
 80a0744:	080601a4 	.word	0x080601a4

080a0748 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0748:	b508      	push	{r3, lr}
 80a074a:	4b02      	ldr	r3, [pc, #8]	; (80a0754 <network_connect+0xc>)
 80a074c:	681b      	ldr	r3, [r3, #0]
 80a074e:	685b      	ldr	r3, [r3, #4]
 80a0750:	9301      	str	r3, [sp, #4]
 80a0752:	bd08      	pop	{r3, pc}
 80a0754:	080601c8 	.word	0x080601c8

080a0758 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0758:	b508      	push	{r3, lr}
 80a075a:	4b02      	ldr	r3, [pc, #8]	; (80a0764 <network_connecting+0xc>)
 80a075c:	681b      	ldr	r3, [r3, #0]
 80a075e:	689b      	ldr	r3, [r3, #8]
 80a0760:	9301      	str	r3, [sp, #4]
 80a0762:	bd08      	pop	{r3, pc}
 80a0764:	080601c8 	.word	0x080601c8

080a0768 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0768:	b508      	push	{r3, lr}
 80a076a:	4b02      	ldr	r3, [pc, #8]	; (80a0774 <network_disconnect+0xc>)
 80a076c:	681b      	ldr	r3, [r3, #0]
 80a076e:	68db      	ldr	r3, [r3, #12]
 80a0770:	9301      	str	r3, [sp, #4]
 80a0772:	bd08      	pop	{r3, pc}
 80a0774:	080601c8 	.word	0x080601c8

080a0778 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0778:	b508      	push	{r3, lr}
 80a077a:	4b02      	ldr	r3, [pc, #8]	; (80a0784 <network_ready+0xc>)
 80a077c:	681b      	ldr	r3, [r3, #0]
 80a077e:	691b      	ldr	r3, [r3, #16]
 80a0780:	9301      	str	r3, [sp, #4]
 80a0782:	bd08      	pop	{r3, pc}
 80a0784:	080601c8 	.word	0x080601c8

080a0788 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0788:	b508      	push	{r3, lr}
 80a078a:	4b02      	ldr	r3, [pc, #8]	; (80a0794 <network_on+0xc>)
 80a078c:	681b      	ldr	r3, [r3, #0]
 80a078e:	695b      	ldr	r3, [r3, #20]
 80a0790:	9301      	str	r3, [sp, #4]
 80a0792:	bd08      	pop	{r3, pc}
 80a0794:	080601c8 	.word	0x080601c8

080a0798 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0798:	b508      	push	{r3, lr}
 80a079a:	4b02      	ldr	r3, [pc, #8]	; (80a07a4 <network_off+0xc>)
 80a079c:	681b      	ldr	r3, [r3, #0]
 80a079e:	699b      	ldr	r3, [r3, #24]
 80a07a0:	9301      	str	r3, [sp, #4]
 80a07a2:	bd08      	pop	{r3, pc}
 80a07a4:	080601c8 	.word	0x080601c8

080a07a8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a07a8:	b508      	push	{r3, lr}
 80a07aa:	4b02      	ldr	r3, [pc, #8]	; (80a07b4 <network_listen+0xc>)
 80a07ac:	681b      	ldr	r3, [r3, #0]
 80a07ae:	69db      	ldr	r3, [r3, #28]
 80a07b0:	9301      	str	r3, [sp, #4]
 80a07b2:	bd08      	pop	{r3, pc}
 80a07b4:	080601c8 	.word	0x080601c8

080a07b8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a07b8:	b508      	push	{r3, lr}
 80a07ba:	4b02      	ldr	r3, [pc, #8]	; (80a07c4 <network_listening+0xc>)
 80a07bc:	681b      	ldr	r3, [r3, #0]
 80a07be:	6a1b      	ldr	r3, [r3, #32]
 80a07c0:	9301      	str	r3, [sp, #4]
 80a07c2:	bd08      	pop	{r3, pc}
 80a07c4:	080601c8 	.word	0x080601c8

080a07c8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a07c8:	b508      	push	{r3, lr}
 80a07ca:	4b02      	ldr	r3, [pc, #8]	; (80a07d4 <network_set_listen_timeout+0xc>)
 80a07cc:	681b      	ldr	r3, [r3, #0]
 80a07ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a07d0:	9301      	str	r3, [sp, #4]
 80a07d2:	bd08      	pop	{r3, pc}
 80a07d4:	080601c8 	.word	0x080601c8

080a07d8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a07d8:	b508      	push	{r3, lr}
 80a07da:	4b02      	ldr	r3, [pc, #8]	; (80a07e4 <network_get_listen_timeout+0xc>)
 80a07dc:	681b      	ldr	r3, [r3, #0]
 80a07de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a07e0:	9301      	str	r3, [sp, #4]
 80a07e2:	bd08      	pop	{r3, pc}
 80a07e4:	080601c8 	.word	0x080601c8

080a07e8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a07e8:	b508      	push	{r3, lr}
 80a07ea:	4b02      	ldr	r3, [pc, #8]	; (80a07f4 <network_is_on+0xc>)
 80a07ec:	681b      	ldr	r3, [r3, #0]
 80a07ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a07f0:	9301      	str	r3, [sp, #4]
 80a07f2:	bd08      	pop	{r3, pc}
 80a07f4:	080601c8 	.word	0x080601c8

080a07f8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a07f8:	b508      	push	{r3, lr}
 80a07fa:	4b02      	ldr	r3, [pc, #8]	; (80a0804 <network_is_off+0xc>)
 80a07fc:	681b      	ldr	r3, [r3, #0]
 80a07fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0800:	9301      	str	r3, [sp, #4]
 80a0802:	bd08      	pop	{r3, pc}
 80a0804:	080601c8 	.word	0x080601c8

080a0808 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a0808:	b508      	push	{r3, lr}
 80a080a:	4b02      	ldr	r3, [pc, #8]	; (80a0814 <spark_function+0xc>)
 80a080c:	681b      	ldr	r3, [r3, #0]
 80a080e:	685b      	ldr	r3, [r3, #4]
 80a0810:	9301      	str	r3, [sp, #4]
 80a0812:	bd08      	pop	{r3, pc}
 80a0814:	080601cc 	.word	0x080601cc

080a0818 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0818:	b508      	push	{r3, lr}
 80a081a:	4b02      	ldr	r3, [pc, #8]	; (80a0824 <spark_cloud_flag_connected+0xc>)
 80a081c:	681b      	ldr	r3, [r3, #0]
 80a081e:	695b      	ldr	r3, [r3, #20]
 80a0820:	9301      	str	r3, [sp, #4]
 80a0822:	bd08      	pop	{r3, pc}
 80a0824:	080601cc 	.word	0x080601cc

080a0828 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0828:	b508      	push	{r3, lr}
 80a082a:	4b02      	ldr	r3, [pc, #8]	; (80a0834 <spark_send_event+0xc>)
 80a082c:	681b      	ldr	r3, [r3, #0]
 80a082e:	6a1b      	ldr	r3, [r3, #32]
 80a0830:	9301      	str	r3, [sp, #4]
 80a0832:	bd08      	pop	{r3, pc}
 80a0834:	080601cc 	.word	0x080601cc

080a0838 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0838:	b508      	push	{r3, lr}
 80a083a:	4b02      	ldr	r3, [pc, #8]	; (80a0844 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a083c:	681b      	ldr	r3, [r3, #0]
 80a083e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0840:	9301      	str	r3, [sp, #4]
 80a0842:	bd08      	pop	{r3, pc}
 80a0844:	080601cc 	.word	0x080601cc

080a0848 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0848:	b508      	push	{r3, lr}
 80a084a:	4b02      	ldr	r3, [pc, #8]	; (80a0854 <malloc+0xc>)
 80a084c:	681b      	ldr	r3, [r3, #0]
 80a084e:	681b      	ldr	r3, [r3, #0]
 80a0850:	9301      	str	r3, [sp, #4]
 80a0852:	bd08      	pop	{r3, pc}
 80a0854:	080601a0 	.word	0x080601a0

080a0858 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0858:	b508      	push	{r3, lr}
 80a085a:	4b02      	ldr	r3, [pc, #8]	; (80a0864 <free+0xc>)
 80a085c:	681b      	ldr	r3, [r3, #0]
 80a085e:	685b      	ldr	r3, [r3, #4]
 80a0860:	9301      	str	r3, [sp, #4]
 80a0862:	bd08      	pop	{r3, pc}
 80a0864:	080601a0 	.word	0x080601a0

080a0868 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0868:	b508      	push	{r3, lr}
 80a086a:	4b02      	ldr	r3, [pc, #8]	; (80a0874 <realloc+0xc>)
 80a086c:	681b      	ldr	r3, [r3, #0]
 80a086e:	689b      	ldr	r3, [r3, #8]
 80a0870:	9301      	str	r3, [sp, #4]
 80a0872:	bd08      	pop	{r3, pc}
 80a0874:	080601a0 	.word	0x080601a0

080a0878 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0878:	b508      	push	{r3, lr}
 80a087a:	4b02      	ldr	r3, [pc, #8]	; (80a0884 <abort+0xc>)
 80a087c:	681b      	ldr	r3, [r3, #0]
 80a087e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0880:	9301      	str	r3, [sp, #4]
 80a0882:	bd08      	pop	{r3, pc}
 80a0884:	080601a0 	.word	0x080601a0

080a0888 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0888:	b508      	push	{r3, lr}
 80a088a:	4b02      	ldr	r3, [pc, #8]	; (80a0894 <_malloc_r+0xc>)
 80a088c:	681b      	ldr	r3, [r3, #0]
 80a088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0890:	9301      	str	r3, [sp, #4]
 80a0892:	bd08      	pop	{r3, pc}
 80a0894:	080601a0 	.word	0x080601a0

080a0898 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a0898:	b508      	push	{r3, lr}
 80a089a:	4b02      	ldr	r3, [pc, #8]	; (80a08a4 <__assert_func+0xc>)
 80a089c:	681b      	ldr	r3, [r3, #0]
 80a089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a08a0:	9301      	str	r3, [sp, #4]
 80a08a2:	bd08      	pop	{r3, pc}
 80a08a4:	080601a0 	.word	0x080601a0

080a08a8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a08a8:	b508      	push	{r3, lr}
 80a08aa:	4b02      	ldr	r3, [pc, #8]	; (80a08b4 <newlib_impure_ptr_callback+0xc>)
 80a08ac:	681b      	ldr	r3, [r3, #0]
 80a08ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a08b0:	9301      	str	r3, [sp, #4]
 80a08b2:	bd08      	pop	{r3, pc}
 80a08b4:	080601a0 	.word	0x080601a0

080a08b8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a08b8:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a08ba:	2600      	movs	r6, #0
 80a08bc:	4604      	mov	r4, r0
 80a08be:	460d      	mov	r5, r1
 80a08c0:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a08c4:	f7ff fe0a 	bl	80a04dc <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a08c8:	4628      	mov	r0, r5
    _spi = spi;
 80a08ca:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a08cc:	f7ff feb8 	bl	80a0640 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a08d0:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a08d2:	6066      	str	r6, [r4, #4]
}
 80a08d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080a08d8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a08d8:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a08da:	2000      	movs	r0, #0
 80a08dc:	4b04      	ldr	r3, [pc, #16]	; (80a08f0 <_GLOBAL__sub_I_System+0x18>)
 80a08de:	601a      	str	r2, [r3, #0]
 80a08e0:	4b04      	ldr	r3, [pc, #16]	; (80a08f4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a08e2:	4a05      	ldr	r2, [pc, #20]	; (80a08f8 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a08e4:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a08e8:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a08ea:	f7ff bef9 	b.w	80a06e0 <set_system_mode>
 80a08ee:	bf00      	nop
 80a08f0:	20000088 	.word	0x20000088
 80a08f4:	2000007c 	.word	0x2000007c
 80a08f8:	ffff0000 	.word	0xffff0000

080a08fc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a08fc:	b510      	push	{r4, lr}
 80a08fe:	4604      	mov	r4, r0
{
	free(buffer);
 80a0900:	6800      	ldr	r0, [r0, #0]
 80a0902:	f7ff ffa9 	bl	80a0858 <free>
}
 80a0906:	4620      	mov	r0, r4
 80a0908:	bd10      	pop	{r4, pc}

080a090a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a090a:	b510      	push	{r4, lr}
 80a090c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a090e:	6800      	ldr	r0, [r0, #0]
 80a0910:	b108      	cbz	r0, 80a0916 <_ZN6String10invalidateEv+0xc>
 80a0912:	f7ff ffa1 	bl	80a0858 <free>
	buffer = NULL;
 80a0916:	2300      	movs	r3, #0
	capacity = len = 0;
 80a0918:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a091c:	6023      	str	r3, [r4, #0]
}
 80a091e:	bd10      	pop	{r4, pc}

080a0920 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0920:	b538      	push	{r3, r4, r5, lr}
 80a0922:	4604      	mov	r4, r0
 80a0924:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0926:	6800      	ldr	r0, [r0, #0]
 80a0928:	3101      	adds	r1, #1
 80a092a:	f7ff ff9d 	bl	80a0868 <realloc>
	if (newbuffer) {
 80a092e:	b110      	cbz	r0, 80a0936 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0930:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a0934:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0936:	bd38      	pop	{r3, r4, r5, pc}

080a0938 <_ZN6String7reserveEj>:
{
 80a0938:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a093a:	6803      	ldr	r3, [r0, #0]
{
 80a093c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a093e:	b123      	cbz	r3, 80a094a <_ZN6String7reserveEj+0x12>
 80a0940:	6843      	ldr	r3, [r0, #4]
 80a0942:	428b      	cmp	r3, r1
 80a0944:	d301      	bcc.n	80a094a <_ZN6String7reserveEj+0x12>
 80a0946:	2001      	movs	r0, #1
}
 80a0948:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a094a:	4620      	mov	r0, r4
 80a094c:	f7ff ffe8 	bl	80a0920 <_ZN6String12changeBufferEj>
 80a0950:	2800      	cmp	r0, #0
 80a0952:	d0f9      	beq.n	80a0948 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a0954:	68a3      	ldr	r3, [r4, #8]
 80a0956:	2b00      	cmp	r3, #0
 80a0958:	d1f5      	bne.n	80a0946 <_ZN6String7reserveEj+0xe>
 80a095a:	6822      	ldr	r2, [r4, #0]
 80a095c:	7013      	strb	r3, [r2, #0]
 80a095e:	e7f2      	b.n	80a0946 <_ZN6String7reserveEj+0xe>

080a0960 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0960:	b570      	push	{r4, r5, r6, lr}
 80a0962:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0964:	4611      	mov	r1, r2
{
 80a0966:	4604      	mov	r4, r0
 80a0968:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a096a:	f7ff ffe5 	bl	80a0938 <_ZN6String7reserveEj>
 80a096e:	b920      	cbnz	r0, 80a097a <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a0970:	4620      	mov	r0, r4
 80a0972:	f7ff ffca 	bl	80a090a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a0976:	4620      	mov	r0, r4
 80a0978:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a097a:	462a      	mov	r2, r5
 80a097c:	4631      	mov	r1, r6
 80a097e:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a0980:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0982:	f000 ffe0 	bl	80a1946 <memcpy>
	buffer[len] = 0;
 80a0986:	2100      	movs	r1, #0
 80a0988:	6822      	ldr	r2, [r4, #0]
 80a098a:	68a3      	ldr	r3, [r4, #8]
 80a098c:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a098e:	e7f2      	b.n	80a0976 <_ZN6String4copyEPKcj+0x16>

080a0990 <_ZN6StringC1EPK19__FlashStringHelper>:
String::String(const __FlashStringHelper *pstr)
 80a0990:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a0992:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 80a0994:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0996:	460d      	mov	r5, r1
	capacity = 0;
 80a0998:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a099c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a099e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a09a0:	b139      	cbz	r1, 80a09b2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 80a09a2:	4608      	mov	r0, r1
 80a09a4:	f001 f82f 	bl	80a1a06 <strlen>
 80a09a8:	4629      	mov	r1, r5
 80a09aa:	4602      	mov	r2, r0
 80a09ac:	4620      	mov	r0, r4
 80a09ae:	f7ff ffd7 	bl	80a0960 <_ZN6String4copyEPKcj>
}
 80a09b2:	4620      	mov	r0, r4
 80a09b4:	bd38      	pop	{r3, r4, r5, pc}

080a09b6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a09b6:	4288      	cmp	r0, r1
{
 80a09b8:	b510      	push	{r4, lr}
 80a09ba:	460b      	mov	r3, r1
 80a09bc:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a09be:	d004      	beq.n	80a09ca <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a09c0:	6809      	ldr	r1, [r1, #0]
 80a09c2:	b121      	cbz	r1, 80a09ce <_ZN6StringaSERKS_+0x18>
 80a09c4:	689a      	ldr	r2, [r3, #8]
 80a09c6:	f7ff ffcb 	bl	80a0960 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a09ca:	4620      	mov	r0, r4
 80a09cc:	bd10      	pop	{r4, pc}
	else invalidate();
 80a09ce:	f7ff ff9c 	bl	80a090a <_ZN6String10invalidateEv>
 80a09d2:	e7fa      	b.n	80a09ca <_ZN6StringaSERKS_+0x14>

080a09d4 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a09d4:	2300      	movs	r3, #0
String::String(const String &value)
 80a09d6:	b510      	push	{r4, lr}
 80a09d8:	4604      	mov	r4, r0
	capacity = 0;
 80a09da:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a09de:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a09e0:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a09e2:	f7ff ffe8 	bl	80a09b6 <_ZN6StringaSERKS_>
}
 80a09e6:	4620      	mov	r0, r4
 80a09e8:	bd10      	pop	{r4, pc}

080a09ea <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a09ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a09ec:	4606      	mov	r6, r0
 80a09ee:	460d      	mov	r5, r1
  size_t n = 0;
 80a09f0:	2400      	movs	r4, #0
 80a09f2:	188f      	adds	r7, r1, r2
  while (size--) {
 80a09f4:	42bd      	cmp	r5, r7
 80a09f6:	d00c      	beq.n	80a0a12 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a09f8:	6833      	ldr	r3, [r6, #0]
 80a09fa:	4630      	mov	r0, r6
 80a09fc:	689b      	ldr	r3, [r3, #8]
 80a09fe:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0a02:	4798      	blx	r3
     if (chunk>=0)
 80a0a04:	1e03      	subs	r3, r0, #0
 80a0a06:	db01      	blt.n	80a0a0c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0a08:	441c      	add	r4, r3
  while (size--) {
 80a0a0a:	e7f3      	b.n	80a09f4 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0a0c:	2c00      	cmp	r4, #0
 80a0a0e:	bf08      	it	eq
 80a0a10:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0a12:	4620      	mov	r0, r4
 80a0a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0a16 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0a16:	b570      	push	{r4, r5, r6, lr}
 80a0a18:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0a1a:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0a1c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0a1e:	b149      	cbz	r1, 80a0a34 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0a20:	f000 fff1 	bl	80a1a06 <strlen>
 80a0a24:	682b      	ldr	r3, [r5, #0]
 80a0a26:	4602      	mov	r2, r0
 80a0a28:	4621      	mov	r1, r4
 80a0a2a:	4628      	mov	r0, r5
    }
 80a0a2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0a30:	68db      	ldr	r3, [r3, #12]
 80a0a32:	4718      	bx	r3
    }
 80a0a34:	bd70      	pop	{r4, r5, r6, pc}

080a0a36 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a0a36:	b508      	push	{r3, lr}
  return write(str);
 80a0a38:	f7ff ffed 	bl	80a0a16 <_ZN5Print5writeEPKc>
}
 80a0a3c:	bd08      	pop	{r3, pc}

080a0a3e <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a0a3e:	6803      	ldr	r3, [r0, #0]
 80a0a40:	689b      	ldr	r3, [r3, #8]
 80a0a42:	4718      	bx	r3

080a0a44 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0a44:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0a46:	2a01      	cmp	r2, #1
 80a0a48:	bf98      	it	ls
 80a0a4a:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0a4c:	b530      	push	{r4, r5, lr}
 80a0a4e:	b08b      	sub	sp, #44	; 0x2c
 80a0a50:	460c      	mov	r4, r1
  *str = '\0';
 80a0a52:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0a56:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0a58:	4625      	mov	r5, r4
 80a0a5a:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0a5e:	fb04 5312 	mls	r3, r4, r2, r5
 80a0a62:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0a64:	2b09      	cmp	r3, #9
 80a0a66:	bf94      	ite	ls
 80a0a68:	3330      	addls	r3, #48	; 0x30
 80a0a6a:	3337      	addhi	r3, #55	; 0x37
 80a0a6c:	b2db      	uxtb	r3, r3
  } while(n);
 80a0a6e:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0a70:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0a74:	d9f0      	bls.n	80a0a58 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0a76:	f7ff ffce 	bl	80a0a16 <_ZN5Print5writeEPKc>
}
 80a0a7a:	b00b      	add	sp, #44	; 0x2c
 80a0a7c:	bd30      	pop	{r4, r5, pc}
	...

080a0a80 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0a80:	4b01      	ldr	r3, [pc, #4]	; (80a0a88 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0a82:	4a02      	ldr	r2, [pc, #8]	; (80a0a8c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0a84:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0a86:	4770      	bx	lr
 80a0a88:	2000008c 	.word	0x2000008c
 80a0a8c:	080a1b58 	.word	0x080a1b58

080a0a90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0a90:	4b02      	ldr	r3, [pc, #8]	; (80a0a9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0a92:	681a      	ldr	r2, [r3, #0]
 80a0a94:	4b02      	ldr	r3, [pc, #8]	; (80a0aa0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0a96:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0a98:	4770      	bx	lr
 80a0a9a:	bf00      	nop
 80a0a9c:	20000008 	.word	0x20000008
 80a0aa0:	20000090 	.word	0x20000090

080a0aa4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0aa4:	2100      	movs	r1, #0
 80a0aa6:	f7ff be23 	b.w	80a06f0 <system_delay_ms>

080a0aaa <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0aaa:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0aac:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0aae:	4604      	mov	r4, r0
      if (_M_manager)
 80a0ab0:	b113      	cbz	r3, 80a0ab8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0ab2:	2203      	movs	r2, #3
 80a0ab4:	4601      	mov	r1, r0
 80a0ab6:	4798      	blx	r3
    }
 80a0ab8:	4620      	mov	r0, r4
 80a0aba:	bd10      	pop	{r4, pc}

080a0abc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80a0abc:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0abe:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a0ac0:	460b      	mov	r3, r1
 80a0ac2:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0ac4:	c803      	ldmia	r0, {r0, r1}
 80a0ac6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0aca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0ace:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0ad2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a0ad6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0ada:	b002      	add	sp, #8
 80a0adc:	bd10      	pop	{r4, pc}
	...

080a0ae0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a0ae0:	2200      	movs	r2, #0
 80a0ae2:	4b01      	ldr	r3, [pc, #4]	; (80a0ae8 <_GLOBAL__sub_I_RGB+0x8>)
 80a0ae4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a0ae6:	4770      	bx	lr
 80a0ae8:	20000094 	.word	0x20000094

080a0aec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a0aec:	4b01      	ldr	r3, [pc, #4]	; (80a0af4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a0aee:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a0af0:	4770      	bx	lr
 80a0af2:	bf00      	nop
 80a0af4:	2000000c 	.word	0x2000000c

080a0af8 <serialEventRun>:
{
 80a0af8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0afa:	4b13      	ldr	r3, [pc, #76]	; (80a0b48 <serialEventRun+0x50>)
 80a0afc:	b143      	cbz	r3, 80a0b10 <serialEventRun+0x18>
 80a0afe:	f000 fc37 	bl	80a1370 <_Z16_fetch_usbserialv>
 80a0b02:	6803      	ldr	r3, [r0, #0]
 80a0b04:	691b      	ldr	r3, [r3, #16]
 80a0b06:	4798      	blx	r3
 80a0b08:	2800      	cmp	r0, #0
 80a0b0a:	dd01      	ble.n	80a0b10 <serialEventRun+0x18>
        serialEvent();
 80a0b0c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a0b10:	4b0e      	ldr	r3, [pc, #56]	; (80a0b4c <serialEventRun+0x54>)
 80a0b12:	b143      	cbz	r3, 80a0b26 <serialEventRun+0x2e>
 80a0b14:	f000 fe9e 	bl	80a1854 <_Z22__fetch_global_Serial1v>
 80a0b18:	6803      	ldr	r3, [r0, #0]
 80a0b1a:	691b      	ldr	r3, [r3, #16]
 80a0b1c:	4798      	blx	r3
 80a0b1e:	2800      	cmp	r0, #0
 80a0b20:	dd01      	ble.n	80a0b26 <serialEventRun+0x2e>
        serialEvent1();
 80a0b22:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a0b26:	4b0a      	ldr	r3, [pc, #40]	; (80a0b50 <serialEventRun+0x58>)
 80a0b28:	b10b      	cbz	r3, 80a0b2e <serialEventRun+0x36>
 80a0b2a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0b2e:	4b09      	ldr	r3, [pc, #36]	; (80a0b54 <serialEventRun+0x5c>)
 80a0b30:	b143      	cbz	r3, 80a0b44 <serialEventRun+0x4c>
 80a0b32:	f000 fc57 	bl	80a13e4 <_Z17_fetch_usbserial1v>
 80a0b36:	6803      	ldr	r3, [r0, #0]
 80a0b38:	691b      	ldr	r3, [r3, #16]
 80a0b3a:	4798      	blx	r3
 80a0b3c:	2800      	cmp	r0, #0
 80a0b3e:	dd01      	ble.n	80a0b44 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a0b40:	f3af 8000 	nop.w
}
 80a0b44:	bd08      	pop	{r3, pc}
 80a0b46:	bf00      	nop
	...

080a0b58 <_post_loop>:
{
 80a0b58:	b508      	push	{r3, lr}
	serialEventRun();
 80a0b5a:	f7ff ffcd 	bl	80a0af8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0b5e:	f7ff fcb5 	bl	80a04cc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0b62:	4b01      	ldr	r3, [pc, #4]	; (80a0b68 <_post_loop+0x10>)
 80a0b64:	6018      	str	r0, [r3, #0]
}
 80a0b66:	bd08      	pop	{r3, pc}
 80a0b68:	20000418 	.word	0x20000418

080a0b6c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0b6c:	4805      	ldr	r0, [pc, #20]	; (80a0b84 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a0b6e:	4a06      	ldr	r2, [pc, #24]	; (80a0b88 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a0b70:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0b72:	1a12      	subs	r2, r2, r0
 80a0b74:	4905      	ldr	r1, [pc, #20]	; (80a0b8c <_Z33system_initialize_user_backup_ramv+0x20>)
 80a0b76:	f000 fee6 	bl	80a1946 <memcpy>
    __backup_sram_signature = signature;
 80a0b7a:	4b05      	ldr	r3, [pc, #20]	; (80a0b90 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a0b7c:	4a05      	ldr	r2, [pc, #20]	; (80a0b94 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a0b7e:	601a      	str	r2, [r3, #0]
}
 80a0b80:	bd08      	pop	{r3, pc}
 80a0b82:	bf00      	nop
 80a0b84:	40024000 	.word	0x40024000
 80a0b88:	40024004 	.word	0x40024004
 80a0b8c:	080a1d60 	.word	0x080a1d60
 80a0b90:	40024000 	.word	0x40024000
 80a0b94:	9a271c1e 	.word	0x9a271c1e

080a0b98 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0b98:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0b9a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0b9c:	461a      	mov	r2, r3
 80a0b9e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0ba2:	9300      	str	r3, [sp, #0]
 80a0ba4:	f7ff fdc6 	bl	80a0734 <system_ctrl_set_result>
}
 80a0ba8:	b003      	add	sp, #12
 80a0baa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0bb0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0bb0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0bb2:	8843      	ldrh	r3, [r0, #2]
 80a0bb4:	2b0a      	cmp	r3, #10
 80a0bb6:	d008      	beq.n	80a0bca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0bb8:	2b50      	cmp	r3, #80	; 0x50
 80a0bba:	d10b      	bne.n	80a0bd4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a0bbc:	4b09      	ldr	r3, [pc, #36]	; (80a0be4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0bbe:	681b      	ldr	r3, [r3, #0]
 80a0bc0:	b14b      	cbz	r3, 80a0bd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a0bc2:	b003      	add	sp, #12
 80a0bc4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a0bc8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a0bca:	f7ff ffe5 	bl	80a0b98 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a0bce:	b003      	add	sp, #12
 80a0bd0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0bd4:	2300      	movs	r3, #0
 80a0bd6:	461a      	mov	r2, r3
 80a0bd8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0bdc:	9300      	str	r3, [sp, #0]
 80a0bde:	f7ff fda9 	bl	80a0734 <system_ctrl_set_result>
}
 80a0be2:	e7f4      	b.n	80a0bce <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a0be4:	200000a8 	.word	0x200000a8

080a0be8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0be8:	2100      	movs	r1, #0
{
 80a0bea:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0bec:	4811      	ldr	r0, [pc, #68]	; (80a0c34 <module_user_init_hook+0x4c>)
 80a0bee:	f7ff fe5b 	bl	80a08a8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a0bf2:	4b11      	ldr	r3, [pc, #68]	; (80a0c38 <module_user_init_hook+0x50>)
 80a0bf4:	681a      	ldr	r2, [r3, #0]
 80a0bf6:	4b11      	ldr	r3, [pc, #68]	; (80a0c3c <module_user_init_hook+0x54>)
 80a0bf8:	429a      	cmp	r2, r3
 80a0bfa:	bf0c      	ite	eq
 80a0bfc:	2201      	moveq	r2, #1
 80a0bfe:	2200      	movne	r2, #0
 80a0c00:	4b0f      	ldr	r3, [pc, #60]	; (80a0c40 <module_user_init_hook+0x58>)
 80a0c02:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0c04:	d001      	beq.n	80a0c0a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a0c06:	f7ff ffb1 	bl	80a0b6c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0c0a:	f7ff fc4f 	bl	80a04ac <HAL_RNG_GetRandomNumber>
 80a0c0e:	4604      	mov	r4, r0
    srand(seed);
 80a0c10:	f000 feb0 	bl	80a1974 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0c14:	4b0b      	ldr	r3, [pc, #44]	; (80a0c44 <module_user_init_hook+0x5c>)
 80a0c16:	b113      	cbz	r3, 80a0c1e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a0c18:	4620      	mov	r0, r4
 80a0c1a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0c1e:	2100      	movs	r1, #0
 80a0c20:	4808      	ldr	r0, [pc, #32]	; (80a0c44 <module_user_init_hook+0x5c>)
 80a0c22:	f7ff fe09 	bl	80a0838 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0c2a:	2100      	movs	r1, #0
 80a0c2c:	4806      	ldr	r0, [pc, #24]	; (80a0c48 <module_user_init_hook+0x60>)
 80a0c2e:	f7ff bd77 	b.w	80a0720 <system_ctrl_set_app_request_handler>
 80a0c32:	bf00      	nop
 80a0c34:	080a0aed 	.word	0x080a0aed
 80a0c38:	40024000 	.word	0x40024000
 80a0c3c:	9a271c1e 	.word	0x9a271c1e
 80a0c40:	200000a4 	.word	0x200000a4
 80a0c44:	00000000 	.word	0x00000000
 80a0c48:	080a0bb1 	.word	0x080a0bb1

080a0c4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0c4c:	4770      	bx	lr

080a0c4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a0c4e:	2000      	movs	r0, #0
 80a0c50:	4770      	bx	lr

080a0c52 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0c52:	b510      	push	{r4, lr}
 80a0c54:	4604      	mov	r4, r0
 80a0c56:	2110      	movs	r1, #16
 80a0c58:	f7ff fa21 	bl	80a009e <_ZdlPvj>
 80a0c5c:	4620      	mov	r0, r4
 80a0c5e:	bd10      	pop	{r4, pc}

080a0c60 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a0c60:	b508      	push	{r3, lr}
      { delete this; }
 80a0c62:	f7ff fff6 	bl	80a0c52 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0c66:	bd08      	pop	{r3, pc}

080a0c68 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0c68:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0c6a:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a0c6c:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a0c70:	6002      	str	r2, [r0, #0]
 80a0c72:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a0c74:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0c76:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a0c78:	680c      	ldr	r4, [r1, #0]
 80a0c7a:	8085      	strh	r5, [r0, #4]
 80a0c7c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0c7e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0c80:	bd30      	pop	{r4, r5, pc}

080a0c82 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0c82:	b510      	push	{r4, lr}
 80a0c84:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0c86:	6800      	ldr	r0, [r0, #0]
 80a0c88:	f7ff fde6 	bl	80a0858 <free>
}
 80a0c8c:	4620      	mov	r0, r4
 80a0c8e:	bd10      	pop	{r4, pc}

080a0c90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a0c90:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0c92:	68c4      	ldr	r4, [r0, #12]
 80a0c94:	b1f4      	cbz	r4, 80a0cd4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a0c96:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0c98:	2b02      	cmp	r3, #2
 80a0c9a:	d103      	bne.n	80a0ca4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a0c9c:	f104 000c 	add.w	r0, r4, #12
 80a0ca0:	f7ff ffef 	bl	80a0c82 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a0ca4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0ca6:	b135      	cbz	r5, 80a0cb6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0ca8:	4628      	mov	r0, r5
 80a0caa:	f7ff fefe 	bl	80a0aaa <_ZNSt14_Function_baseD1Ev>
 80a0cae:	2110      	movs	r1, #16
 80a0cb0:	4628      	mov	r0, r5
 80a0cb2:	f7ff f9f4 	bl	80a009e <_ZdlPvj>
 80a0cb6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0cb8:	b135      	cbz	r5, 80a0cc8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0cba:	4628      	mov	r0, r5
 80a0cbc:	f7ff fef5 	bl	80a0aaa <_ZNSt14_Function_baseD1Ev>
 80a0cc0:	2110      	movs	r1, #16
 80a0cc2:	4628      	mov	r0, r5
 80a0cc4:	f7ff f9eb 	bl	80a009e <_ZdlPvj>
 80a0cc8:	4620      	mov	r0, r4
 80a0cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0cce:	2114      	movs	r1, #20
 80a0cd0:	f7ff b9e5 	b.w	80a009e <_ZdlPvj>
 80a0cd4:	bd38      	pop	{r3, r4, r5, pc}

080a0cd6 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a0cd6:	b510      	push	{r4, lr}
 80a0cd8:	b088      	sub	sp, #32
 80a0cda:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a0cdc:	4668      	mov	r0, sp
 80a0cde:	f7ff fe57 	bl	80a0990 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a0ce2:	4669      	mov	r1, sp
 80a0ce4:	a804      	add	r0, sp, #16
 80a0ce6:	f7ff fe75 	bl	80a09d4 <_ZN6StringC1ERKS_>
 80a0cea:	a804      	add	r0, sp, #16
 80a0cec:	47a0      	blx	r4
 80a0cee:	4604      	mov	r4, r0
 80a0cf0:	a804      	add	r0, sp, #16
 80a0cf2:	f7ff fe03 	bl	80a08fc <_ZN6StringD1Ev>
    String p(param);
 80a0cf6:	4668      	mov	r0, sp
 80a0cf8:	f7ff fe00 	bl	80a08fc <_ZN6StringD1Ev>
}
 80a0cfc:	4620      	mov	r0, r4
 80a0cfe:	b008      	add	sp, #32
 80a0d00:	bd10      	pop	{r4, pc}

080a0d02 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a0d02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a0d04:	2300      	movs	r3, #0
         size = sizeof(*this);
 80a0d06:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80a0d08:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80a0d0c:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a0d0e:	4669      	mov	r1, sp
 80a0d10:	461a      	mov	r2, r3
 80a0d12:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80a0d14:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80a0d18:	f8ad 4000 	strh.w	r4, [sp]
 80a0d1c:	f7ff fd74 	bl	80a0808 <spark_function>
}
 80a0d20:	b004      	add	sp, #16
 80a0d22:	bd10      	pop	{r4, pc}

080a0d24 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0d24:	680b      	ldr	r3, [r1, #0]
 80a0d26:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 80a0d28:	684b      	ldr	r3, [r1, #4]
 80a0d2a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 80a0d2c:	b113      	cbz	r3, 80a0d34 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 80a0d2e:	685a      	ldr	r2, [r3, #4]
 80a0d30:	3201      	adds	r2, #1
 80a0d32:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0d34:	4770      	bx	lr

080a0d36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0d36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0d38:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80a0d3a:	4668      	mov	r0, sp
 80a0d3c:	460d      	mov	r5, r1
 80a0d3e:	f7ff fff1 	bl	80a0d24 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0d42:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0d44:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0d46:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a0d48:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a0d4a:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a0d4c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a0d4e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0d50:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a0d52:	f7ff fa13 	bl	80a017c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a0d56:	b135      	cbz	r5, 80a0d66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 80a0d58:	1d28      	adds	r0, r5, #4
 80a0d5a:	f7ff fa0f 	bl	80a017c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0d5e:	2108      	movs	r1, #8
 80a0d60:	4628      	mov	r0, r5
 80a0d62:	f7ff f99c 	bl	80a009e <_ZdlPvj>
        return p;
    }
 80a0d66:	4620      	mov	r0, r4
 80a0d68:	b003      	add	sp, #12
 80a0d6a:	bd30      	pop	{r4, r5, pc}

080a0d6c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0d6c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a0d6e:	b510      	push	{r4, lr}
      if (_M_empty())
 80a0d70:	b90a      	cbnz	r2, 80a0d76 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0d72:	f000 fddf 	bl	80a1934 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0d76:	68c3      	ldr	r3, [r0, #12]
    }
 80a0d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0d7c:	4718      	bx	r3

080a0d7e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0d7e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a0d80:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a0d82:	f100 0110 	add.w	r1, r0, #16
 80a0d86:	f7ff fff1 	bl	80a0d6c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a0d8a:	bd08      	pop	{r3, pc}

080a0d8c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a0d8c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a0d8e:	b510      	push	{r4, lr}
      if (_M_empty())
 80a0d90:	b90a      	cbnz	r2, 80a0d96 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0d92:	f000 fdcf 	bl	80a1934 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0d96:	68c3      	ldr	r3, [r0, #12]
    }
 80a0d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0d9c:	4718      	bx	r3

080a0d9e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0d9e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a0da0:	6800      	ldr	r0, [r0, #0]
 80a0da2:	f100 0110 	add.w	r1, r0, #16
 80a0da6:	f7ff fff1 	bl	80a0d8c <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a0daa:	bd08      	pop	{r3, pc}

080a0dac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0dac:	b538      	push	{r3, r4, r5, lr}
 80a0dae:	2300      	movs	r3, #0
 80a0db0:	4604      	mov	r4, r0
 80a0db2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0db4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0db6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0db8:	f7ff f96d 	bl	80a0096 <_Znwj>
 80a0dbc:	b128      	cbz	r0, 80a0dca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a0dbe:	2301      	movs	r3, #1
 80a0dc0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a0dc4:	4b02      	ldr	r3, [pc, #8]	; (80a0dd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a0dc6:	60c5      	str	r5, [r0, #12]
 80a0dc8:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0dca:	6020      	str	r0, [r4, #0]
	}
 80a0dcc:	4620      	mov	r0, r4
 80a0dce:	bd38      	pop	{r3, r4, r5, pc}
 80a0dd0:	080a1b80 	.word	0x080a1b80

080a0dd4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a0dd4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a0dd6:	2300      	movs	r3, #0
 80a0dd8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a0dda:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a0ddc:	4604      	mov	r4, r0
 80a0dde:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a0de0:	b12b      	cbz	r3, 80a0dee <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0de2:	2202      	movs	r2, #2
 80a0de4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0de6:	68eb      	ldr	r3, [r5, #12]
 80a0de8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0dea:	68ab      	ldr	r3, [r5, #8]
 80a0dec:	60a3      	str	r3, [r4, #8]
    }
 80a0dee:	4620      	mov	r0, r4
 80a0df0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0df4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a0df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0df6:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 80a0df8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a0dfa:	4668      	mov	r0, sp
 80a0dfc:	f7ff ff34 	bl	80a0c68 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a0e00:	f04f 0302 	mov.w	r3, #2
 80a0e04:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a0e08:	2a00      	cmp	r2, #0
 80a0e0a:	d103      	bne.n	80a0e14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a0e0c:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a0e10:	2900      	cmp	r1, #0
 80a0e12:	d1f7      	bne.n	80a0e04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a0e14:	d125      	bne.n	80a0e62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a0e16:	f104 050c 	add.w	r5, r4, #12
 80a0e1a:	4669      	mov	r1, sp
 80a0e1c:	4628      	mov	r0, r5
 80a0e1e:	f7ff ff23 	bl	80a0c68 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a0e22:	2301      	movs	r3, #1
 80a0e24:	f3bf 8f5b 	dmb	ish
 80a0e28:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a0e2a:	2000      	movs	r0, #0
 80a0e2c:	f3bf 8f5b 	dmb	ish
 80a0e30:	f104 0308 	add.w	r3, r4, #8
 80a0e34:	e853 6f00 	ldrex	r6, [r3]
 80a0e38:	e843 0200 	strex	r2, r0, [r3]
 80a0e3c:	2a00      	cmp	r2, #0
 80a0e3e:	d1f9      	bne.n	80a0e34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a0e40:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a0e44:	b16e      	cbz	r6, 80a0e62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a0e46:	f7ff fc5b 	bl	80a0700 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a0e4a:	b178      	cbz	r0, 80a0e6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0e4c:	4629      	mov	r1, r5
 80a0e4e:	4630      	mov	r0, r6
 80a0e50:	f7ff ff8c 	bl	80a0d6c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a0e54:	4630      	mov	r0, r6
 80a0e56:	f7ff fe28 	bl	80a0aaa <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a0e5a:	2110      	movs	r1, #16
 80a0e5c:	4630      	mov	r0, r6
 80a0e5e:	f7ff f91e 	bl	80a009e <_ZdlPvj>
        p_->setError(std::move(error));
 80a0e62:	4668      	mov	r0, sp
 80a0e64:	f7ff ff0d 	bl	80a0c82 <_ZN8particle5ErrorD1Ev>
    }
 80a0e68:	b009      	add	sp, #36	; 0x24
 80a0e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0e6c:	4631      	mov	r1, r6
 80a0e6e:	a802      	add	r0, sp, #8
 80a0e70:	f7ff ffb0 	bl	80a0dd4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a0e74:	68e0      	ldr	r0, [r4, #12]
 80a0e76:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a0e7a:	b108      	cbz	r0, 80a0e80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a0e7c:	f000 fda8 	bl	80a19d0 <strdup>
        type_(type) {
 80a0e80:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0e82:	2010      	movs	r0, #16
 80a0e84:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0e88:	f7ff f905 	bl	80a0096 <_Znwj>
 80a0e8c:	4605      	mov	r5, r0
 80a0e8e:	b1e8      	cbz	r0, 80a0ecc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a0e90:	2700      	movs	r7, #0
 80a0e92:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0e94:	2018      	movs	r0, #24
 80a0e96:	f7ff f8fe 	bl	80a0096 <_Znwj>
 80a0e9a:	4604      	mov	r4, r0
 80a0e9c:	b188      	cbz	r0, 80a0ec2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a0e9e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a0ea0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a0ea2:	a802      	add	r0, sp, #8
 80a0ea4:	f7ff fe0a 	bl	80a0abc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0ea8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0eaa:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0eac:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0eae:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0eb0:	9204      	str	r2, [sp, #16]
 80a0eb2:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0eb4:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a0eb6:	60e3      	str	r3, [r4, #12]
 80a0eb8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a0ebc:	9205      	str	r2, [sp, #20]
 80a0ebe:	f7ff fed3 	bl	80a0c68 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a0ec2:	4b08      	ldr	r3, [pc, #32]	; (80a0ee4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0ec4:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0ec6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0ec8:	4b07      	ldr	r3, [pc, #28]	; (80a0ee8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a0eca:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a0ecc:	a806      	add	r0, sp, #24
 80a0ece:	f7ff fed8 	bl	80a0c82 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a0ed2:	a802      	add	r0, sp, #8
 80a0ed4:	f7ff fde9 	bl	80a0aaa <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0ed8:	2200      	movs	r2, #0
 80a0eda:	4629      	mov	r1, r5
 80a0edc:	4803      	ldr	r0, [pc, #12]	; (80a0eec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a0ede:	f7ff fc17 	bl	80a0710 <application_thread_invoke>
 80a0ee2:	e7b7      	b.n	80a0e54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a0ee4:	080a0d7f 	.word	0x080a0d7f
 80a0ee8:	080a1009 	.word	0x080a1009
 80a0eec:	080a14cd 	.word	0x080a14cd

080a0ef0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0ef4:	b08a      	sub	sp, #40	; 0x28
 80a0ef6:	4605      	mov	r5, r0
 80a0ef8:	460c      	mov	r4, r1
 80a0efa:	4617      	mov	r7, r2
 80a0efc:	4698      	mov	r8, r3
 80a0efe:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0f02:	f7ff fc89 	bl	80a0818 <spark_cloud_flag_connected>
 80a0f06:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a0f08:	4682      	mov	sl, r0
 80a0f0a:	bb38      	cbnz	r0, 80a0f5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a0f0c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a0f10:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0f12:	a905      	add	r1, sp, #20
 80a0f14:	4630      	mov	r0, r6
 80a0f16:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0f1a:	f7ff fea5 	bl	80a0c68 <_ZN8particle5ErrorC1EOS0_>
 80a0f1e:	2014      	movs	r0, #20
 80a0f20:	f7ff f8b9 	bl	80a0096 <_Znwj>
 80a0f24:	4604      	mov	r4, r0
 80a0f26:	b148      	cbz	r0, 80a0f3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0f28:	2302      	movs	r3, #2
 80a0f2a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0f2c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0f2e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0f32:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a0f34:	4631      	mov	r1, r6
 80a0f36:	300c      	adds	r0, #12
 80a0f38:	f7ff fe96 	bl	80a0c68 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0f3c:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a0f3e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0f40:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a0f44:	f7ff ff32 	bl	80a0dac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0f48:	4630      	mov	r0, r6
 80a0f4a:	f7ff fe9a 	bl	80a0c82 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a0f4e:	a805      	add	r0, sp, #20
 80a0f50:	f7ff fe97 	bl	80a0c82 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a0f54:	4628      	mov	r0, r5
 80a0f56:	b00a      	add	sp, #40	; 0x28
 80a0f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d.size = sizeof(spark_send_event_data);
 80a0f5c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 80a0f5e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a0f62:	2014      	movs	r0, #20
 80a0f64:	e9cd aa08 	strd	sl, sl, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 80a0f68:	9307      	str	r3, [sp, #28]
 80a0f6a:	f7ff f894 	bl	80a0096 <_Znwj>
 80a0f6e:	4601      	mov	r1, r0
 80a0f70:	b128      	cbz	r0, 80a0f7e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0f72:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a0f76:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0f7a:	f880 a001 	strb.w	sl, [r0, #1]
 80a0f7e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0f80:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a0f82:	f7ff ff13 	bl	80a0dac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a0f86:	4b1f      	ldr	r3, [pc, #124]	; (80a1004 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x114>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a0f88:	2008      	movs	r0, #8
 80a0f8a:	9308      	str	r3, [sp, #32]
 80a0f8c:	f7ff f883 	bl	80a0096 <_Znwj>
 80a0f90:	4682      	mov	sl, r0
 80a0f92:	b110      	cbz	r0, 80a0f9a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xaa>
 80a0f94:	a903      	add	r1, sp, #12
 80a0f96:	f7ff fec5 	bl	80a0d24 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0f9a:	4642      	mov	r2, r8
 80a0f9c:	4639      	mov	r1, r7
 80a0f9e:	4620      	mov	r0, r4
 80a0fa0:	9600      	str	r6, [sp, #0]
 80a0fa2:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a0fa6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0faa:	f7ff fc3d 	bl	80a0828 <spark_send_event>
 80a0fae:	b9b8      	cbnz	r0, 80a0fe0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
	return __atomic_load_n(&_M_i, int(__m));
 80a0fb0:	9b03      	ldr	r3, [sp, #12]
 80a0fb2:	785b      	ldrb	r3, [r3, #1]
 80a0fb4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a0fb8:	b993      	cbnz	r3, 80a0fe0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
 80a0fba:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a0fbe:	a905      	add	r1, sp, #20
 80a0fc0:	a803      	add	r0, sp, #12
 80a0fc2:	9205      	str	r2, [sp, #20]
 80a0fc4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0fc8:	f7ff ff14 	bl	80a0df4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0fcc:	a805      	add	r0, sp, #20
 80a0fce:	f7ff fe58 	bl	80a0c82 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a0fd2:	a805      	add	r0, sp, #20
 80a0fd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0fd6:	f7ff feae 	bl	80a0d36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a0fda:	a806      	add	r0, sp, #24
 80a0fdc:	f7ff f8ce 	bl	80a017c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0fe0:	a903      	add	r1, sp, #12
 80a0fe2:	a805      	add	r0, sp, #20
 80a0fe4:	f7ff fe9e 	bl	80a0d24 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0fe8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0fea:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0fec:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a0fee:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a0ff0:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a0ff2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a0ff4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a0ff6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a0ff8:	f7ff f8c0 	bl	80a017c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0ffc:	a804      	add	r0, sp, #16
 80a0ffe:	f7ff f8bd 	bl	80a017c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a1002:	e7a7      	b.n	80a0f54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a1004:	080a1085 	.word	0x080a1085

080a1008 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 80a1008:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a100a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a100c:	4605      	mov	r5, r0
	switch (__op)
 80a100e:	d103      	bne.n	80a1018 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a1010:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a1012:	6003      	str	r3, [r0, #0]
      }
 80a1014:	2000      	movs	r0, #0
 80a1016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 80a1018:	2a02      	cmp	r2, #2
 80a101a:	d010      	beq.n	80a103e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a101c:	2a03      	cmp	r2, #3
 80a101e:	d1f9      	bne.n	80a1014 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a1020:	6804      	ldr	r4, [r0, #0]
 80a1022:	2c00      	cmp	r4, #0
 80a1024:	d0f6      	beq.n	80a1014 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 80a1026:	f104 0010 	add.w	r0, r4, #16
 80a102a:	f7ff fe2a 	bl	80a0c82 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a102e:	4620      	mov	r0, r4
 80a1030:	f7ff fd3b 	bl	80a0aaa <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a1034:	2118      	movs	r1, #24
 80a1036:	4620      	mov	r0, r4
 80a1038:	f7ff f831 	bl	80a009e <_ZdlPvj>
 80a103c:	e7ea      	b.n	80a1014 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a103e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a1040:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1042:	f7ff f828 	bl	80a0096 <_Znwj>
 80a1046:	4604      	mov	r4, r0
 80a1048:	b150      	cbz	r0, 80a1060 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a104a:	4631      	mov	r1, r6
 80a104c:	f7ff fec2 	bl	80a0dd4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a1050:	6930      	ldr	r0, [r6, #16]
 80a1052:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1056:	b108      	cbz	r0, 80a105c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 80a1058:	f000 fcba 	bl	80a19d0 <strdup>
        type_(type) {
 80a105c:	6120      	str	r0, [r4, #16]
 80a105e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a1060:	602c      	str	r4, [r5, #0]
	}
 80a1062:	e7d7      	b.n	80a1014 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

080a1064 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a1064:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a1066:	2300      	movs	r3, #0
 80a1068:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a106a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a106c:	4604      	mov	r4, r0
 80a106e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a1070:	b12b      	cbz	r3, 80a107e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1072:	2202      	movs	r2, #2
 80a1074:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1076:	68eb      	ldr	r3, [r5, #12]
 80a1078:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a107a:	68ab      	ldr	r3, [r5, #8]
 80a107c:	60a3      	str	r3, [r4, #8]
    }
 80a107e:	4620      	mov	r0, r4
 80a1080:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1084 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1084:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1086:	4604      	mov	r4, r0
 80a1088:	b089      	sub	sp, #36	; 0x24
 80a108a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a108c:	a801      	add	r0, sp, #4
 80a108e:	4611      	mov	r1, r2
 80a1090:	f7ff fe51 	bl	80a0d36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1094:	b1a4      	cbz	r4, 80a10c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1096:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1098:	b11d      	cbz	r5, 80a10a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a109a:	4628      	mov	r0, r5
 80a109c:	f000 fc98 	bl	80a19d0 <strdup>
 80a10a0:	4605      	mov	r5, r0
 80a10a2:	a801      	add	r0, sp, #4
 80a10a4:	a903      	add	r1, sp, #12
        type_(type) {
 80a10a6:	9503      	str	r5, [sp, #12]
 80a10a8:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a10ac:	f7ff fea2 	bl	80a0df4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a10b0:	a803      	add	r0, sp, #12
 80a10b2:	f7ff fde6 	bl	80a0c82 <_ZN8particle5ErrorD1Ev>
 80a10b6:	a802      	add	r0, sp, #8
 80a10b8:	f7ff f860 	bl	80a017c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a10bc:	b009      	add	sp, #36	; 0x24
 80a10be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a10c0:	2301      	movs	r3, #1
      { return _M_ptr; }
 80a10c2:	9d01      	ldr	r5, [sp, #4]
 80a10c4:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a10c8:	2a00      	cmp	r2, #0
 80a10ca:	d103      	bne.n	80a10d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a10cc:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a10d0:	2900      	cmp	r1, #0
 80a10d2:	d1f7      	bne.n	80a10c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a10d4:	d1ef      	bne.n	80a10b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a10d6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a10d8:	f3bf 8f5b 	dmb	ish
 80a10dc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a10de:	f3bf 8f5b 	dmb	ish
 80a10e2:	1d2b      	adds	r3, r5, #4
 80a10e4:	e853 6f00 	ldrex	r6, [r3]
 80a10e8:	e843 4200 	strex	r2, r4, [r3]
 80a10ec:	2a00      	cmp	r2, #0
 80a10ee:	d1f9      	bne.n	80a10e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a10f0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a10f4:	2e00      	cmp	r6, #0
 80a10f6:	d0de      	beq.n	80a10b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a10f8:	4620      	mov	r0, r4
 80a10fa:	f7ff fb01 	bl	80a0700 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a10fe:	4607      	mov	r7, r0
 80a1100:	b160      	cbz	r0, 80a111c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1102:	4630      	mov	r0, r6
 80a1104:	f105 010c 	add.w	r1, r5, #12
 80a1108:	f7ff fe40 	bl	80a0d8c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a110c:	4630      	mov	r0, r6
 80a110e:	f7ff fccc 	bl	80a0aaa <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a1112:	2110      	movs	r1, #16
 80a1114:	4630      	mov	r0, r6
 80a1116:	f7fe ffc2 	bl	80a009e <_ZdlPvj>
 80a111a:	e7cc      	b.n	80a10b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a111c:	4631      	mov	r1, r6
 80a111e:	a803      	add	r0, sp, #12
 80a1120:	f7ff ffa0 	bl	80a1064 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1124:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1126:	2010      	movs	r0, #16
 80a1128:	f88d 301c 	strb.w	r3, [sp, #28]
 80a112c:	f7fe ffb3 	bl	80a0096 <_Znwj>
 80a1130:	4605      	mov	r5, r0
 80a1132:	b1d0      	cbz	r0, 80a116a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a1134:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1136:	2014      	movs	r0, #20
 80a1138:	f7fe ffad 	bl	80a0096 <_Znwj>
 80a113c:	4604      	mov	r4, r0
 80a113e:	b178      	cbz	r0, 80a1160 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a1140:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a1142:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a1144:	a803      	add	r0, sp, #12
 80a1146:	f7ff fcb9 	bl	80a0abc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a114a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a114c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a114e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1150:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a1152:	9205      	str	r2, [sp, #20]
 80a1154:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1156:	60e3      	str	r3, [r4, #12]
 80a1158:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a115c:	9206      	str	r2, [sp, #24]
 80a115e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1160:	4b06      	ldr	r3, [pc, #24]	; (80a117c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1162:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1164:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1166:	4b06      	ldr	r3, [pc, #24]	; (80a1180 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a1168:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a116a:	a803      	add	r0, sp, #12
 80a116c:	f7ff fc9d 	bl	80a0aaa <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1170:	2200      	movs	r2, #0
 80a1172:	4629      	mov	r1, r5
 80a1174:	4803      	ldr	r0, [pc, #12]	; (80a1184 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a1176:	f7ff facb 	bl	80a0710 <application_thread_invoke>
 80a117a:	e7c7      	b.n	80a110c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a117c:	080a0d9f 	.word	0x080a0d9f
 80a1180:	080a1189 	.word	0x080a1189
 80a1184:	080a14cd 	.word	0x080a14cd

080a1188 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 80a1188:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a118a:	b570      	push	{r4, r5, r6, lr}
 80a118c:	4604      	mov	r4, r0
	switch (__op)
 80a118e:	d103      	bne.n	80a1198 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a1190:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a1192:	6003      	str	r3, [r0, #0]
      }
 80a1194:	2000      	movs	r0, #0
 80a1196:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 80a1198:	2a02      	cmp	r2, #2
 80a119a:	d00c      	beq.n	80a11b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a119c:	2a03      	cmp	r2, #3
 80a119e:	d1f9      	bne.n	80a1194 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a11a0:	6804      	ldr	r4, [r0, #0]
 80a11a2:	2c00      	cmp	r4, #0
 80a11a4:	d0f6      	beq.n	80a1194 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 80a11a6:	4620      	mov	r0, r4
 80a11a8:	f7ff fc7f 	bl	80a0aaa <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a11ac:	2114      	movs	r1, #20
 80a11ae:	4620      	mov	r0, r4
 80a11b0:	f7fe ff75 	bl	80a009e <_ZdlPvj>
 80a11b4:	e7ee      	b.n	80a1194 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a11b6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a11b8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a11ba:	f7fe ff6c 	bl	80a0096 <_Znwj>
 80a11be:	4605      	mov	r5, r0
 80a11c0:	b120      	cbz	r0, 80a11cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 80a11c2:	4631      	mov	r1, r6
 80a11c4:	f7ff ff4e 	bl	80a1064 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a11c8:	7c33      	ldrb	r3, [r6, #16]
 80a11ca:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a11cc:	6025      	str	r5, [r4, #0]
	}
 80a11ce:	e7e1      	b.n	80a1194 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

080a11d0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a11d0:	4770      	bx	lr

080a11d2 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a11d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a11d4:	460e      	mov	r6, r1
 80a11d6:	2400      	movs	r4, #0
 80a11d8:	f100 0708 	add.w	r7, r0, #8
 80a11dc:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a11de:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a11e2:	220a      	movs	r2, #10
 80a11e4:	4630      	mov	r0, r6
 80a11e6:	f7ff fc2d 	bl	80a0a44 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a11ea:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a11ec:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a11ee:	d101      	bne.n	80a11f4 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a11f0:	4620      	mov	r0, r4
 80a11f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a11f4:	2c00      	cmp	r4, #0
 80a11f6:	d0f2      	beq.n	80a11de <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a11f8:	212e      	movs	r1, #46	; 0x2e
 80a11fa:	4630      	mov	r0, r6
 80a11fc:	f7ff fc1f 	bl	80a0a3e <_ZN5Print5printEc>
 80a1200:	4404      	add	r4, r0
 80a1202:	e7ec      	b.n	80a11de <_ZNK9IPAddress7printToER5Print+0xc>

080a1204 <_ZN9IPAddressD0Ev>:
 80a1204:	b510      	push	{r4, lr}
 80a1206:	4604      	mov	r4, r0
 80a1208:	2118      	movs	r1, #24
 80a120a:	f7fe ff48 	bl	80a009e <_ZdlPvj>
 80a120e:	4620      	mov	r0, r4
 80a1210:	bd10      	pop	{r4, pc}
	...

080a1214 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1214:	b510      	push	{r4, lr}
 80a1216:	4604      	mov	r4, r0
 80a1218:	4b04      	ldr	r3, [pc, #16]	; (80a122c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a121a:	2211      	movs	r2, #17
 80a121c:	2100      	movs	r1, #0
 80a121e:	f840 3b04 	str.w	r3, [r0], #4
 80a1222:	f000 fb9e 	bl	80a1962 <memset>
}
 80a1226:	4620      	mov	r0, r4
 80a1228:	bd10      	pop	{r4, pc}
 80a122a:	bf00      	nop
 80a122c:	080a1b9c 	.word	0x080a1b9c

080a1230 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1230:	4603      	mov	r3, r0
 80a1232:	4a07      	ldr	r2, [pc, #28]	; (80a1250 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1234:	b510      	push	{r4, lr}
 80a1236:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a123a:	f101 0210 	add.w	r2, r1, #16
 80a123e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1242:	4291      	cmp	r1, r2
 80a1244:	f843 4b04 	str.w	r4, [r3], #4
 80a1248:	d1f9      	bne.n	80a123e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a124a:	780a      	ldrb	r2, [r1, #0]
 80a124c:	701a      	strb	r2, [r3, #0]
}
 80a124e:	bd10      	pop	{r4, pc}
 80a1250:	080a1b9c 	.word	0x080a1b9c

080a1254 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a1254:	4a02      	ldr	r2, [pc, #8]	; (80a1260 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a1256:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a125a:	2204      	movs	r2, #4
 80a125c:	7502      	strb	r2, [r0, #20]
}
 80a125e:	4770      	bx	lr
 80a1260:	080a1b9c 	.word	0x080a1b9c

080a1264 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1264:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1266:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a126a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a126e:	2304      	movs	r3, #4
 80a1270:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1274:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1278:	6044      	str	r4, [r0, #4]
 80a127a:	7503      	strb	r3, [r0, #20]
}
 80a127c:	bd10      	pop	{r4, pc}
	...

080a1280 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1280:	b513      	push	{r0, r1, r4, lr}
 80a1282:	4c04      	ldr	r4, [pc, #16]	; (80a1294 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1284:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1286:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a128a:	9400      	str	r4, [sp, #0]
 80a128c:	f7ff ffea 	bl	80a1264 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1290:	b002      	add	sp, #8
 80a1292:	bd10      	pop	{r4, pc}
 80a1294:	080a1b9c 	.word	0x080a1b9c

080a1298 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1298:	7441      	strb	r1, [r0, #17]
}
 80a129a:	4770      	bx	lr

080a129c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a129c:	4770      	bx	lr

080a129e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a129e:	4770      	bx	lr

080a12a0 <_ZN9USBSerial4readEv>:
{
 80a12a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a12a2:	2100      	movs	r1, #0
 80a12a4:	7c00      	ldrb	r0, [r0, #16]
 80a12a6:	f7ff f9fb 	bl	80a06a0 <HAL_USB_USART_Receive_Data>
}
 80a12aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a12ae:	bd08      	pop	{r3, pc}

080a12b0 <_ZN9USBSerial4peekEv>:
{
 80a12b0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a12b2:	2101      	movs	r1, #1
 80a12b4:	7c00      	ldrb	r0, [r0, #16]
 80a12b6:	f7ff f9f3 	bl	80a06a0 <HAL_USB_USART_Receive_Data>
}
 80a12ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a12be:	bd08      	pop	{r3, pc}

080a12c0 <_ZN9USBSerial17availableForWriteEv>:
{
 80a12c0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a12c2:	7c00      	ldrb	r0, [r0, #16]
 80a12c4:	f7ff f9e4 	bl	80a0690 <HAL_USB_USART_Available_Data_For_Write>
}
 80a12c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a12cc:	bd08      	pop	{r3, pc}

080a12ce <_ZN9USBSerial9availableEv>:
{
 80a12ce:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a12d0:	7c00      	ldrb	r0, [r0, #16]
 80a12d2:	f7ff f9d5 	bl	80a0680 <HAL_USB_USART_Available_Data>
}
 80a12d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a12da:	bd08      	pop	{r3, pc}

080a12dc <_ZN9USBSerial5writeEh>:
{
 80a12dc:	b538      	push	{r3, r4, r5, lr}
 80a12de:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a12e0:	7c00      	ldrb	r0, [r0, #16]
{
 80a12e2:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a12e4:	f7ff f9d4 	bl	80a0690 <HAL_USB_USART_Available_Data_For_Write>
 80a12e8:	2800      	cmp	r0, #0
 80a12ea:	dc01      	bgt.n	80a12f0 <_ZN9USBSerial5writeEh+0x14>
 80a12ec:	7c60      	ldrb	r0, [r4, #17]
 80a12ee:	b128      	cbz	r0, 80a12fc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a12f0:	4629      	mov	r1, r5
 80a12f2:	7c20      	ldrb	r0, [r4, #16]
 80a12f4:	f7ff f9dc 	bl	80a06b0 <HAL_USB_USART_Send_Data>
 80a12f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a12fc:	bd38      	pop	{r3, r4, r5, pc}

080a12fe <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a12fe:	7c00      	ldrb	r0, [r0, #16]
 80a1300:	f7ff b9de 	b.w	80a06c0 <HAL_USB_USART_Flush_Data>

080a1304 <_ZN9USBSerialD0Ev>:
 80a1304:	b510      	push	{r4, lr}
 80a1306:	4604      	mov	r4, r0
 80a1308:	2114      	movs	r1, #20
 80a130a:	f7fe fec8 	bl	80a009e <_ZdlPvj>
 80a130e:	4620      	mov	r0, r4
 80a1310:	bd10      	pop	{r4, pc}

080a1312 <__tcf_1>:
 80a1312:	4770      	bx	lr

080a1314 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1314:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a131a:	4604      	mov	r4, r0
 80a131c:	4608      	mov	r0, r1
 80a131e:	2100      	movs	r1, #0
 80a1320:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1324:	4b04      	ldr	r3, [pc, #16]	; (80a1338 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a1326:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1328:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a132a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a132c:	4611      	mov	r1, r2
  _blocking = true;
 80a132e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1330:	f7ff f996 	bl	80a0660 <HAL_USB_USART_Init>
}
 80a1334:	4620      	mov	r0, r4
 80a1336:	bd10      	pop	{r4, pc}
 80a1338:	080a1bb0 	.word	0x080a1bb0

080a133c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a133c:	2200      	movs	r2, #0
 80a133e:	7c00      	ldrb	r0, [r0, #16]
 80a1340:	f7ff b996 	b.w	80a0670 <HAL_USB_USART_Begin>

080a1344 <_Z19acquireSerialBufferv>:
{
 80a1344:	b510      	push	{r4, lr}
 80a1346:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a1348:	2214      	movs	r2, #20
 80a134a:	2100      	movs	r1, #0
 80a134c:	f000 fb09 	bl	80a1962 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a1350:	4b05      	ldr	r3, [pc, #20]	; (80a1368 <_Z19acquireSerialBufferv+0x24>)
}
 80a1352:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a1354:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1356:	4b05      	ldr	r3, [pc, #20]	; (80a136c <_Z19acquireSerialBufferv+0x28>)
 80a1358:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a135a:	f240 1301 	movw	r3, #257	; 0x101
 80a135e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1360:	2381      	movs	r3, #129	; 0x81
 80a1362:	8223      	strh	r3, [r4, #16]
}
 80a1364:	bd10      	pop	{r4, pc}
 80a1366:	bf00      	nop
 80a1368:	200000dc 	.word	0x200000dc
 80a136c:	200001dd 	.word	0x200001dd

080a1370 <_Z16_fetch_usbserialv>:
{
 80a1370:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1372:	4d0e      	ldr	r5, [pc, #56]	; (80a13ac <_Z16_fetch_usbserialv+0x3c>)
{
 80a1374:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1376:	a801      	add	r0, sp, #4
 80a1378:	f7ff ffe4 	bl	80a1344 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a137c:	7829      	ldrb	r1, [r5, #0]
 80a137e:	f3bf 8f5b 	dmb	ish
 80a1382:	f011 0401 	ands.w	r4, r1, #1
 80a1386:	d10e      	bne.n	80a13a6 <_Z16_fetch_usbserialv+0x36>
 80a1388:	4628      	mov	r0, r5
 80a138a:	f7fe fe8a 	bl	80a00a2 <__cxa_guard_acquire>
 80a138e:	b150      	cbz	r0, 80a13a6 <_Z16_fetch_usbserialv+0x36>
 80a1390:	4621      	mov	r1, r4
 80a1392:	aa01      	add	r2, sp, #4
 80a1394:	4806      	ldr	r0, [pc, #24]	; (80a13b0 <_Z16_fetch_usbserialv+0x40>)
 80a1396:	f7ff ffbd 	bl	80a1314 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a139a:	4628      	mov	r0, r5
 80a139c:	f7fe fe86 	bl	80a00ac <__cxa_guard_release>
 80a13a0:	4804      	ldr	r0, [pc, #16]	; (80a13b4 <_Z16_fetch_usbserialv+0x44>)
 80a13a2:	f000 faca 	bl	80a193a <atexit>
	return _usbserial;
}
 80a13a6:	4802      	ldr	r0, [pc, #8]	; (80a13b0 <_Z16_fetch_usbserialv+0x40>)
 80a13a8:	b007      	add	sp, #28
 80a13aa:	bd30      	pop	{r4, r5, pc}
 80a13ac:	200000ac 	.word	0x200000ac
 80a13b0:	200000b4 	.word	0x200000b4
 80a13b4:	080a129d 	.word	0x080a129d

080a13b8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a13b8:	b510      	push	{r4, lr}
 80a13ba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a13bc:	2214      	movs	r2, #20
 80a13be:	2100      	movs	r1, #0
 80a13c0:	f000 facf 	bl	80a1962 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a13c4:	4b05      	ldr	r3, [pc, #20]	; (80a13dc <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a13c6:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a13c8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a13ca:	4b05      	ldr	r3, [pc, #20]	; (80a13e0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a13cc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a13ce:	f240 1301 	movw	r3, #257	; 0x101
 80a13d2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a13d4:	2381      	movs	r3, #129	; 0x81
 80a13d6:	8223      	strh	r3, [r4, #16]
}
 80a13d8:	bd10      	pop	{r4, pc}
 80a13da:	bf00      	nop
 80a13dc:	2000025e 	.word	0x2000025e
 80a13e0:	2000035f 	.word	0x2000035f

080a13e4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a13e4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a13e6:	4c0e      	ldr	r4, [pc, #56]	; (80a1420 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a13e8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a13ea:	a801      	add	r0, sp, #4
 80a13ec:	f7ff ffe4 	bl	80a13b8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a13f0:	7823      	ldrb	r3, [r4, #0]
 80a13f2:	f3bf 8f5b 	dmb	ish
 80a13f6:	07db      	lsls	r3, r3, #31
 80a13f8:	d40e      	bmi.n	80a1418 <_Z17_fetch_usbserial1v+0x34>
 80a13fa:	4620      	mov	r0, r4
 80a13fc:	f7fe fe51 	bl	80a00a2 <__cxa_guard_acquire>
 80a1400:	b150      	cbz	r0, 80a1418 <_Z17_fetch_usbserial1v+0x34>
 80a1402:	2101      	movs	r1, #1
 80a1404:	aa01      	add	r2, sp, #4
 80a1406:	4807      	ldr	r0, [pc, #28]	; (80a1424 <_Z17_fetch_usbserial1v+0x40>)
 80a1408:	f7ff ff84 	bl	80a1314 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a140c:	4620      	mov	r0, r4
 80a140e:	f7fe fe4d 	bl	80a00ac <__cxa_guard_release>
 80a1412:	4805      	ldr	r0, [pc, #20]	; (80a1428 <_Z17_fetch_usbserial1v+0x44>)
 80a1414:	f000 fa91 	bl	80a193a <atexit>
  return _usbserial1;
}
 80a1418:	4802      	ldr	r0, [pc, #8]	; (80a1424 <_Z17_fetch_usbserial1v+0x40>)
 80a141a:	b006      	add	sp, #24
 80a141c:	bd10      	pop	{r4, pc}
 80a141e:	bf00      	nop
 80a1420:	200000b0 	.word	0x200000b0
 80a1424:	200000c8 	.word	0x200000c8
 80a1428:	080a1313 	.word	0x080a1313

080a142c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a142c:	4770      	bx	lr

080a142e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a142e:	7441      	strb	r1, [r0, #17]
}
 80a1430:	4770      	bx	lr

080a1432 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a1432:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1434:	7c00      	ldrb	r0, [r0, #16]
 80a1436:	f7ff f891 	bl	80a055c <hal_usart_available_data_for_write>
}
 80a143a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a143e:	bd08      	pop	{r3, pc}

080a1440 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1440:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1442:	7c00      	ldrb	r0, [r0, #16]
 80a1444:	f7ff f862 	bl	80a050c <hal_usart_available>
}
 80a1448:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a144c:	bd08      	pop	{r3, pc}

080a144e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a144e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1450:	7c00      	ldrb	r0, [r0, #16]
 80a1452:	f7ff f86b 	bl	80a052c <hal_usart_peek>
}
 80a1456:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a145a:	bd08      	pop	{r3, pc}

080a145c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a145c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a145e:	7c00      	ldrb	r0, [r0, #16]
 80a1460:	f7ff f85c 	bl	80a051c <hal_usart_read>
}
 80a1464:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1468:	bd08      	pop	{r3, pc}

080a146a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a146a:	7c00      	ldrb	r0, [r0, #16]
 80a146c:	f7ff b866 	b.w	80a053c <hal_usart_flush>

080a1470 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1470:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1472:	7c46      	ldrb	r6, [r0, #17]
{
 80a1474:	4604      	mov	r4, r0
 80a1476:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1478:	b12e      	cbz	r6, 80a1486 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a147a:	4629      	mov	r1, r5
 80a147c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a147e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1482:	f7ff b83b 	b.w	80a04fc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1486:	7c00      	ldrb	r0, [r0, #16]
 80a1488:	f7ff f868 	bl	80a055c <hal_usart_available_data_for_write>
 80a148c:	2800      	cmp	r0, #0
 80a148e:	dcf4      	bgt.n	80a147a <_ZN11USARTSerial5writeEh+0xa>
}
 80a1490:	4630      	mov	r0, r6
 80a1492:	bd70      	pop	{r4, r5, r6, pc}

080a1494 <_ZN11USARTSerialD0Ev>:
 80a1494:	b510      	push	{r4, lr}
 80a1496:	4604      	mov	r4, r0
 80a1498:	2114      	movs	r1, #20
 80a149a:	f7fe fe00 	bl	80a009e <_ZdlPvj>
 80a149e:	4620      	mov	r0, r4
 80a14a0:	bd10      	pop	{r4, pc}
	...

080a14a4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a14a4:	b510      	push	{r4, lr}
 80a14a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a14aa:	4604      	mov	r4, r0
 80a14ac:	4608      	mov	r0, r1
 80a14ae:	4611      	mov	r1, r2
 80a14b0:	2200      	movs	r2, #0
 80a14b2:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a14b6:	4b04      	ldr	r3, [pc, #16]	; (80a14c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a14b8:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a14ba:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a14bc:	2301      	movs	r3, #1
 80a14be:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a14c0:	f7ff f854 	bl	80a056c <hal_usart_init_ex>
}
 80a14c4:	4620      	mov	r0, r4
 80a14c6:	bd10      	pop	{r4, pc}
 80a14c8:	080a1be0 	.word	0x080a1be0

080a14cc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a14cc:	b510      	push	{r4, lr}
      if (_M_empty())
 80a14ce:	6883      	ldr	r3, [r0, #8]
 80a14d0:	4604      	mov	r4, r0
 80a14d2:	b90b      	cbnz	r3, 80a14d8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a14d4:	f000 fa2e 	bl	80a1934 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a14d8:	68c3      	ldr	r3, [r0, #12]
 80a14da:	4798      	blx	r3
      if (_M_manager)
 80a14dc:	68a3      	ldr	r3, [r4, #8]
 80a14de:	b11b      	cbz	r3, 80a14e8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a14e0:	2203      	movs	r2, #3
 80a14e2:	4621      	mov	r1, r4
 80a14e4:	4620      	mov	r0, r4
 80a14e6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a14e8:	4620      	mov	r0, r4
}
 80a14ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a14ee:	2110      	movs	r1, #16
 80a14f0:	f7fe bdd5 	b.w	80a009e <_ZdlPvj>

080a14f4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a14f4:	4770      	bx	lr

080a14f6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a14f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a14f8:	4606      	mov	r6, r0
 80a14fa:	4615      	mov	r5, r2
 80a14fc:	460c      	mov	r4, r1
 80a14fe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1500:	42bc      	cmp	r4, r7
 80a1502:	d006      	beq.n	80a1512 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1504:	6833      	ldr	r3, [r6, #0]
 80a1506:	4630      	mov	r0, r6
 80a1508:	689b      	ldr	r3, [r3, #8]
 80a150a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a150e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1510:	e7f6      	b.n	80a1500 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1512:	4628      	mov	r0, r5
 80a1514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1516 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1516:	2200      	movs	r2, #0
 80a1518:	7c00      	ldrb	r0, [r0, #16]
 80a151a:	f7ff b857 	b.w	80a05cc <hal_i2c_write>

080a151e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a151e:	2100      	movs	r1, #0
 80a1520:	7c00      	ldrb	r0, [r0, #16]
 80a1522:	f7ff b85b 	b.w	80a05dc <hal_i2c_available>

080a1526 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1526:	2100      	movs	r1, #0
 80a1528:	7c00      	ldrb	r0, [r0, #16]
 80a152a:	f7ff b85f 	b.w	80a05ec <hal_i2c_read>

080a152e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a152e:	2100      	movs	r1, #0
 80a1530:	7c00      	ldrb	r0, [r0, #16]
 80a1532:	f7ff b863 	b.w	80a05fc <hal_i2c_peek>

080a1536 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1536:	2100      	movs	r1, #0
 80a1538:	7c00      	ldrb	r0, [r0, #16]
 80a153a:	f7ff b867 	b.w	80a060c <hal_i2c_flush>

080a153e <_ZN7TwoWireD0Ev>:
 80a153e:	b510      	push	{r4, lr}
 80a1540:	4604      	mov	r4, r0
 80a1542:	2114      	movs	r1, #20
 80a1544:	f7fe fdab 	bl	80a009e <_ZdlPvj>
 80a1548:	4620      	mov	r0, r4
 80a154a:	bd10      	pop	{r4, pc}

080a154c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a154c:	b510      	push	{r4, lr}
 80a154e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1552:	4604      	mov	r4, r0
 80a1554:	4608      	mov	r0, r1
 80a1556:	2100      	movs	r1, #0
 80a1558:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a155c:	4b03      	ldr	r3, [pc, #12]	; (80a156c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a155e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1560:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a1562:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1564:	f7ff f862 	bl	80a062c <hal_i2c_init>
}
 80a1568:	4620      	mov	r0, r4
 80a156a:	bd10      	pop	{r4, pc}
 80a156c:	080a1c10 	.word	0x080a1c10

080a1570 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 80a1570:	2200      	movs	r2, #0
 80a1572:	7c00      	ldrb	r0, [r0, #16]
 80a1574:	f7ff b802 	b.w	80a057c <hal_i2c_set_speed>

080a1578 <_ZN7TwoWire12stretchClockEb>:
  hal_i2c_stretch_clock(_i2c, stretch, NULL);
 80a1578:	2200      	movs	r2, #0
 80a157a:	7c00      	ldrb	r0, [r0, #16]
 80a157c:	f7ff b806 	b.w	80a058c <hal_i2c_stretch_clock>

080a1580 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1580:	2300      	movs	r3, #0
 80a1582:	7c00      	ldrb	r0, [r0, #16]
 80a1584:	461a      	mov	r2, r3
 80a1586:	4619      	mov	r1, r3
 80a1588:	f7ff b808 	b.w	80a059c <hal_i2c_begin>

080a158c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a158c:	2200      	movs	r2, #0
 80a158e:	7c00      	ldrb	r0, [r0, #16]
 80a1590:	f7ff b80c 	b.w	80a05ac <hal_i2c_begin_transmission>

080a1594 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a1594:	2200      	movs	r2, #0
 80a1596:	7c00      	ldrb	r0, [r0, #16]
 80a1598:	f7ff b810 	b.w	80a05bc <hal_i2c_end_transmission>

080a159c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a159c:	2101      	movs	r1, #1
 80a159e:	f7ff bff9 	b.w	80a1594 <_ZN7TwoWire15endTransmissionEh>

080a15a2 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a15a2:	2200      	movs	r2, #0
 80a15a4:	6840      	ldr	r0, [r0, #4]
 80a15a6:	4611      	mov	r1, r2
 80a15a8:	f7ff b8e6 	b.w	80a0778 <network_ready>

080a15ac <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a15ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a15ae:	4615      	mov	r5, r2
 80a15b0:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a15b2:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a15b4:	460e      	mov	r6, r1
 80a15b6:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a15b8:	2100      	movs	r1, #0
 80a15ba:	a803      	add	r0, sp, #12
 80a15bc:	f000 f9d1 	bl	80a1962 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a15c0:	4628      	mov	r0, r5
 80a15c2:	f000 fa20 	bl	80a1a06 <strlen>
 80a15c6:	2700      	movs	r7, #0
 80a15c8:	b281      	uxth	r1, r0
 80a15ca:	6873      	ldr	r3, [r6, #4]
 80a15cc:	4628      	mov	r0, r5
 80a15ce:	9700      	str	r7, [sp, #0]
 80a15d0:	aa03      	add	r2, sp, #12
 80a15d2:	f7ff f87d 	bl	80a06d0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a15d6:	b130      	cbz	r0, 80a15e6 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a15d8:	4639      	mov	r1, r7
 80a15da:	4620      	mov	r0, r4
 80a15dc:	f7ff fe3a 	bl	80a1254 <_ZN9IPAddressC1Em>
    }
 80a15e0:	4620      	mov	r0, r4
 80a15e2:	b009      	add	sp, #36	; 0x24
 80a15e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a15e6:	4620      	mov	r0, r4
 80a15e8:	a903      	add	r1, sp, #12
 80a15ea:	f7ff fe21 	bl	80a1230 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a15ee:	e7f7      	b.n	80a15e0 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a15f0 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a15f0:	2200      	movs	r2, #0
 80a15f2:	6840      	ldr	r0, [r0, #4]
 80a15f4:	4611      	mov	r1, r2
 80a15f6:	f7ff b8df 	b.w	80a07b8 <network_listening>

080a15fa <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a15fa:	2200      	movs	r2, #0
 80a15fc:	6840      	ldr	r0, [r0, #4]
 80a15fe:	4611      	mov	r1, r2
 80a1600:	f7ff b8ea 	b.w	80a07d8 <network_get_listen_timeout>

080a1604 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a1604:	2200      	movs	r2, #0
 80a1606:	6840      	ldr	r0, [r0, #4]
 80a1608:	f7ff b8de 	b.w	80a07c8 <network_set_listen_timeout>

080a160c <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a160c:	2200      	movs	r2, #0
 80a160e:	6840      	ldr	r0, [r0, #4]
 80a1610:	f081 0101 	eor.w	r1, r1, #1
 80a1614:	f7ff b8c8 	b.w	80a07a8 <network_listen>

080a1618 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a1618:	2300      	movs	r3, #0
 80a161a:	6840      	ldr	r0, [r0, #4]
 80a161c:	461a      	mov	r2, r3
 80a161e:	4619      	mov	r1, r3
 80a1620:	f7ff b8ba 	b.w	80a0798 <network_off>

080a1624 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a1624:	2300      	movs	r3, #0
 80a1626:	6840      	ldr	r0, [r0, #4]
 80a1628:	461a      	mov	r2, r3
 80a162a:	4619      	mov	r1, r3
 80a162c:	f7ff b8ac 	b.w	80a0788 <network_on>

080a1630 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a1630:	2200      	movs	r2, #0
 80a1632:	6840      	ldr	r0, [r0, #4]
 80a1634:	4611      	mov	r1, r2
 80a1636:	f7ff b88f 	b.w	80a0758 <network_connecting>

080a163a <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a163a:	2200      	movs	r2, #0
 80a163c:	2102      	movs	r1, #2
 80a163e:	6840      	ldr	r0, [r0, #4]
 80a1640:	f7ff b892 	b.w	80a0768 <network_disconnect>

080a1644 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a1644:	2300      	movs	r3, #0
 80a1646:	6840      	ldr	r0, [r0, #4]
 80a1648:	461a      	mov	r2, r3
 80a164a:	f7ff b87d 	b.w	80a0748 <network_connect>
	...

080a1650 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1650:	2204      	movs	r2, #4
 80a1652:	4b02      	ldr	r3, [pc, #8]	; (80a165c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1654:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1656:	4a02      	ldr	r2, [pc, #8]	; (80a1660 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1658:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a165a:	4770      	bx	lr
 80a165c:	200003e0 	.word	0x200003e0
 80a1660:	080a1c38 	.word	0x080a1c38

080a1664 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1664:	2300      	movs	r3, #0
 80a1666:	6840      	ldr	r0, [r0, #4]
 80a1668:	461a      	mov	r2, r3
 80a166a:	f7ff b86d 	b.w	80a0748 <network_connect>

080a166e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a166e:	2200      	movs	r2, #0
 80a1670:	2102      	movs	r1, #2
 80a1672:	6840      	ldr	r0, [r0, #4]
 80a1674:	f7ff b878 	b.w	80a0768 <network_disconnect>

080a1678 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1678:	2200      	movs	r2, #0
 80a167a:	6840      	ldr	r0, [r0, #4]
 80a167c:	4611      	mov	r1, r2
 80a167e:	f7ff b86b 	b.w	80a0758 <network_connecting>

080a1682 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1682:	2200      	movs	r2, #0
 80a1684:	6840      	ldr	r0, [r0, #4]
 80a1686:	4611      	mov	r1, r2
 80a1688:	f7ff b876 	b.w	80a0778 <network_ready>

080a168c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a168c:	2300      	movs	r3, #0
 80a168e:	6840      	ldr	r0, [r0, #4]
 80a1690:	461a      	mov	r2, r3
 80a1692:	4619      	mov	r1, r3
 80a1694:	f7ff b878 	b.w	80a0788 <network_on>

080a1698 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1698:	2300      	movs	r3, #0
 80a169a:	6840      	ldr	r0, [r0, #4]
 80a169c:	461a      	mov	r2, r3
 80a169e:	4619      	mov	r1, r3
 80a16a0:	f7ff b87a 	b.w	80a0798 <network_off>

080a16a4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a16a4:	2100      	movs	r1, #0
 80a16a6:	6840      	ldr	r0, [r0, #4]
 80a16a8:	f7ff b89e 	b.w	80a07e8 <network_is_on>

080a16ac <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a16ac:	2100      	movs	r1, #0
 80a16ae:	6840      	ldr	r0, [r0, #4]
 80a16b0:	f7ff b8a2 	b.w	80a07f8 <network_is_off>

080a16b4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a16b4:	2200      	movs	r2, #0
 80a16b6:	6840      	ldr	r0, [r0, #4]
 80a16b8:	f081 0101 	eor.w	r1, r1, #1
 80a16bc:	f7ff b874 	b.w	80a07a8 <network_listen>

080a16c0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a16c0:	2200      	movs	r2, #0
 80a16c2:	6840      	ldr	r0, [r0, #4]
 80a16c4:	f7ff b880 	b.w	80a07c8 <network_set_listen_timeout>

080a16c8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a16c8:	2200      	movs	r2, #0
 80a16ca:	6840      	ldr	r0, [r0, #4]
 80a16cc:	4611      	mov	r1, r2
 80a16ce:	f7ff b883 	b.w	80a07d8 <network_get_listen_timeout>

080a16d2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a16d2:	2200      	movs	r2, #0
 80a16d4:	6840      	ldr	r0, [r0, #4]
 80a16d6:	4611      	mov	r1, r2
 80a16d8:	f7ff b86e 	b.w	80a07b8 <network_listening>

080a16dc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a16dc:	b570      	push	{r4, r5, r6, lr}
 80a16de:	4615      	mov	r5, r2
 80a16e0:	b08e      	sub	sp, #56	; 0x38
 80a16e2:	4604      	mov	r4, r0
    IPAddress addr;
 80a16e4:	a808      	add	r0, sp, #32
 80a16e6:	f7ff fd95 	bl	80a1214 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a16ea:	2211      	movs	r2, #17
 80a16ec:	2100      	movs	r1, #0
 80a16ee:	a803      	add	r0, sp, #12
 80a16f0:	f000 f937 	bl	80a1962 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a16f4:	2600      	movs	r6, #0
 80a16f6:	4628      	mov	r0, r5
 80a16f8:	f000 f985 	bl	80a1a06 <strlen>
 80a16fc:	4b0a      	ldr	r3, [pc, #40]	; (80a1728 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a16fe:	9600      	str	r6, [sp, #0]
 80a1700:	b281      	uxth	r1, r0
 80a1702:	685b      	ldr	r3, [r3, #4]
 80a1704:	4628      	mov	r0, r5
 80a1706:	aa03      	add	r2, sp, #12
 80a1708:	f7fe ffe2 	bl	80a06d0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a170c:	b130      	cbz	r0, 80a171c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a170e:	4631      	mov	r1, r6
 80a1710:	4620      	mov	r0, r4
 80a1712:	f7ff fd9f 	bl	80a1254 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1716:	4620      	mov	r0, r4
 80a1718:	b00e      	add	sp, #56	; 0x38
 80a171a:	bd70      	pop	{r4, r5, r6, pc}
 80a171c:	4620      	mov	r0, r4
 80a171e:	a903      	add	r1, sp, #12
 80a1720:	f7ff fd86 	bl	80a1230 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1724:	e7f7      	b.n	80a1716 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1726:	bf00      	nop
 80a1728:	200003e0 	.word	0x200003e0

080a172c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a172c:	4b02      	ldr	r3, [pc, #8]	; (80a1738 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a172e:	4a03      	ldr	r2, [pc, #12]	; (80a173c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1730:	601a      	str	r2, [r3, #0]
 80a1732:	2200      	movs	r2, #0
 80a1734:	605a      	str	r2, [r3, #4]

} // spark
 80a1736:	4770      	bx	lr
 80a1738:	200003e8 	.word	0x200003e8
 80a173c:	080a1c74 	.word	0x080a1c74

080a1740 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1740:	4b02      	ldr	r3, [pc, #8]	; (80a174c <__tcf_0+0xc>)
 80a1742:	6898      	ldr	r0, [r3, #8]
 80a1744:	b108      	cbz	r0, 80a174a <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a1746:	f7fe bed1 	b.w	80a04ec <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a174a:	4770      	bx	lr
 80a174c:	200003f4 	.word	0x200003f4

080a1750 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a1750:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a1752:	b570      	push	{r4, r5, r6, lr}
 80a1754:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a1756:	d901      	bls.n	80a175c <pinAvailable+0xc>
    return false;
 80a1758:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a175a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a175c:	f1a0 030d 	sub.w	r3, r0, #13
 80a1760:	2b02      	cmp	r3, #2
 80a1762:	d90b      	bls.n	80a177c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a1764:	2801      	cmp	r0, #1
 80a1766:	d824      	bhi.n	80a17b2 <pinAvailable+0x62>
 80a1768:	f000 f8be 	bl	80a18e8 <_Z19__fetch_global_Wirev>
 80a176c:	2100      	movs	r1, #0
 80a176e:	7c00      	ldrb	r0, [r0, #16]
 80a1770:	f7fe ff54 	bl	80a061c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1774:	f080 0001 	eor.w	r0, r0, #1
 80a1778:	b2c0      	uxtb	r0, r0
 80a177a:	e7ee      	b.n	80a175a <pinAvailable+0xa>
 80a177c:	4e12      	ldr	r6, [pc, #72]	; (80a17c8 <pinAvailable+0x78>)
 80a177e:	7831      	ldrb	r1, [r6, #0]
 80a1780:	f3bf 8f5b 	dmb	ish
 80a1784:	f011 0501 	ands.w	r5, r1, #1
 80a1788:	d10d      	bne.n	80a17a6 <pinAvailable+0x56>
 80a178a:	4630      	mov	r0, r6
 80a178c:	f7fe fc89 	bl	80a00a2 <__cxa_guard_acquire>
 80a1790:	b148      	cbz	r0, 80a17a6 <pinAvailable+0x56>
 80a1792:	4629      	mov	r1, r5
 80a1794:	480d      	ldr	r0, [pc, #52]	; (80a17cc <pinAvailable+0x7c>)
 80a1796:	f7ff f88f 	bl	80a08b8 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a179a:	4630      	mov	r0, r6
 80a179c:	f7fe fc86 	bl	80a00ac <__cxa_guard_release>
 80a17a0:	480b      	ldr	r0, [pc, #44]	; (80a17d0 <pinAvailable+0x80>)
 80a17a2:	f000 f8ca 	bl	80a193a <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a17a6:	4b09      	ldr	r3, [pc, #36]	; (80a17cc <pinAvailable+0x7c>)
 80a17a8:	7818      	ldrb	r0, [r3, #0]
 80a17aa:	f7fe ff51 	bl	80a0650 <hal_spi_is_enabled>
 80a17ae:	2800      	cmp	r0, #0
 80a17b0:	d1d2      	bne.n	80a1758 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a17b2:	3c12      	subs	r4, #18
 80a17b4:	2c01      	cmp	r4, #1
 80a17b6:	d805      	bhi.n	80a17c4 <pinAvailable+0x74>
 80a17b8:	f000 f84c 	bl	80a1854 <_Z22__fetch_global_Serial1v>
 80a17bc:	7c00      	ldrb	r0, [r0, #16]
 80a17be:	f7fe fec5 	bl	80a054c <hal_usart_is_enabled>
 80a17c2:	e7d7      	b.n	80a1774 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a17c4:	2001      	movs	r0, #1
 80a17c6:	e7c8      	b.n	80a175a <pinAvailable+0xa>
 80a17c8:	200003f0 	.word	0x200003f0
 80a17cc:	200003f4 	.word	0x200003f4
 80a17d0:	080a1741 	.word	0x080a1741

080a17d4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a17d4:	2817      	cmp	r0, #23
{
 80a17d6:	b538      	push	{r3, r4, r5, lr}
 80a17d8:	4604      	mov	r4, r0
 80a17da:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a17dc:	d80a      	bhi.n	80a17f4 <pinMode+0x20>
 80a17de:	29ff      	cmp	r1, #255	; 0xff
 80a17e0:	d008      	beq.n	80a17f4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a17e2:	f7ff ffb5 	bl	80a1750 <pinAvailable>
 80a17e6:	b128      	cbz	r0, 80a17f4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a17e8:	4629      	mov	r1, r5
 80a17ea:	4620      	mov	r0, r4
}
 80a17ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a17f0:	f7fe be44 	b.w	80a047c <HAL_Pin_Mode>
}
 80a17f4:	bd38      	pop	{r3, r4, r5, pc}

080a17f6 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a17f6:	b510      	push	{r4, lr}
 80a17f8:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a17fa:	f7fe fe47 	bl	80a048c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a17fe:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a1800:	b2db      	uxtb	r3, r3
 80a1802:	2b01      	cmp	r3, #1
 80a1804:	d908      	bls.n	80a1818 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a1806:	4620      	mov	r0, r4
 80a1808:	f7ff ffa2 	bl	80a1750 <pinAvailable>
 80a180c:	b120      	cbz	r0, 80a1818 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a180e:	4620      	mov	r0, r4
}
 80a1810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a1814:	f7fe be42 	b.w	80a049c <HAL_GPIO_Read>
}
 80a1818:	2000      	movs	r0, #0
 80a181a:	bd10      	pop	{r4, pc}

080a181c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a181c:	4770      	bx	lr
	...

080a1820 <_Z20acquireSerial1Bufferv>:
{
 80a1820:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a1822:	2514      	movs	r5, #20
{
 80a1824:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a1826:	462a      	mov	r2, r5
 80a1828:	2100      	movs	r1, #0
 80a182a:	f000 f89a 	bl	80a1962 <memset>
 80a182e:	8025      	strh	r5, [r4, #0]
 80a1830:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1832:	4e07      	ldr	r6, [pc, #28]	; (80a1850 <_Z20acquireSerial1Bufferv+0x30>)
 80a1834:	4628      	mov	r0, r5
 80a1836:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a1838:	8125      	strh	r5, [r4, #8]
 80a183a:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a183c:	f000 f878 	bl	80a1930 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1840:	4631      	mov	r1, r6
    };
 80a1842:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1844:	4628      	mov	r0, r5
 80a1846:	f000 f873 	bl	80a1930 <_ZnajRKSt9nothrow_t>
    };
 80a184a:	60e0      	str	r0, [r4, #12]
}
 80a184c:	4620      	mov	r0, r4
 80a184e:	bd70      	pop	{r4, r5, r6, pc}
 80a1850:	080a1ca8 	.word	0x080a1ca8

080a1854 <_Z22__fetch_global_Serial1v>:
{
 80a1854:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a1856:	4d0e      	ldr	r5, [pc, #56]	; (80a1890 <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a1858:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a185a:	7829      	ldrb	r1, [r5, #0]
 80a185c:	f3bf 8f5b 	dmb	ish
 80a1860:	f011 0401 	ands.w	r4, r1, #1
 80a1864:	d111      	bne.n	80a188a <_Z22__fetch_global_Serial1v+0x36>
 80a1866:	4628      	mov	r0, r5
 80a1868:	f7fe fc1b 	bl	80a00a2 <__cxa_guard_acquire>
 80a186c:	b168      	cbz	r0, 80a188a <_Z22__fetch_global_Serial1v+0x36>
 80a186e:	a801      	add	r0, sp, #4
 80a1870:	f7ff ffd6 	bl	80a1820 <_Z20acquireSerial1Bufferv>
 80a1874:	4621      	mov	r1, r4
 80a1876:	aa01      	add	r2, sp, #4
 80a1878:	4806      	ldr	r0, [pc, #24]	; (80a1894 <_Z22__fetch_global_Serial1v+0x40>)
 80a187a:	f7ff fe13 	bl	80a14a4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a187e:	4628      	mov	r0, r5
 80a1880:	f7fe fc14 	bl	80a00ac <__cxa_guard_release>
 80a1884:	4804      	ldr	r0, [pc, #16]	; (80a1898 <_Z22__fetch_global_Serial1v+0x44>)
 80a1886:	f000 f858 	bl	80a193a <atexit>
    return serial1;
}
 80a188a:	4802      	ldr	r0, [pc, #8]	; (80a1894 <_Z22__fetch_global_Serial1v+0x40>)
 80a188c:	b007      	add	sp, #28
 80a188e:	bd30      	pop	{r4, r5, pc}
 80a1890:	20000400 	.word	0x20000400
 80a1894:	20000404 	.word	0x20000404
 80a1898:	080a181d 	.word	0x080a181d

080a189c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a189c:	2300      	movs	r3, #0
 80a189e:	b507      	push	{r0, r1, r2, lr}
 80a18a0:	461a      	mov	r2, r3
 80a18a2:	4619      	mov	r1, r3
 80a18a4:	9300      	str	r3, [sp, #0]
 80a18a6:	4803      	ldr	r0, [pc, #12]	; (80a18b4 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a18a8:	f7ff fcea 	bl	80a1280 <_ZN9IPAddressC1Ehhhh>
 80a18ac:	b003      	add	sp, #12
 80a18ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80a18b2:	bf00      	nop
 80a18b4:	2000041c 	.word	0x2000041c

080a18b8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a18b8:	4770      	bx	lr
	...

080a18bc <_Z17acquireWireBufferv>:
{
 80a18bc:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a18be:	2314      	movs	r3, #20
 80a18c0:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a18c2:	4e08      	ldr	r6, [pc, #32]	; (80a18e4 <_Z17acquireWireBufferv+0x28>)
{
 80a18c4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a18c6:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a18c8:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a18ca:	6085      	str	r5, [r0, #8]
 80a18cc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a18ce:	4628      	mov	r0, r5
 80a18d0:	f000 f82e 	bl	80a1930 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a18d4:	4631      	mov	r1, r6
	};
 80a18d6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a18d8:	4628      	mov	r0, r5
 80a18da:	f000 f829 	bl	80a1930 <_ZnajRKSt9nothrow_t>
	};
 80a18de:	60e0      	str	r0, [r4, #12]
}
 80a18e0:	4620      	mov	r0, r4
 80a18e2:	bd70      	pop	{r4, r5, r6, pc}
 80a18e4:	080a1ca8 	.word	0x080a1ca8

080a18e8 <_Z19__fetch_global_Wirev>:
{
 80a18e8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a18ea:	4d0e      	ldr	r5, [pc, #56]	; (80a1924 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a18ec:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a18ee:	7829      	ldrb	r1, [r5, #0]
 80a18f0:	f3bf 8f5b 	dmb	ish
 80a18f4:	f011 0401 	ands.w	r4, r1, #1
 80a18f8:	d111      	bne.n	80a191e <_Z19__fetch_global_Wirev+0x36>
 80a18fa:	4628      	mov	r0, r5
 80a18fc:	f7fe fbd1 	bl	80a00a2 <__cxa_guard_acquire>
 80a1900:	b168      	cbz	r0, 80a191e <_Z19__fetch_global_Wirev+0x36>
 80a1902:	a801      	add	r0, sp, #4
 80a1904:	f7ff ffda 	bl	80a18bc <_Z17acquireWireBufferv>
 80a1908:	4621      	mov	r1, r4
 80a190a:	aa01      	add	r2, sp, #4
 80a190c:	4806      	ldr	r0, [pc, #24]	; (80a1928 <_Z19__fetch_global_Wirev+0x40>)
 80a190e:	f7ff fe1d 	bl	80a154c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a1912:	4628      	mov	r0, r5
 80a1914:	f7fe fbca 	bl	80a00ac <__cxa_guard_release>
 80a1918:	4804      	ldr	r0, [pc, #16]	; (80a192c <_Z19__fetch_global_Wirev+0x44>)
 80a191a:	f000 f80e 	bl	80a193a <atexit>
	return wire;
}
 80a191e:	4802      	ldr	r0, [pc, #8]	; (80a1928 <_Z19__fetch_global_Wirev+0x40>)
 80a1920:	b007      	add	sp, #28
 80a1922:	bd30      	pop	{r4, r5, pc}
 80a1924:	20000434 	.word	0x20000434
 80a1928:	20000438 	.word	0x20000438
 80a192c:	080a18b9 	.word	0x080a18b9

080a1930 <_ZnajRKSt9nothrow_t>:
 80a1930:	f7fe bbb3 	b.w	80a009a <_Znaj>

080a1934 <_ZSt25__throw_bad_function_callv>:
 80a1934:	b508      	push	{r3, lr}
 80a1936:	f7fe ff9f 	bl	80a0878 <abort>

080a193a <atexit>:
 80a193a:	2300      	movs	r3, #0
 80a193c:	4601      	mov	r1, r0
 80a193e:	461a      	mov	r2, r3
 80a1940:	4618      	mov	r0, r3
 80a1942:	f000 b869 	b.w	80a1a18 <__register_exitproc>

080a1946 <memcpy>:
 80a1946:	440a      	add	r2, r1
 80a1948:	4291      	cmp	r1, r2
 80a194a:	f100 33ff 	add.w	r3, r0, #4294967295
 80a194e:	d100      	bne.n	80a1952 <memcpy+0xc>
 80a1950:	4770      	bx	lr
 80a1952:	b510      	push	{r4, lr}
 80a1954:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1958:	4291      	cmp	r1, r2
 80a195a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a195e:	d1f9      	bne.n	80a1954 <memcpy+0xe>
 80a1960:	bd10      	pop	{r4, pc}

080a1962 <memset>:
 80a1962:	4603      	mov	r3, r0
 80a1964:	4402      	add	r2, r0
 80a1966:	4293      	cmp	r3, r2
 80a1968:	d100      	bne.n	80a196c <memset+0xa>
 80a196a:	4770      	bx	lr
 80a196c:	f803 1b01 	strb.w	r1, [r3], #1
 80a1970:	e7f9      	b.n	80a1966 <memset+0x4>
	...

080a1974 <srand>:
 80a1974:	b538      	push	{r3, r4, r5, lr}
 80a1976:	4b10      	ldr	r3, [pc, #64]	; (80a19b8 <srand+0x44>)
 80a1978:	4604      	mov	r4, r0
 80a197a:	681d      	ldr	r5, [r3, #0]
 80a197c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a197e:	b9b3      	cbnz	r3, 80a19ae <srand+0x3a>
 80a1980:	2018      	movs	r0, #24
 80a1982:	f7fe ff61 	bl	80a0848 <malloc>
 80a1986:	4602      	mov	r2, r0
 80a1988:	63a8      	str	r0, [r5, #56]	; 0x38
 80a198a:	b920      	cbnz	r0, 80a1996 <srand+0x22>
 80a198c:	2142      	movs	r1, #66	; 0x42
 80a198e:	4b0b      	ldr	r3, [pc, #44]	; (80a19bc <srand+0x48>)
 80a1990:	480b      	ldr	r0, [pc, #44]	; (80a19c0 <srand+0x4c>)
 80a1992:	f7fe ff81 	bl	80a0898 <__assert_func>
 80a1996:	490b      	ldr	r1, [pc, #44]	; (80a19c4 <srand+0x50>)
 80a1998:	4b0b      	ldr	r3, [pc, #44]	; (80a19c8 <srand+0x54>)
 80a199a:	e9c0 1300 	strd	r1, r3, [r0]
 80a199e:	4b0b      	ldr	r3, [pc, #44]	; (80a19cc <srand+0x58>)
 80a19a0:	2100      	movs	r1, #0
 80a19a2:	6083      	str	r3, [r0, #8]
 80a19a4:	230b      	movs	r3, #11
 80a19a6:	8183      	strh	r3, [r0, #12]
 80a19a8:	2001      	movs	r0, #1
 80a19aa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a19ae:	2200      	movs	r2, #0
 80a19b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a19b2:	611c      	str	r4, [r3, #16]
 80a19b4:	615a      	str	r2, [r3, #20]
 80a19b6:	bd38      	pop	{r3, r4, r5, pc}
 80a19b8:	2000000c 	.word	0x2000000c
 80a19bc:	080a1ca9 	.word	0x080a1ca9
 80a19c0:	080a1cc0 	.word	0x080a1cc0
 80a19c4:	abcd330e 	.word	0xabcd330e
 80a19c8:	e66d1234 	.word	0xe66d1234
 80a19cc:	0005deec 	.word	0x0005deec

080a19d0 <strdup>:
 80a19d0:	4b02      	ldr	r3, [pc, #8]	; (80a19dc <strdup+0xc>)
 80a19d2:	4601      	mov	r1, r0
 80a19d4:	6818      	ldr	r0, [r3, #0]
 80a19d6:	f000 b803 	b.w	80a19e0 <_strdup_r>
 80a19da:	bf00      	nop
 80a19dc:	2000000c 	.word	0x2000000c

080a19e0 <_strdup_r>:
 80a19e0:	b570      	push	{r4, r5, r6, lr}
 80a19e2:	4604      	mov	r4, r0
 80a19e4:	4608      	mov	r0, r1
 80a19e6:	460d      	mov	r5, r1
 80a19e8:	f000 f80d 	bl	80a1a06 <strlen>
 80a19ec:	1c46      	adds	r6, r0, #1
 80a19ee:	4631      	mov	r1, r6
 80a19f0:	4620      	mov	r0, r4
 80a19f2:	f7fe ff49 	bl	80a0888 <_malloc_r>
 80a19f6:	4604      	mov	r4, r0
 80a19f8:	b118      	cbz	r0, 80a1a02 <_strdup_r+0x22>
 80a19fa:	4632      	mov	r2, r6
 80a19fc:	4629      	mov	r1, r5
 80a19fe:	f7ff ffa2 	bl	80a1946 <memcpy>
 80a1a02:	4620      	mov	r0, r4
 80a1a04:	bd70      	pop	{r4, r5, r6, pc}

080a1a06 <strlen>:
 80a1a06:	4603      	mov	r3, r0
 80a1a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1a0c:	2a00      	cmp	r2, #0
 80a1a0e:	d1fb      	bne.n	80a1a08 <strlen+0x2>
 80a1a10:	1a18      	subs	r0, r3, r0
 80a1a12:	3801      	subs	r0, #1
 80a1a14:	4770      	bx	lr
	...

080a1a18 <__register_exitproc>:
 80a1a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1a1c:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a1acc <__register_exitproc+0xb4>
 80a1a20:	4606      	mov	r6, r0
 80a1a22:	f8d8 0000 	ldr.w	r0, [r8]
 80a1a26:	461f      	mov	r7, r3
 80a1a28:	460d      	mov	r5, r1
 80a1a2a:	4691      	mov	r9, r2
 80a1a2c:	f000 f858 	bl	80a1ae0 <__retarget_lock_acquire_recursive>
 80a1a30:	4b27      	ldr	r3, [pc, #156]	; (80a1ad0 <__register_exitproc+0xb8>)
 80a1a32:	681c      	ldr	r4, [r3, #0]
 80a1a34:	b934      	cbnz	r4, 80a1a44 <__register_exitproc+0x2c>
 80a1a36:	4c27      	ldr	r4, [pc, #156]	; (80a1ad4 <__register_exitproc+0xbc>)
 80a1a38:	601c      	str	r4, [r3, #0]
 80a1a3a:	4b27      	ldr	r3, [pc, #156]	; (80a1ad8 <__register_exitproc+0xc0>)
 80a1a3c:	b113      	cbz	r3, 80a1a44 <__register_exitproc+0x2c>
 80a1a3e:	681b      	ldr	r3, [r3, #0]
 80a1a40:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a1a44:	6863      	ldr	r3, [r4, #4]
 80a1a46:	2b1f      	cmp	r3, #31
 80a1a48:	dd07      	ble.n	80a1a5a <__register_exitproc+0x42>
 80a1a4a:	f8d8 0000 	ldr.w	r0, [r8]
 80a1a4e:	f000 f849 	bl	80a1ae4 <__retarget_lock_release_recursive>
 80a1a52:	f04f 30ff 	mov.w	r0, #4294967295
 80a1a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1a5a:	b35e      	cbz	r6, 80a1ab4 <__register_exitproc+0x9c>
 80a1a5c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a1a60:	b988      	cbnz	r0, 80a1a86 <__register_exitproc+0x6e>
 80a1a62:	4b1e      	ldr	r3, [pc, #120]	; (80a1adc <__register_exitproc+0xc4>)
 80a1a64:	b923      	cbnz	r3, 80a1a70 <__register_exitproc+0x58>
 80a1a66:	f8d8 0000 	ldr.w	r0, [r8]
 80a1a6a:	f000 f83a 	bl	80a1ae2 <__retarget_lock_release>
 80a1a6e:	e7f0      	b.n	80a1a52 <__register_exitproc+0x3a>
 80a1a70:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a1a74:	f7fe fee8 	bl	80a0848 <malloc>
 80a1a78:	2800      	cmp	r0, #0
 80a1a7a:	d0f4      	beq.n	80a1a66 <__register_exitproc+0x4e>
 80a1a7c:	2300      	movs	r3, #0
 80a1a7e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a1a82:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a1a86:	2201      	movs	r2, #1
 80a1a88:	6863      	ldr	r3, [r4, #4]
 80a1a8a:	2e02      	cmp	r6, #2
 80a1a8c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a1a90:	fa02 f203 	lsl.w	r2, r2, r3
 80a1a94:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a1a98:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a1a9c:	ea43 0302 	orr.w	r3, r3, r2
 80a1aa0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a1aa4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a1aa8:	bf02      	ittt	eq
 80a1aaa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a1aae:	4313      	orreq	r3, r2
 80a1ab0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a1ab4:	6863      	ldr	r3, [r4, #4]
 80a1ab6:	f8d8 0000 	ldr.w	r0, [r8]
 80a1aba:	1c5a      	adds	r2, r3, #1
 80a1abc:	3302      	adds	r3, #2
 80a1abe:	6062      	str	r2, [r4, #4]
 80a1ac0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a1ac4:	f000 f80e 	bl	80a1ae4 <__retarget_lock_release_recursive>
 80a1ac8:	2000      	movs	r0, #0
 80a1aca:	e7c4      	b.n	80a1a56 <__register_exitproc+0x3e>
 80a1acc:	20000070 	.word	0x20000070
 80a1ad0:	200004d8 	.word	0x200004d8
 80a1ad4:	2000044c 	.word	0x2000044c
 80a1ad8:	00000000 	.word	0x00000000
 80a1adc:	080a0849 	.word	0x080a0849

080a1ae0 <__retarget_lock_acquire_recursive>:
 80a1ae0:	4770      	bx	lr

080a1ae2 <__retarget_lock_release>:
 80a1ae2:	4770      	bx	lr

080a1ae4 <__retarget_lock_release_recursive>:
 80a1ae4:	4770      	bx	lr

080a1ae6 <link_code_end>:
	...

080a1ae8 <dynalib_user>:
 80a1ae8:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a1af8:	0000 0000 6e41 7773 7265 203a 6100 7265     ....Answer: .aer
 80a1b08:	6553 4174 736e 6577 0072 6157 7469 6e69     SetAnswer.Waitin
 80a1b18:	2e67 2e2e 4300 726f 6572 7463 4900 636e     g....Correct.Inc
 80a1b28:	726f 6572 7463 0000                         orrect..

080a1b30 <_ZTV17LiquidCrystal_I2C>:
	...
 80a1b38:	0245 080a 0247 080a 0313 080a 09eb 080a     E...G...........
 80a1b48:	0000 0000 0040 0000 0014 0000 0054 0000     ....@.......T...
 80a1b58:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
 80a1b68:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a1b78 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a1b80:	0c4d 080a 0c53 080a 0c91 080a 0c61 080a     M...S.......a...
 80a1b90:	0c4f 080a                                   O...

080a1b94 <_ZTV9IPAddress>:
	...
 80a1b9c:	11d3 080a 11d1 080a 1205 080a               ............

080a1ba8 <_ZTV9USBSerial>:
	...
 80a1bb0:	129f 080a 1305 080a 12dd 080a 09eb 080a     ................
 80a1bc0:	12cf 080a 12a1 080a 12b1 080a 12ff 080a     ................
 80a1bd0:	12c1 080a 1299 080a                         ........

080a1bd8 <_ZTV11USARTSerial>:
	...
 80a1be0:	142d 080a 1495 080a 1471 080a 09eb 080a     -.......q.......
 80a1bf0:	1441 080a 145d 080a 144f 080a 146b 080a     A...]...O...k...
 80a1c00:	142f 080a 1433 080a                         /...3...

080a1c08 <_ZTV7TwoWire>:
	...
 80a1c10:	14f5 080a 153f 080a 1517 080a 14f7 080a     ....?...........
 80a1c20:	151f 080a 1527 080a 152f 080a 1537 080a     ....'.../...7...

080a1c30 <_ZTVN5spark9WiFiClassE>:
	...
 80a1c38:	1645 080a 163b 080a 1631 080a 15a3 080a     E...;...1.......
 80a1c48:	1625 080a 1619 080a 16a5 080a 16ad 080a     %...............
 80a1c58:	160d 080a 1605 080a 15fb 080a 15f1 080a     ................
 80a1c68:	15ad 080a                                   ....

080a1c6c <_ZTVN5spark12NetworkClassE>:
	...
 80a1c74:	1665 080a 166f 080a 1679 080a 1683 080a     e...o...y.......
 80a1c84:	168d 080a 1699 080a 16a5 080a 16ad 080a     ................
 80a1c94:	16b5 080a 16c1 080a 16c9 080a 16d3 080a     ................
 80a1ca4:	16dd 080a                                   ....

080a1ca8 <_ZSt7nothrow>:
 80a1ca8:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 80a1cb8:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
 80a1cc8:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
 80a1cd8:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
 80a1ce8:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
 80a1cf8:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
 80a1d08:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
 80a1d18:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
 80a1d28:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
 80a1d38:	646e 632e                                    nd.c.

080a1d3d <link_const_variable_data_end>:
 80a1d3d:	00          	.byte	0x00
	...

080a1d40 <link_constructors_location>:
 80a1d40:	080a0239 	.word	0x080a0239
 80a1d44:	080a08d9 	.word	0x080a08d9
 80a1d48:	080a0a81 	.word	0x080a0a81
 80a1d4c:	080a0a91 	.word	0x080a0a91
 80a1d50:	080a0ae1 	.word	0x080a0ae1
 80a1d54:	080a1651 	.word	0x080a1651
 80a1d58:	080a172d 	.word	0x080a172d
 80a1d5c:	080a189d 	.word	0x080a189d
